report rfbide00 message-id fb.
************************************************************************
*        Der Generierungsreport RFBIDEG0
*            benutzt den Rahmen RFBIDE01
*            und schreibt das darin enthaltene Coding
*            plus das neu generierte Coding in RFBIDE00.
************************************************************************

************************************************************************
*        Batch-Input-Programm für Debitorstammdaten.
*        Batch-Input-Programm für Kreditlimitdaten.
************************************************************************



*-----------------------------------------------------------------------
*        Globale Daten
*-----------------------------------------------------------------------
INCLUDE RFBIDDAT.   "globale Daten für Batch-Input und ALE


CONSTANTS gc_filename                                       "n1588734
   TYPE   fileintern                                        "n1588734
   VALUE  'FI_COPY_COMPANY_CODE_DATA_FOR_CUSTOMERS_0X'.     "n1588734

*-----------------------------------------------------------------------
*        Tabellen
*-----------------------------------------------------------------------
tables:  bgr00,                        " Mappenvorsatz
         bkn00,                        " Debi. Batch-Input-Kopfsatz
         bkna1, kna1,                  " DEBI. Allgemein Teil 1
         bknat,                        " DEBI. Steuerkategorien    J_1A
         bknbk,                        " DEBI. Bankverbindungen
         bknbk_iban,                   " IBAN ohne KtoNr.   " \TP 957820
         bknbw,                        " DEBI. Quellensteuer
         bknb1, knb1,                  " DEBI. Buchungskreisdaten
         bknb5,                        " DEBI. Mahndaten
         bknka,                        " Kreditlimit Kontr.ber.übergr.
         bknkk,                        " Kreditlimit Kontrollbereich
         bknvv, knvv,                  " DEBI. Vertriebsdaten
         bknex,                        " DEBI. Außenhandel
         bknva,                        " DEBI. Abladestellen
         bknvd,                        " DEBI. Nachrichten
         bknvi,                        " DEBI. Steuern Vertrieb
         bknvk,                        " DEBI. Ansprechpartner
         bknvl,                        " DEBI. Lizenzen Vertrieb
         bknvp,                        " DEBI. Partnerrollen
         bknza,                        " DEBI. Abw. Regulierer
         bnka,                         " Bankanschrift
*mi/46a begin
         bwrf12,                       " Empfangsstellen
         bwrf4,                        " Abteilungen
*mi/46a end
         biaddr2.                      " Privataddresse Konsument


tables:  t007c,                        " Steuerkategorien       J_1A
         t020,                         " Transaktionssteuerung
         t100,                         " Nachrichten
         tvwa,                         " Warenannahmezeiten
         t001,                         " Buchungskreisdaten
         t059p,                        " Quellensteuertypen
         t077d.                        " Kontengruppen

*eject
*---------------------------------------------------------------------*
*        Interne Tabellen
*---------------------------------------------------------------------*
*------- Dynproreihenfolge ---------------------------------------------
data:    begin of dyntab occurs 10,
           dynnr(4)     type c,        " Dynpronummer
           dtype(1)     type c,        " A=Allg F=RF V=RV L=Limit
           xlist(1)     type c,        " X=Listdynpro
         end of dyntab.

*------- Feldtabelle ---------------------------------------------------
data:    begin of ft occurs 0.
        include structure bdcdata.
data:    end of ft.

*------- Feld-Informationen aus NAMETAB --------------------------------
data:    begin of nametab occurs 60.
        include structure dntab.
data:    end of nametab.

*------- Feld-Informationen aus NAMETAB für BKN00 ----------------------
data:    begin of nametab_bkn00 occurs 10.
        include structure dntab.
data:    end of nametab_bkn00.

*begin of j_1a
*------- Feld-Informationen aus NAMETAB für BKNAT ----------------------
data:    begin of nametab_bknat occurs 20.
        include structure dntab.
data:    end of nametab_bknat.
*end of j_1a

*------- Feld-Informationen aus NAMETAB für BKNBK ----------------------
data:    begin of nametab_bknbk occurs 20.
        include structure dntab.
data:    end of nametab_bknbk.

* \TP 957820 - Begin
*------- Feld-Informationen aus NAMETAB fuer BKNBK_IBAN ----------------
data:    begin of nametab_bknbk_iban occurs 20.
        include structure dntab.
data:    end of nametab_bknbk_iban.
* \TP 957820 - End

*------- Feld-Informationen aus NAMETAB für BKNBW ----------------------
data:    begin of nametab_bknbw occurs 20.
        include structure dntab.
data:    end of nametab_bknbw.

*------- Feld-Informationen aus NAMETAB für BKNVA ---------------------
data:    begin of nametab_bknva occurs 20.
        include structure dntab.
data:    end of nametab_bknva.

*------- Feld-Informationen aus NAMETAB für BKNEX ---------------------
data:    begin of nametab_bknex occurs 20.
        include structure dntab.
data:    end of nametab_bknex.

*------- Feld-Informationen aus NAMETAB für BKNVD ---------------------
data:    begin of nametab_bknvd occurs 20.
        include structure dntab.
data:    end of nametab_bknvd.

*------- Feld-Informationen aus NAMETAB für BKNVI ---------------------
data:    begin of nametab_bknvi occurs 20.
        include structure dntab.
data:    end of nametab_bknvi.

*------- Feld-Informationen aus NAMETAB für BKNVK ---------------------
data:    begin of nametab_bknvk occurs 20.
        include structure dntab.
data:    end of nametab_bknvk.

*------- Feld-Informationen aus NAMETAB für BKNVL ---------------------
data:    begin of nametab_bknvl occurs 20.
        include structure dntab.
data:    end of nametab_bknvl.

*------- Feld-Informationen aus NAMETAB für BKNVP ---------------------
data:    begin of nametab_bknvp occurs 20.
        include structure dntab.
data:    end of nametab_bknvp.

*------- Feld-Informationen aus NAMETAB für BKNZA ----------------------
data:    begin of nametab_bknza occurs 20.
        include structure dntab.
data:    end of nametab_bknza.

*mi/46a begin
*------- Feld-Informationen aus NAMETAB für BWRF12 ---------------------
data:    begin of nametab_bwrf12 occurs 20.
        include structure dntab.
data:    end of nametab_bwrf12.

*------- Feld-Informationen aus NAMETAB für BWRF4 ----------------------
data:    begin of nametab_bwrf4 occurs 20.
        include structure dntab.
data:    end of nametab_bwrf4.
*mi/46a end

*ms/46a begin
*------- Feld-Informationen aus NAMETAB für BIADDR2 --------------------
data:    begin of nametab_biaddr2 occurs 20.
        include structure dntab.
data:    end of nametab_biaddr2.
*ms/46a end

*begin of j_1a
*------- Steuekategorien -----------------------------------------------
data:    begin of xbknat occurs 9.
        include structure bknat.
data:    end of xbknat.
*end of j_1a

*------- Bankverbindungen ----------------------------------------------
data:    begin of xbknbk occurs 9.
        include structure bknbk.
data:    end of xbknbk.

* \TP 957820 - Begin
*------- Bankverbindungen (IBAN ohne Kontonummer) ----------------------
data:    begin of xbknbk_iban occurs 9.
        include structure bknbk_iban.
data:    end of xbknbk_iban.
* \TP 957820 - End

*------- Quellensteuer -------------------------------------------------
data:    begin of xbknbw occurs 9.
        include structure bknbw.
data:    end of xbknbw.

*------- Außenhandel --------------------------------------------------
data:    begin of xbknex occurs 9.
        include structure bknex.
data:    end of xbknex.

*------- Abladestellen ------------------------------------------------
data:    begin of xbknva occurs 9.
        include structure bknva.
data:    end of xbknva.

*------- Nachrichten --------------------------------------------------
data:    begin of xbknvd occurs 9.
        include structure bknvd.
data:    end of xbknvd.

*------- Steuern ------------------------------------------------------
data:    begin of xbknvi occurs 9.
        include structure bknvi.
data:    end of xbknvi.

*------- Ansprechpartner ----------------------------------------------
data:    begin of xbknvk occurs 9.
        include structure bknvk.
data:    end of xbknvk.

*------- Lizenzen -----------------------------------------------------
data:    begin of xbknvl occurs 9.
        include structure bknvl.
data:    end of xbknvl.

*------- Partnerrollen ------------------------------------------------
data:    begin of xbknvp occurs 9.
        include structure bknvp.
data:    end of xbknvp.

*------- abw. Regulierer         ---------------------------------------
data:    begin of xbknza occurs 9.
        include structure bknza.
data:    end of xbknza.

*------- abw. Regulierer (A-Segment) ---------------------------
data:    begin of xbknzaa occurs 9.
        include structure bknza.
data:    end of xbknzaa.

*------- abw. Zahlungsempfaenger (B-Segment) ---------------------------
data:    begin of xbknzab occurs 9.
        include structure bknza.
data:    end of xbknzab.

*------- Transaktionssteuerung -----------------------------------------
data:    begin of xt020 occurs 5.
        include structure t020.
data:    end of xt020.

*mi/46a begin
*------- Empfangsstellen ----------------------------------------------
data:    begin of xbwrf12 occurs 5.
        include structure bwrf12.
data:    end of xbwrf12.

*------- Abteilungen --------------------------------------------------
data:    begin of xbwrf4 occurs 5.
        include structure bwrf4.
data:    end of xbwrf4.
*mi/46a end

*begin of j_1a
*------- Steuekategorien ----------------------------------------------
data:    begin of xt007c occurs 5.
        include structure t007c.
data:    end of xt007c.
*end of j_1a

*------- Quellensteuertypen --------------------------------------------
data:    begin of xt059p occurs 5.
        include structure t059p.
data:    end of xt059p.

*eject
*---------------------------------------------------------------------*
*        Strukturen
*---------------------------------------------------------------------*
*------- Initialstrukturen --------------------------------------------
data:    begin of i_bkna1.
        include structure bkna1.       " DEBI. Stamm Allg. Teil 1
data:    end of i_bkna1.

*begin of j_1a
data:    begin of i_bknat.
        include structure bknat.       " DEBI. Steuerkategorien
data:    end of i_bknat.
*end of j_1a

data:    begin of i_bknbk.
        include structure bknbk.       " DEBI. Bankverbindungen
data:    end of i_bknbk.

* \TP 957820 - Begin
data:    begin of i_bknbk_iban.
        include structure bknbk_iban.  " DEBI. IBAN ohne Kontonummer
data:    end of i_bknbk_iban.
* \TP 957820 - End

data:    begin of i_bknza.
        include structure bknza.       " Kred. abw. Zahlungsempfaenger
data:    end of i_bknza.

data:    begin of i_bknb1.
        include structure bknb1.       " DEBI. Buchungskreisdaten
data:    end of i_bknb1.

data:    begin of i_bknb5.
        include structure bknb5.       " DEBI. Mahndaten
data:    end of i_bknb5.

data:    begin of i_bknbw.
        include structure bknbw.       " DEBI. Quellensteuerdaten
data:    end of i_bknbw.

data:    begin of i_bknka.
        include structure bknka.       " Kreditlimit Kontr.ber.übergr.
data:    end of i_bknka.

data:    begin of i_bknkk.
        include structure bknkk.       " Kreditlimit Kontrollbereich
data:    end of i_bknkk.

data:    begin of i_bknvv.
        include structure bknvv.       " DEBI. Vertriebsdaten
data:    end of i_bknvv.

data:    begin of i_bknex.
        include structure bknex.       " DEBI. Außenhandel
data:    end of i_bknex.

data:    begin of i_bknva.
        include structure bknva.       " DEBI. Abladestellen
data:    end of i_bknva.

data:    begin of i_bknvd.
        include structure bknvd.       " DEBI. Nachrichten
data:    end of i_bknvd.

data:    begin of i_bknvi.
        include structure bknvi.       " DEBI. Steuern
data:    end of i_bknvi.

data:    begin of i_bknvk.
        include structure bknvk.       " DEBI. Ansprechpartner
data:    end of i_bknvk.

data:    begin of i_bknvl.
        include structure bknvl.       " DEBI. Lizenzen
data:    end of i_bknvl.

data:    begin of i_bknvp.
        include structure bknvp.       " DEBI. Partnerrollen
data:    end of i_bknvp.

*mi/46a begin
data:    begin of i_bwrf12.
        include structure bwrf12.      " Empfangstellen
data:    end of i_bwrf12.

data:    begin of i_bwrf4.
        include structure bwrf4.       " Abteilungen
data:    end of i_bwrf4.
*mi/46a end

*ms/46a begin
data:    begin of i_biaddr2.
        include structure biaddr2.       " Privatadresse Konsument
data:    end of i_biaddr2.
*ms/46a end

*------- Workarea zum Lesen der BI-Sätze -------------------------------
data:    begin of wa.
           include structure BDIFIBIWA.
data:    end of wa.

*------- Hilfsfelder ---------------------------------------------------
data:    begin of bi,
           xaseg(1)     type c,        " X=Allg. Daten bearbeiten
           xbukr(1)     type c,        " X=RF-Tabellen bearbeiten
           xvkor(1)     type c,        " X=RV-Tabellen bearbeiten
           xkkbr(1)     type c,        " X=KNKK bearbeiten
         end of bi.

*eject
*---------------------------------------------------------------------*
*        Einzelfelder
*---------------------------------------------------------------------*
data:    char(61)       type c,        " Char. Hilfsfeld
         char1(1)       type c,        " Char. Hilfsfeld
         char2(1)       type c,        " Char. Hilfsfeld
         commit_count(4) type n.       " Zähler für Commit

data:    dyn_count(2)   type n.        " Anzahl Dynpros in DYNTAB

data:    group_count(6) type c,        " Anzahl Mappen
         group_open(1)  type c.        " X=Mappe schon geöffnet

data:    kunnr          like bkn00-kunnr,   " Kundennummer
         kna1_zuda(1)   type c,        " KNA1-Zus.daten-Hilfsfeld
         knvk_mess(1)   type c,        " KNVK-Message-Hilfsfeld
         knvv_zuda(1)   type c.        " KNVV-Zus.daten-Hilfsfeld

data:    licex(1)       type c.        " Hilfsfeld Existenz Lizenz

data:    msgvn          like sy-msgv1, " Hilfsfeld Message-Variable
         msg(100).                     " Hilfsfeld Message-Variable

data:    n(2)           type n,        " Hilfsfeld num.
         nodata(1)      type c,        " Keine BI-Daten für Feld
         nodata_old     like nodata.   " NODATA gemerkt

data:    refe1(8)       type p.        " Hilfsfeld gepackt

data:    satz2_count(6) type c,        " Anz. Sätze(Typ2) je Trans.
         subrc          like sy-subrc. " Subrc

data:    text(200)      type c,        " Messagetext
         text1(40)      type c,        " Messagetext
         text2(40)      type c,        " Messagetext
         text3(40)      type c,        " Messagetext
         trans_count(6) type c,        " Anz. Transakt. je Mappe
         trans_break(6) type c.        " Anz. Transakt. je Mappe

data:    tabix          like sy-tabix. " Hilfsfeld Tabix

data:    wert(60)       type c.        " Hilfsfeld Feldinhalt

data:    brsch1(1)   type c value ' '. " Hilfsfeld für kna1-brsch
data:    brsch2(1)   type c value ' '. " Hilfsfeld für kna1-brsch

data:    xeof(1)        type c,        " X=End of File erreicht
         xnewg(1)       type c,        " X=Neue Mappe
         xdytr(1)       type c,        " X=Dynpro transportiert
         xmess_bkna1-sende(1) type c,  " Message (BKNA1 erweitert)
         xmess_bknb1-sende(1) type c,  " Message (BKNB1 erweitert)
         xmess_bknbk-sende(1) type c,  " Message (BKNBK erweitert)
         xmess_bknkk-sende(1) type c,  " Message (BKNKK erweitert)
         xmess_bknex-sende(1) type c,  " Message (BKNEX erweitert)
         xmess_bknva-sende(1) type c,  " Message (BKNVA erweitert)
         xmess_bknvk-sende(1) type c,  " Message (BKNVK erweitert)
         xmess_bknvp-sende(1) type c,  " Message (BKNVP erweitert)
         xmess_bknvv-sende(1) type c,  " Message (BKNVV erweitert)
         xmess_bknza-sende(1) type c,  " Message (BKNZA erweitert)
         xmess_fd32(1)  type c.        " Message (FD32 neu)

DATA:    gv_consumer_account_group like kna1-ktokd,
         gv_consumer_not_exist type c.

* begin P30K113875
* einmaliger Ansprung des Dynpro zum Löschen und Sperren
data: sperre_gesetzt(1) type c,
      loesch_gesetzt(1) type c.
* end P30K113875

data: g_empty(1)        type c,        " KZ für leere Strukturen
      g_empty_data(2)   type c.

*-----------------------------------------------------------------------
*        Konstanten, Feld-Symbole
*-----------------------------------------------------------------------
data:    rep_name_d(8)  type c value 'SAPMF02D'. " Modulpoolname Debitor
data:    rep_name_l(8)  type c value 'SAPMF02C'. " Modulpoolname Limit

************************************************************************
*        Falls 'Call Transaction ... Using ...' gewünscht bitte die
*        drei folgenden Datenfelder aussternen und die
*        drei gleichlautenden Parameter einsternen.
*        Vor der Benutzung des 'Call Transaction ... Using ...'
*        bitte die Datei prüfen.
************************************************************************
data:    xcall(1)       type c.        " X=Call transaction ..usin
data:    anz_mode(1)    type c.        " A=alles N=nichts E=Error
data:    update(1)      type c.        " S=Synchron A=Asynchron

*------- Aufbau des Selektionsbildes -----------------------------------
selection-screen skip 1.

parameters: ds_name     like rfpdo-rfbifile.  " Dateiname

parameters: lds_name    like filename-fileintern no-display.
" Log. Dateiname
parameters: param1(6) no-display.                   " Dateiname-Suffix

selection-screen skip 1.
*selection-screen uline.
*selection-screen skip 1.

selection-screen begin of block bl2 with frame title text-bl2.
parameters:
  os_xon       like  rfpdo-rfbioldstr. " Alte Strukturen ?
selection-screen end of block bl2.

selection-screen begin of block bl3 with frame title text-bl3.
parameters: fl_check like rfpdo-rfbichck,        " Datei nur pruefen?
            xnonunic like rfpdo1-rfbinonunicode. " Non-Unicode File?
selection-screen end of block bl3.

* info message as popup, log or no info
selection-screen begin of block bl4 with frame title text-bl4.
parameters: xpop type c radiobutton group info,
            xlog type c radiobutton group info,
            xinf type c radiobutton group info.
selection-screen end of block bl4.


*PARAMETERS: XCALL       LIKE RFPDO-RFBICALL. " X=Call trans...using ..
*PARAMETERS: ANZ_MODE    LIKE RFPDO-ALLGAZMD  " A=alles N=nichts E=Error
*                             DEFAULT 'N'.
*PARAMETERS: UPDATE      LIKE RFPDO-ALLGVBMD  " S=Synchron A=Asynchron
*                             DEFAULT 'S'.

initialization.                                              "\SG 910857
 if CL_ABAP_CHAR_UTILITIES=>charsize = 1.                    "\SG 910857
   XNONUNIC = 'X'.                                           "\SG 910857
 endif.                                                      "\SG 910857
* begin "n1588734
  CALL FUNCTION 'FILE_GET_NAME'
    EXPORTING
      logical_filename = gc_filename
      parameter_1      = sy-cprog
      including_dir    = 'X'
    IMPORTING
      file_name        = ds_name
    EXCEPTIONS
      OTHERS           = 0.
* end "n1588734

*eject
************************************************************************
*        Hauptablauf
************************************************************************
start-of-selection.

clear: xeof, xnewg,
       group_count, trans_count, satz2_count,
       commit_count.

*------- Batch-Input-Verarbeitung --------------------------------------
clear xale.

* initialize log
call function 'FI_MESSAGE_INIT'.

if not ( lds_name is initial  or  ds_name is initial ).
  perform log_msg using '29' 'I' '814'
          space space space space .
  perform log_abort using c_msgid '013'.
endif.

perform addon_init_global_variables using 'D'.        " ADD_ON-Aenderung

* \LA XML Advices begin
* Switch abfragen und globlae Var. setzen
   g_switch_paymadv =  CL_FIN_APAR_SWITCH_CHECK=>FIN_APAR_PAYMT_ADV( ).
* \LA XML Advices end

*------- Datei nur prüfen ? --------------------------------------------
if fl_check ne space.
  perform log_msg using c_msgid 'I' '018'
   ds_name space space space .
endif.

*------- Call Transaction .. Using ..? ---------------------------------
if xcall ne space.
  if fl_check ne space.
    perform log_msg using c_msgid 'I' '022'
     space space space space .
  else.
    perform log_msg using c_msgid 'I' '021'
     space space space space .
  endif.
endif.

if not lds_name is initial.
  call function 'FILE_GET_NAME'
    exporting
      logical_filename = lds_name
      parameter_1      = param1
    importing
      file_name        = ds_name
    exceptions
      file_not_found   = 01.

  if sy-subrc ne 0.
    perform log_msg using c_msgid 'I' '016'
            lds_name space space space .
    perform log_abort using c_msgid '013'.
  endif.
endif.

*------- Datei oeffnen / lesen ---------------------------------------

* begin "n1588734
  CALL FUNCTION 'FILE_VALIDATE_NAME'
    EXPORTING
      logical_filename  = gc_filename
      parameter_1       = sy-cprog
    CHANGING
      physical_filename = ds_name
    EXCEPTIONS
      OTHERS            = 1.

  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
      WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.
* end "n1588734
clear l_ex.                                  " \MN 1734244
TRY.                                         " \MN 1734244
if xnonunic = space.
  open dataset ds_name for input
       in text mode encoding UTF-8
       skipping byte-order mark                             " \TP 855495
       ignoring conversion errors
       message MSG.
else.
  open dataset ds_name for input
       in text mode encoding non-unicode
       ignoring conversion errors
       message msg.
endif. " xnonunic = space

if sy-subrc ne 0.
  perform log_msg using c_msgid 'I' '899' msg     '' '' ''.
  perform log_msg using c_msgid 'I' '002' ds_name '' '' ''.
  perform log_abort using c_msgid '013'.
endif.
 catch cx_sy_file_authority into l_ex.        " \MN 1734244
   message l_ex type 'E'. exit.               " \MN 1734244
ENDTRY.                                       " \MN 1734244

clear wa.
read dataset ds_name into wa.
if sy-subrc ne 0.
  perform log_msg using c_msgid 'I' '003'
                            ds_name space space space.
  perform log_abort using c_msgid '013'.
endif.

*------- erster Satz muss Mappensatz sein ------------------------------
if wa(1) ne '0'.
  perform log_msg using c_msgid 'I' '004'
                            ds_name space space space.
  perform log_abort using c_msgid '013'.

endif.

*------- Mappedaten prüfen und Mappe öffnen ----------------------------
perform mappe_pruefen_oeffnen.

*------- 1. Kopfsatz lesen / bearbeiten --------------------------------
perform kopfsatz_lesen.

*-- Falls nur der Mappenvorsatz BGR00 übergeben worden ist, so wird ----
*-- eine leere Mappe erzeugt  ------------------------------------------
if xeof = 'X'.
  perform log_msg using c_msgid 'I' '070'
   ds_name space space space .
  perform log_msg using c_msgid 'I' '071'
   bgr00-group space space space .
  perform mappe_schliessen.
  perform log_print.
  exit.
endif.

perform kopfsatz_bearbeiten.

while xeof ne 'X'.
  perform init_debi_strukturen.

*-----------------------------------------------------------------------
*        Batch-Input-Datensätzen für die Transaktion lesen
*-----------------------------------------------------------------------
  do.
    clear wa.
    read dataset ds_name into wa.

*------- End of File erreicht ? --> Exit Do-Schleife -------------------
    if sy-subrc ne 0.
      xeof = 'X'.
      exit.
    endif.

*------- Nächste Mappe ? --> Exit Do-Schleife --------------------
    if wa(1) = '0'.
      xnewg = 'X'.
      exit.
    endif.

*------- Nächste Transaktion ? --> Exit Do-Schleife --------------------
    if wa(1) = '1'.
      exit.
    endif.

*------- Kennzeichen für Datensatz (Typ 2) gesetzt ? -------------------
    satz2_count = satz2_count + 1.
    if wa(1) ne '2'.
      perform log_msg using c_msgid 'I' '102'
       trans_count satz2_count space space .
      perform dump_bkn00.
      perform log_abort using c_msgid '013'.
    endif.

* Daten werden wegen der Feldlänge-Erweiterung des Feldes TBNAM
* von 10B (<4.0) auf 30B verschoben
    if os_xon = xon.
      shift wa by 20 places right.
      wa(31) = wa+20(11).
    endif.

*------- Tabellenname angegeben ? --------------------------------------
    if wa+1(1)  = nodata
    or wa+1(30) = space.
      perform log_msg using c_msgid 'I' '103'
       trans_count satz2_count space space .
      perform dump_bkn00.
      perform log_abort using c_msgid '013'.
    endif.

*------- Daten aus Workarea in Strukturen übertragen--------------------
    perform wa_uebertragen.
  enddo.

*-----------------------------------------------------------------------
*        Transaktion erzeugen.
*-----------------------------------------------------------------------

*------- Daten in Dynpros übertragen -----------------------------------
  perform daten_uebertragung.
  if xeof ne 'X'.

*------- Neue Mappe ? --------------------------------------------------
    if xnewg = 'X'.
      perform mappen_wechsel.

*------- nächsten Kopfsatz lesen ---------------------------------------
      perform kopfsatz_lesen.
    endif.

*------- nächsten Kopfsatz bearbeiten ----------------------------------
    perform kopfsatz_bearbeiten.
  endif.
endwhile.

*------- Mappe schliessen ----------------------------------------------
perform mappe_schliessen.
perform log_print.

include rfbidf00.      "allgemeine Form-Routinen ALE / Batch-Input

*eject.
************************************************************************
*        Interne Perform-Routinen
************************************************************************
*eject
*-----------------------------------------------------------------------
*        Form  AKTIVITAET_ERMITTELN
*-----------------------------------------------------------------------
*        Ermitteln von Aktion   (AKTYP)
*                      Vorgang  (DYNCL)
*                      Funktion (FUNCL) aus T020 (XT020).
*-----------------------------------------------------------------------
form aktivitaet_ermitteln.
  if bkn00-tcode(1) = nodata
  or bkn00-tcode    = space.
    perform log_msg using c_msgid 'I' '112'
     trans_count space space space .
    perform dump_bkn00.
    perform log_abort using c_msgid '013'.
  endif.

*------- Tcode erlaubt? -----------------------------------------------
  if bkn00-tcode = 'FD20'
  or bkn00-tcode = 'FD22'.
    if xmess_fd32 ne 'X'.
      perform log_msg using c_msgid 'I' '026'
       trans_count bkn00-tcode space space .
      xmess_fd32 = 'X'.
    endif.
    bkn00-tcode = 'FD32'.
  endif.
  if  bkn00-tcode ne 'XD01'            " Anl. Debitor zentral
  and bkn00-tcode ne 'XD02'            " Änd. Debitor zentral
  and bkn00-tcode ne 'XD05'            " Änd. Sperren zentral
  and bkn00-tcode ne 'XD06'            " Änd. Lövm    zentral
  and bkn00-tcode ne 'FD32'.           " Pflegen Kreditlimit
    perform log_msg using c_msgid 'I' '109'
     trans_count bkn00-tcode space space .
    perform dump_bkn00.
    perform log_abort using c_msgid '013'.
  endif.

*------- T020 lesen (1. interne Tabelle, 2. ATAB-TAbelle) --------------
  loop at xt020 where tcode = bkn00-tcode.
    exit.
  endloop.
  if sy-subrc ne 0.
    select single * from t020 where tcode = bkn00-tcode.
    if sy-subrc = 0.
      xt020 = t020.
      append xt020.
    else.
      perform log_msg using c_msgid 'I' '108'
       trans_count bkn00-tcode space space .
      perform dump_bkn00.
      perform log_abort using c_msgid '013'.
    endif.
  endif.
endform.                    "AKTIVITAET_ERMITTELN


*eject
*-----------------------------------------------------------------------
*        Form  CHECK_STRUCTURE_EMPTY
*-----------------------------------------------------------------------
*
*-----------------------------------------------------------------------
form check_structure_empty using structure.

  clear g_empty.

  case structure.
    when 'BKNAT'.                  " Steuern (Argentinien)
      if xbknat = i_bknat.
        g_empty = 'X'.
      endif.
    when 'BKNBK'.                  " Bankverbindung
      xbknbk-sende = nodata.
      if xbknbk = i_bknbk.
        g_empty = 'X'.
      endif.
    when 'BKNBK_IBAN'.             " Bankverbindung         " \TP 957820
      xbknbk_iban-sende = nodata.                           " \TP 957820
      if xbknbk_iban = i_bknbk_iban.                        " \TP 957820
        g_empty = 'X'.                                      " \TP 957820
      endif.                                                " \TP 957820
    when 'BKNZA'.                  " Abw. Regulierer
      if xbknza = i_bknza.
        g_empty = 'X'.
      endif.
    when 'BKNBW'.                  " Erweiterte Quellensteuer
      xbknbw-sende = nodata.
      if xbknbw = i_bknbw.
        g_empty = 'X'.
      endif.
    when 'BKNEX'.                  " Aussenhandel           " \TP 857698
      xbknex-sende = nodata.                                " \TP 857698
      if xbknex = i_bknex.                                  " \TP 857698
        g_empty = 'X'.                                      " \TP 857698
      endif.                                                " \TP 857698
    when 'BKNVA'.                  " Abladestellen          " \TP 857698
      xbknva-sende = nodata.                                " \TP 857698
      if xbknva = i_bknva.                                  " \TP 857698
        g_empty = 'X'.                                      " \TP 857698
      endif.                                                " \TP 857698
    when 'BKNVD'.                  " Nachrichten            " \TP 857698
      xbknvd-sende = nodata.                                " \TP 857698
      if xbknvd = i_bknvd.                                  " \TP 857698
        g_empty = 'X'.                                      " \TP 857698
      endif.                                                " \TP 857698
    when 'BKNVI'.                  " Steuerindikatoren      " \TP 857698
      xbknvi-sende = nodata.                                " \TP 857698
      if xbknvi = i_bknvi.                                  " \TP 857698
        g_empty = 'X'.                                      " \TP 857698
      endif.                                                " \TP 857698
    when 'BKNVK'.                  " Ansprechpartner
      xbknvk-sende = nodata.
      if xbknvk = i_bknvk.
        g_empty = 'X'.
      endif.
    when 'BKNVL'.                  " Lizenzen               " \TP 857698
      xbknvl-sende = nodata.                                " \TP 857698
      if xbknvl = i_bknvl.                                  " \TP 857698
        g_empty = 'X'.                                      " \TP 857698
      endif.                                                " \TP 857698
    when 'BKNVP'.                  " Partnerrollen          " \TP 857698
      xbknvp-sende = nodata.                                " \TP 857698
      if xbknvp = i_bknvp.                                  " \TP 857698
        g_empty = 'X'.                                      " \TP 857698
      endif.                                                " \TP 857698
    when 'BWRF4'.                  " Abteilungen            " \TP 857698
      if xbwrf4 = i_bwrf4.                                  " \TP 857698
        g_empty = 'X'.                                      " \TP 857698
      endif.                                                " \TP 857698
    when 'BWRF12'.                 " Empfangsstellen        " \TP 857698
      if xbwrf12 = i_bwrf12.                                " \TP 857698
        g_empty = 'X'.                                      " \TP 857698
      endif.                                                " \TP 857698
  endcase.
endform.                    "check_structure_empty

*eject
*-----------------------------------------------------------------------
*        Form  BNKA_BEARBEITEN
*-----------------------------------------------------------------------
*        Bankanschrift prüfen/übertragen
*        Es können nur neue Einträge in BNKA hinzugefügt werden.
*        Existierende Einträge können nicht geändert werden.
*-----------------------------------------------------------------------
form bnka_bearbeiten.
  DATA WA_T100S LIKE T100S.
  DATA PROCESSBANKMASTER TYPE C.
  data: l_t005     type t005,    " Laendereinstellung
        l_bank_key type bankk.   " BLZ oder Bankkonto (NL)
  data: ls_bnka    type bnka.                              " \TP 1031863

*------- Wurden BNKA-Daten übergeben ----------------------------------
  check xbknbk-banka(1) ne nodata
  or    xbknbk-provz(1) ne nodata
  or    xbknbk-stras(1) ne nodata
  or    xbknbk-ort01(1) ne nodata
  or    xbknbk-swift(1) ne nodata
  or    xbknbk-bgrup(1) ne nodata
  or    xbknbk-xpgro(1) ne nodata
  or    xbknbk-bnklz(1) ne nodata.

*------- Delete-Flag gesetzt? -----------------------------------------
  if xbknbk-xdele eq 'X'.
    perform iban_wo_accno_log_msg_120 using trans_count     " \TP 957820
      xbknbk-banks xbknbk-bankl xbknbk-bankn ''.            " \TP 957820
    perform log_msg using c_msgid 'I' '115'
     space space space space .
    perform log_msg using c_msgid 'I' '116'
     space space space space .
    perform dump_bkn00.
    perform dump_bknbk.
    exit.
  endif.

*------- T005 lesen ---------------------------------------------------
  if xbknbk-banks(1) = nodata
  or xbknbk-banks    = space.
    perform iban_wo_accno_log_msg_120 using trans_count     " \TP 957820
      xbknbk-banks xbknbk-bankl xbknbk-bankn ''.            " \TP 957820
    perform log_msg using c_msgid 'I' '118'
     space space space space .
    perform log_msg using c_msgid 'I' '116'
     space space space space .
    perform dump_bkn00.
    perform dump_bknbk.
    exit.
  endif.

  perform read_t005 using xbknbk-banks changing l_t005.
  if l_t005 is initial.
    perform iban_wo_accno_log_msg_120 using trans_count     " \TP 957820
      xbknbk-banks xbknbk-bankl xbknbk-bankn ''.            " \TP 957820
    perform log_msg using c_msgid 'I' '119' xbknbk-banks '' '' ''.
    perform log_msg using c_msgid 'I' '116' ''           '' '' ''.
    perform dump_bkn00.
    perform dump_bknbk.
    exit.
  endif. " l_t005 is initial

*------- Auswertung der Landeseinstellung T005 ------------------------
  if l_t005-bnkey = '2'.
    l_bank_key = xbknbk-bankn.
  else.
    l_bank_key = xbknbk-bankl.
  endif.
  if  l_t005-bnkey ca '34'
  and l_t005-lnblz <> 0.   " BLZ-laenge <> 0
*   Feld ist eingabebereit
  else.
    xbknbk-bnklz = nodata.
  endif.
  if ( l_t005-landk <> 'CH' and l_t005-landk <> 'FL' )
  or   l_t005-lnpsk = 0.
    xbknbk-pskto = nodata.
  endif.

*------- Existiert die Bank schon in BNKA? -- Note 0399315 -------------
*  IF BANK_KEY NE SPACE.
*    SELECT SINGLE * FROM BNKA WHERE BANKS = XBKNBK-BANKS
*                              AND   BANKL = BANK_KEY.
*    IF SY-SUBRC = 0.
*      MESSAGE I120 WITH TRANS_COUNT
*                        XBKNBK-BANKS XBKNBK-BANKL XBKNBK-BANKN.
*      MESSAGE I117 WITH XBKNBK-BANKS BANK_KEY.
*      MESSAGE I124 WITH XBKNBK-BANKA.
*      MESSAGE I116.
*      EXIT.
*    ENDIF.
*  ENDIF.

*------- neue Bankanschrift übertragen --------------------------------
  CLEAR WA_T100S.
  SELECT SINGLE * FROM T100S INTO WA_T100S
                  WHERE ARBGB = 'F2' AND MSGNR = '778'.
  PROCESSBANKMASTER = 'X'.
* The variable message F2 778 is a mean to avoid updates and creation
* of bank master data during IDOC processing.
* If variable message is de-activated or not existing,
* we process the bank master data.
* If the variable message is activated but the bank master data is
* not existing, we process the bank master data.
* otherwise we do not process the bank master data
  IF SY-SUBRC = 0 AND WA_T100S-XIGNO IS INITIAL.
    perform bnka_read using xbknbk-banks l_bank_key        " \TP 1031863
                   changing ls_bnka.                       " \TP 1031863
    if ls_bnka-banka is not initial.
      clear processbankmaster.
    endif.
  ENDIF.
  IF NOT PROCESSBANKMASTER IS INITIAL.
    PERFORM OKCODE_BANK.
    perform dynpro_fuellen using 'B100'.
    perform dynpro_begin using rep_name_d dyntab-dynnr.
    xdytr = 'X'.
  ENDIF.
endform.                    "BNKA_BEARBEITEN

*begin of j_1a
*eject
*-----------------------------------------------------------------------
*        Form  KNAT_BEARBEITEN
*-----------------------------------------------------------------------
*        Steuekategorien prüfen/übertragen
*-----------------------------------------------------------------------
form knat_bearbeiten.
  check xbknat-taxgr(1) ne nodata.

  if xbknat-taxgr(1) = nodata
  or xbknat-taxgr    = space.
    perform log_msg using '8A' 'I' '051'
            trans_count xbknat-taxgr space space.
    perform log_msg using '8A' 'I' '052'
            space space space space.
    perform dump_bkn00.
    perform dump_bknat.
    exit.
  endif.

* check, if group is existing
  read table xt007c with key koart = 'D'
                             taxgr = xbknat-taxgr.

  if sy-subrc ne 0.
    select single * from t007c where koart = 'D'
                               and   taxgr = xbknat-taxgr.
    if sy-subrc = 0.
      xt007c = t007c.
      append xt007c.
    else.
      perform log_msg using '8A' 'I' '051'
            trans_count xbknat-taxgr space space.
      perform log_msg using '8A' 'I' '053'
            space space space space.
      perform dump_bkn00.
      perform dump_bknat.
      exit.
    endif.
  endif.
endform.                    "KNAT_BEARBEITEN
*end of j_1a

*eject
*&---------------------------------------------------------------------*
*&      Form  KNBW_BEARBEITEN
*&---------------------------------------------------------------------*
*    Quellensteuertypen prüfen
*----------------------------------------------------------------------*
form knbw_bearbeiten.

  check xbknbw-witht(1) ne nodata.

  if xbknbw-witht(1) = nodata
  or xbknbw-witht    = space.
    perform log_msg using c_msgid 'I' '135'
     trans_count xbknbw-witht space space .
    perform log_msg using c_msgid 'I' '136'
     space space space space .
    perform dump_bkn00.
    perform dump_bknbw.
    exit.
  endif.

  read table xt059p with key land1 = t001-land1
                             witht = xbknbw-witht.

  if sy-subrc ne 0.
    select single * from t059p where land1 = t001-land1
                               and   witht = xbknbw-witht.
    if sy-subrc = 0.
      xt059p = t059p.
      append xt059p.
    else.
      perform log_msg using c_msgid 'I' '135'
       trans_count xbknbw-witht space space .
      perform log_msg using c_msgid 'I' '137'
       space space space space .
      perform dump_bkn00.
      perform dump_bknbw.
      exit.
    endif.
  endif.

endform.                               " KNBW_BEARBEITEN

*eject
*-----------------------------------------------------------------------
*        Form  CURSOR_SETZEN_0130
*-----------------------------------------------------------------------
*        In Loop-Verarbeitung Cursor auf Zeile 1 positionieren.
*        Verarbeitung der Bankverbindungen auf Dynpro 0130.
*-----------------------------------------------------------------------
form cursor_setzen_0130.
  check fl_check = space.

  clear ft.
  ft-fnam = 'BDC_CURSOR'.
  ft-fval = 'KNBK-BANKS(1)'.
  append ft.
endform.                    "CURSOR_SETZEN_0130

*eject
*-----------------------------------------------------------------------
*        Form  CURSOR_SETZEN_0324
*-----------------------------------------------------------------------
*        In Loop-Verarbeitung Cursor auf Zeile 1 positionieren.
*        Verarbeitung der Partnerrollen auf Dynpro 0324.
*-----------------------------------------------------------------------
form cursor_setzen_0324.
  check fl_check = space.

  clear ft.
  ft-fnam = 'BDC_CURSOR'.
  ft-fval = 'KNVP-PARVW(1)'.
  append ft.
endform.                    "CURSOR_SETZEN_0324

*eject
*-----------------------------------------------------------------------
*        Form  CURSOR_SETZEN_0326
*-----------------------------------------------------------------------
*        In Loop-Verarbeitung Cursor auf Zeile 1 positionieren.
*        Verarbeitung der Nachrichten auf Dynpro 0326.
*-----------------------------------------------------------------------
form cursor_setzen_0326.
  check fl_check = space.

  clear ft.
  ft-fnam = 'BDC_CURSOR'.
  ft-fval = 'KNVD-DOCTP(1)'.
  append ft.
endform.                    "CURSOR_SETZEN_0326

*eject
*-----------------------------------------------------------------------
*        Form  CURSOR_SETZEN_0340
*-----------------------------------------------------------------------
*        In Loop-Verarbeitung Cursor auf Zeile 1 positionieren.
*        Verarbeitung der Abladestellen auf Dynpro 0340.
*-----------------------------------------------------------------------
form cursor_setzen_0340.
  check fl_check = space.

  clear ft.
  ft-fnam = 'BDC_CURSOR'.
  ft-fval = 'KNVA-ABLAD(1)'.
  append ft.
endform.                    "CURSOR_SETZEN_0340

*mi/46a begin
*-----------------------------------------------------------------------
*        Form  CURSOR_SETZEN_0420
*-----------------------------------------------------------------------
*        In Loop-Verarbeitung Cursor auf Zeile 1 positionieren.
*        Verarbeitung der Empfangstellen auf Dynpro 0420.
*-----------------------------------------------------------------------
form cursor_setzen_0420.
  check fl_check = space.

  clear ft.
  ft-fnam = 'BDC_CURSOR'.
  ft-fval = 'WRF12-EMPST(1)'.
  append ft.
endform.                    "CURSOR_SETZEN_0420

*-----------------------------------------------------------------------
*        Form  CURSOR_SETZEN_0410
*-----------------------------------------------------------------------
*        In Loop-Verarbeitung Cursor auf Zeile 1 positionieren.
*        Verarbeitung der Abteilungen auf Dynpro 0410.
*-----------------------------------------------------------------------
form cursor_setzen_0410.
  check fl_check = space.

  clear ft.
  ft-fnam = 'BDC_CURSOR'.
  ft-fval = 'WRF4-ABTNR(1)'.
  append ft.
endform.                    "CURSOR_SETZEN_0410
*mi/46a end

*eject
*-----------------------------------------------------------------------
*        Form  CURSOR_SETZEN_0360
*-----------------------------------------------------------------------
*        In Loop-Verarbeitung Cursor auf Zeile 1 positionieren.
*        Verarbeitung der Ansprechpartner auf Dynpro 0360.
*-----------------------------------------------------------------------
form cursor_setzen_0360.
  check fl_check = space.

  clear ft.
  ft-fnam = 'BDC_CURSOR'.
  ft-fval = 'KNVK-NAME1(1)'.
  append ft.
endform.                    "CURSOR_SETZEN_0360

*eject
*-----------------------------------------------------------------------
*        Form  CURSOR_SETZEN_0370
*-----------------------------------------------------------------------
*        In Loop-Verarbeitung Cursor auf Zeile 1 positionieren.
*        Verarbeitung der Außenhandelsdaten auf Dynpro 0370.
*-----------------------------------------------------------------------
form cursor_setzen_0370.
  check fl_check = space.

  clear ft.
  ft-fnam = 'BDC_CURSOR'.
  ft-fval = 'KNEX-LNDEX(1)'.
  append ft.
endform.                    "CURSOR_SETZEN_0370

*begin of j_1a
*eject
*-----------------------------------------------------------------------
*        Form  CURSOR_SETZEN_0600
*-----------------------------------------------------------------------
*        In Loop-Verarbeitung Cursor auf Zeile 1 positionieren.
*        Verarbeitung der Steuekategorien auf Dynpro 0600.
*-----------------------------------------------------------------------
form cursor_setzen_0600.
  check fl_check = space.

  clear ft.
  ft-fnam = 'BDC_CURSOR'.
  ft-fval = 'KNAT-TAXGR(1)'.
  append ft.
endform.                    "CURSOR_SETZEN_0600
*end of j_1a

*eject
*-----------------------------------------------------------------------
*        Form  CURSOR_SETZEN_1130
*-----------------------------------------------------------------------
*        In Loop-Verarbeitung Cursor auf Zeile 1 positionieren.
*        Verarbeitung der abw. Regulierer auf Dynpro 1130.
*-----------------------------------------------------------------------
form cursor_setzen_1130.
  check fl_check = space.

  clear ft.
  ft-fnam = 'BDC_CURSOR'.
  ft-fval = 'KNZA-EMPFD(1)'.
  append ft.
endform.                    "CURSOR_SETZEN_1130

*eject
*-----------------------------------------------------------------------
*        Form  CURSOR_SETZEN_1350
*-----------------------------------------------------------------------
*        In Loop-Verarbeitung Cursor auf Zeile 1 positionieren.
*        Verarbeitung der Steuern auf Dynpro 1350.
*-----------------------------------------------------------------------
form cursor_setzen_1350.
  check fl_check = space.

  clear ft.
  ft-fnam = 'BDC_CURSOR'.
  ft-fval = 'KNVI-TAXKD(1)'.
  append ft.
endform.                    "CURSOR_SETZEN_1350

*eject
*-----------------------------------------------------------------------
*        Form  CURSOR_SETZEN_1355
*-----------------------------------------------------------------------
*        In Loop-Verarbeitung Cursor auf Zeile 1 positionieren.
*        Verarbeitung der Lizenzen auf Dynpro 1355.
*-----------------------------------------------------------------------
form cursor_setzen_1355.
  check fl_check = space.

  clear ft.
  ft-fnam = 'BDC_CURSOR'.
  ft-fval = 'KNVL-LICNR(1)'.
  append ft.
endform.                    "CURSOR_SETZEN_1355

*eject
*-----------------------------------------------------------------------
*        Form  DATEN_UREBERTRAGUNG
*-----------------------------------------------------------------------
*        Verarbeiten der eingelesenen Debitordaten.
*        Füllen und Ausgeben der Dynpros.
*-----------------------------------------------------------------------
form daten_uebertragung.

*------- BDC-Tabelle für neue Transaktion initialisieren --------------
  refresh ft.


* begin P30K113875
  clear: sperre_gesetzt,
         loesch_gesetzt.
* end P30K113875

*------- Abw. Regulierer verteilen --------------------------
  describe table xbknza lines refe1.
  if refe1 gt 0.
    perform xbknza_split.
  endif.

*------- Nicht zu bearbeitende Bilder aus DYNTAB entfernen (FD32) ------
  if  bkn00-tcode  eq 'FD32'
  and bknka        eq i_bknka.
*mi/46a begin
    delete dyntab where dynnr = 'L120'.
*   LOOP AT dyntab WHERE dynnr = 'L120'.
*     DELETE dyntab.
*   ENDLOOP.
*mi/46a end
  endif.

*------- Nicht zu bearbeitende Bilder aus DYNTAB entfernen (XD02) ------
*        'Ansprechpartner' (0360)
  describe table xbknvk lines refe1.
* MS Hinweis 446677 begin
  if  gv_consumer_account_group is initial
  and gv_consumer_not_exist is initial.
    select single ktokd from t077d
           into gv_consumer_account_group
           where dear6 = 'X'.
    if sy-subrc <> 0.
      gv_consumer_not_exist = 'X'.
    endif.
  endif.
  IF ( BKN00-TCODE  EQ 'XD02' AND REFE1 EQ 0 )
  OR ( ( NOT gv_consumer_account_group is initial
       AND BKN00-KTOKD  =  gv_consumer_account_group )
       OR  KNA1-DEAR6   = 'X' ).    "ms Konsument
* MS Hinweis 446677 end
*mi/46a begin
    delete dyntab where dynnr = '0360'.
*   LOOP AT dyntab WHERE dynnr = '0360'.
*     DELETE dyntab.
*   ENDLOOP.
*mi/46a end
  endif.

*       'Nachrichten' (0326)
* Das Dynpro wird nur dann prozessiert, falls der Kontengruppe ein
* Nachrichtenschema zugeordnet ist.
* Das Dynpro wird nicht prozessiert, falls CHAR1 angekreuzt.
  describe table xbknvd lines refe1.
  if refe1 eq 0.
    clear char1.
* Debitor anlegen
    if bkn00-ktokd ne space and bkn00-ktokd ne nodata.
      select single * from t077d where ktokd eq bkn00-ktokd
                                 and   kalsm ne space.
      if sy-subrc ne 0.
        char1 = 'X'.
      endif.
    else.
* Debitor aendern
* Falls KNA1 noch nicht gefüllt ist, so wird es jetzt gemacht
      if kna1-ktokd eq space.
        call function 'V_KNA1_SINGLE_READ'
          exporting
            pi_kunnr         = kunnr
          importing
            pe_kna1          = kna1
          exceptions
            no_records_found = 1
            others           = 2.
      endif.
* das aktuelle KNA1 abfragen
      if kna1-ktokd ne space.
        select single * from t077d where ktokd eq kna1-ktokd
                                   and   kalsm ne space.
        if sy-subrc ne 0.
          char1 = 'X'.
        endif.
      else.
        char1 = 'X'.
      endif.
    endif.
    if  char1 eq 'X'.
      loop at dyntab where dynnr = '0326'.
        delete dyntab.
      endloop.
    endif.
  endif.

*------- Anzahl Bilder in DYNTAB ---------------------------------------
  describe table dyntab lines dyn_count.

*------- Einstiegsbild ermitteln ---------------------------------------
  case xt020-aktyp.
    when 'H'.
      perform d0100_fuellen.           " Anl. Debitor
    when 'V'.
      case xt020-funcl.
        when space.
          case xt020-dyncl.
            when 'C'.
              perform dl100_fuellen.   " Pfleg. Kreditlimit
            when others.
              perform d0101_fuellen.   " Änd. Debitor
          endcase.
        when 'S'.
          perform d0500_fuellen.       " Änd. Debitor Sperre
        when 'L'.
          perform d0500_fuellen.       " Änd. Debitor Lövm.
      endcase.
  endcase.

*------- Datenbilder bearbeiten ----------------------------------------
  clear: kna1_zuda, knvv_zuda.
  loop at dyntab.
    tabix = sy-tabix.
    if dyntab-xlist = space.
      perform dynpro_fuellen using dyntab-dynnr.
      if dyntab-dynnr = '0125'.
        perform d0125_branchencodes.
      endif.

*------- neu zu 2.1B: Zusatzdaten übergeben (nur einmal) ---------------
      if  dyntab-dtype = 'A'
      and kna1_zuda    = space.
        perform kna1_zusatzdaten.
      endif.
      if  dyntab-dtype = 'V'
      and knvv_zuda    = space.
        perform knvv_zusatzdaten.
      endif.
* begin of j_1a
* Zusatzdaten Steuerkategorien aufrufen
      if fl_check     = space and
         dyntab-dynnr = '0120'.
        describe table xbknat lines sy-tfill.
        if sy-tfill > 0.
          perform d0600_verarbeitung.
        endif.
      endif.
* end of j_1a
* Popup m. den BuKr-abhg. abw. Regulierer aus Dynpro 0215 aufrufen
      if dyntab-dynnr = '0215'.
        describe table xbknzab lines refe1.
        if refe1 > 0.
          perform knza_verarbeitung.
        endif.
      endif.
    else.
      case dyntab-dynnr.
        when '0130'.
          perform d0130_verarbeitung.
        when '1350'.
          perform d1350_verarbeitung.
        when '0324'.
          perform d0324_verarbeitung.
        when '0326'.
          perform d0326_verarbeitung.
        when '0340'.
          perform d0340_verarbeitung.
        when '0370'.
          perform d0370_verarbeitung.
        when '0360'.
          perform d0360_verarbeitung.
        when '0610'.                   "erweiterte Quellensteuer
          if t001-wt_newwt = 'X'.      "Quellensteuer aktiv
            perform d0610_verarbeitung.
          endif.
      endcase.
    endif.

* begin P30K113875
*------- Sind Sperrdaten oder Löschvormerkungen zu übertragen ? --------
*   if  tabix       eq  1            "P30K113875
*   and xt020-funcl ne 'S'           "P30K113875
    if xt020-funcl ne 'S'                                   "P30K113875
    and xt020-funcl ne 'L'
    and xt020-dyncl ne 'C'.
* end P30K113875
      perform funktion_sperrdaten.
      perform funktion_loeschvormerkungen.
    endif.

*------- Sichern auf letztem Bild und Daten an QUEUE abeben ------------
    if tabix = dyn_count.
*     ADD_ON-Aenderungen - B
      if  ( bkn00-tcode = 'XD01' or bkn00-tcode = 'XD02' )
      and fl_check is initial
      and not g_inst_d-add_data_bi is initial.              " \TP 563352
        call method g_inst_d-add_data_bi->fill_ft_table_using_data_rows
          exporting
            it_data_rows = gt_wa
            i_bkn00      = bkn00
            i_nodata     = bgr00-nodata
          changing
            et_ft        = ft[].
      endif.
*     ADD_ON-Aenderungen - E
      perform okcode_f11.
      perform transaktion_senden.
      clear satz2_count.
    endif.
  endloop.
endform.                    "DATEN_UEBERTRAGUNG

*eject
*-----------------------------------------------------------------------
*        Form  DUMP_WA
*-----------------------------------------------------------------------
*        Im Abbruchfall soll der fehlerhafte Satz ausgedumpt werden.
*-----------------------------------------------------------------------
form dump_wa using table.
  call function 'NAMETAB_GET'
    exporting
      langu          = sy-langu
      tabname        = table
    tables
      nametab        = nametab
    exceptions
      no_texts_found = 1.
  loop at nametab.
    clear char.
    char(30)    = nametab-tabname.
    char+30(1)  = '-'.
    char+31     = nametab-fieldname.
    condense char no-gaps.
    assign (char) to <f1>.
    wert = <f1>.
    perform log_msg using c_msgid 'I' '014'
     char wert space space .
  endloop.
endform.                    "DUMP_WA

*eject
*-----------------------------------------------------------------------
*        Form  DUMP_BKN00
*-----------------------------------------------------------------------
*        BKN00 ausdumpen.
*-----------------------------------------------------------------------
form dump_bkn00.
  describe table nametab_bkn00 lines sy-tfill.
  if sy-tfill = 0.
    call function 'NAMETAB_GET'
      exporting
        langu          = sy-langu
        tabname        = 'BKN00'
      tables
        nametab        = nametab_bkn00
      exceptions
        no_texts_found = 1.
  endif.

  perform log_msg using c_msgid 'I' '016'
   space space space space .
  loop at nametab_bkn00.
    clear char.
    char(5)    = nametab_bkn00-tabname.
    char+5(1)  = '-'.
    char+6(30) = nametab_bkn00-fieldname.
    assign (char) to <f1>.
    wert = <f1>.
    perform log_msg using c_msgid 'I' '014'
     char wert space space .
  endloop.
endform.                                                    "DUMP_BKN00

*begin of j_1a
*eject
*-----------------------------------------------------------------------
*        Form  DUMP_BKNAT
*-----------------------------------------------------------------------
*        BLFAT ausgeben.
*-----------------------------------------------------------------------
form dump_bknat.
  describe table nametab_bknat lines sy-tfill.
  if sy-tfill = 0.
    call function 'NAMETAB_GET'
      exporting
        langu          = sy-langu
        tabname        = 'BKNAT'
      tables
        nametab        = nametab_bknat
      exceptions
        no_texts_found = 1.
  endif.

  perform log_msg using c_msgid 'I' '017'
   space space space space .
  loop at nametab_bknat.
    clear char.
    char(1)    = 'X'.
    char+1(5)  = nametab_bknat-tabname.
    char+6(1)  = '-'.
    char+7(30) = nametab_bknat-fieldname.
    assign (char) to <f1>.
    shift char.
    wert = <f1>.
    perform log_msg using c_msgid 'I' '014'
     char wert space space .
  endloop.
endform.                    "DUMP_BKNAT
*end of j_1a

*eject
*-----------------------------------------------------------------------
*        Form  DUMP_BKNBK
*-----------------------------------------------------------------------
*        BKNBK ausgeben.
*-----------------------------------------------------------------------
form dump_bknbk.
  describe table nametab_bknbk lines sy-tfill.
  if sy-tfill = 0.
    call function 'NAMETAB_GET'
      exporting
        langu          = sy-langu
        tabname        = 'BKNBK'
      tables
        nametab        = nametab_bknbk
      exceptions
        no_texts_found = 1.
  endif.

  perform log_msg using c_msgid 'I' '017'
   space space space space .
  loop at nametab_bknbk.
    clear char.
    char(1)    = 'X'.
    char+1(5)  = nametab_bknbk-tabname.
    char+6(1)  = '-'.
    char+7(30) = nametab_bknbk-fieldname.
    assign (char) to <f1>.
    shift char.
    wert = <f1>.
    perform log_msg using c_msgid 'I' '014'
     char wert space space .
  endloop.
endform.                    "DUMP_BKNBK



* \TP 957820 - Begin
*-----------------------------------------------------------------------
*        Form  DUMP_BKNBK_IBAN
*-----------------------------------------------------------------------
*        BKNBK_IBAN ausgeben.
*-----------------------------------------------------------------------
form dump_bknbk_iban.
  describe table nametab_bknbk_iban lines sy-tfill.
  if sy-tfill = 0.
    call function 'NAMETAB_GET'
      exporting langu   = sy-langu
                tabname = 'BKNBK_IBAN'
      tables nametab = nametab_bknbk_iban
      exceptions no_texts_found = 1.
  endif. " sy-tfill = 0

  perform log_msg using c_msgid 'I' '017'
                        '' '' '' ''.
  loop at nametab_bknbk_iban.
    clear char.
    concatenate 'X' nametab_bknbk_iban-tabname
                '-' nametab_bknbk_iban-fieldname into char.
    assign (char) to <f1>.
    wert = <f1>.
    shift char.
    perform log_msg using c_msgid 'I' '014'
                          char wert '' ''.
  endloop. " at nametab_bknbk_iban
endform. " dump_bknbk_iban
* \TP 957820 - End



*&---------------------------------------------------------------------*
*&      Form  DUMP_BKNBW
*&---------------------------------------------------------------------*
*   BKNBW ausgeben
*----------------------------------------------------------------------*
form dump_bknbw.
  describe table nametab_bknbw lines sy-tfill.
  if sy-tfill = 0.
    call function 'NAMETAB_GET'
      exporting
        langu          = sy-langu
        tabname        = 'BKNBW'
      tables
        nametab        = nametab_bknbw
      exceptions
        no_texts_found = 1.
  endif.

  perform log_msg using c_msgid 'I' '017'
   space space space space .
  loop at nametab_bknbw.
    clear char.
    char(1)    = 'X'.
    char+1(5)  = nametab_bknbw-tabname.
    char+6(1)  = '-'.
    char+7(30) = nametab_bknbw-fieldname.
    assign (char) to <f1>.
    shift char.
    wert = <f1>.
    perform log_msg using c_msgid 'I' '014'
     char wert space space .
  endloop.

endform.                               " DUMP_BKNBW

*eject
*-----------------------------------------------------------------------
*        Form  DUMP_BKNEX
*-----------------------------------------------------------------------
*        BKNEX ausgeben.
*-----------------------------------------------------------------------
form dump_bknex.
  describe table nametab_bknex lines sy-tfill.
  if sy-tfill = 0.
    call function 'NAMETAB_GET'
      exporting
        langu          = sy-langu
        tabname        = 'BKNEX'
      tables
        nametab        = nametab_bknex
      exceptions
        no_texts_found = 1.
  endif.

  perform log_msg using c_msgid 'I' '017'
   space space space space .
  loop at nametab_bknex.
    clear char.
    char(1)    = 'X'.
    char+1(5)  = nametab_bknex-tabname.
    char+6(1)  = '-'.
    char+7(30) = nametab_bknex-fieldname.
    assign (char) to <f1>.
    shift char.
    wert = <f1>.
    perform log_msg using c_msgid 'I' '014'
     char wert space space .
  endloop.
endform.                    "DUMP_BKNEX

*eject
*-----------------------------------------------------------------------
*        Form  DUMP_BKNVA
*-----------------------------------------------------------------------
*        BKNVA ausgeben.
*-----------------------------------------------------------------------
form dump_bknva.
  describe table nametab_bknva lines sy-tfill.
  if sy-tfill = 0.
    call function 'NAMETAB_GET'
      exporting
        langu          = sy-langu
        tabname        = 'BKNVA'
      tables
        nametab        = nametab_bknva
      exceptions
        no_texts_found = 1.
  endif.

  perform log_msg using c_msgid 'I' '017'
   space space space space .
  loop at nametab_bknva.
    clear char.
    char(1)    = 'X'.
    char+1(5)  = nametab_bknva-tabname.
    char+6(1)  = '-'.
    char+7(30) = nametab_bknva-fieldname.
    assign (char) to <f1>.
    shift char.
    wert = <f1>.
    perform log_msg using c_msgid 'I' '014'
     char wert space space .
  endloop.
endform.                    "DUMP_BKNVA

*eject
*-----------------------------------------------------------------------
*        Form  DUMP_BKNVD
*-----------------------------------------------------------------------
*        BKNVD ausgeben.
*-----------------------------------------------------------------------
form dump_bknvd.
  describe table nametab_bknvd lines sy-tfill.
  if sy-tfill = 0.
    call function 'NAMETAB_GET'
      exporting
        langu          = sy-langu
        tabname        = 'BKNVD'
      tables
        nametab        = nametab_bknvd
      exceptions
        no_texts_found = 1.
  endif.

  perform log_msg using c_msgid 'I' '017'
   space space space space .
  loop at nametab_bknvd.
    clear char.
    char(1)    = 'X'.
    char+1(5)  = nametab_bknvd-tabname.
    char+6(1)  = '-'.
    char+7(30) = nametab_bknvd-fieldname.
    assign (char) to <f1>.
    shift char.
    wert = <f1>.
    perform log_msg using c_msgid 'I' '014'
     char wert space space .
  endloop.
endform.                    "DUMP_BKNVD

*eject
*-----------------------------------------------------------------------
*        Form  DUMP_BKNVI
*-----------------------------------------------------------------------
*        BKNVI ausgeben.
*-----------------------------------------------------------------------
form dump_bknvi.
  describe table nametab_bknvi lines sy-tfill.
  if sy-tfill = 0.
    call function 'NAMETAB_GET'
      exporting
        langu          = sy-langu
        tabname        = 'BKNVI'
      tables
        nametab        = nametab_bknvi
      exceptions
        no_texts_found = 1.
  endif.

  perform log_msg using c_msgid 'I' '017'
   space space space space .
  loop at nametab_bknvi.
    clear char.
    char(1)    = 'X'.
    char+1(5)  = nametab_bknvi-tabname.
    char+6(1)  = '-'.
    char+7(30) = nametab_bknvi-fieldname.
    assign (char) to <f1>.
    shift char.
    wert = <f1>.
    perform log_msg using c_msgid 'I' '014'
     char wert space space .
  endloop.
endform.                    "DUMP_BKNVI

*eject
*-----------------------------------------------------------------------
*        Form  DUMP_BKNVK
*-----------------------------------------------------------------------
*        BKNVK ausgeben.
*-----------------------------------------------------------------------
form dump_bknvk.
  describe table nametab_bknvk lines sy-tfill.
  if sy-tfill = 0.
    call function 'NAMETAB_GET'
      exporting
        langu          = sy-langu
        tabname        = 'BKNVK'
      tables
        nametab        = nametab_bknvk
      exceptions
        no_texts_found = 1.
  endif.

  perform log_msg using c_msgid 'I' '017'
   space space space space .
  loop at nametab_bknvk.
    clear char.
    char(1)    = 'X'.
    char+1(5)  = nametab_bknvk-tabname.
    char+6(1)  = '-'.
    char+7(30) = nametab_bknvk-fieldname.
    assign (char) to <f1>.
    shift char.
    wert = <f1>.
    perform log_msg using c_msgid 'I' '014'
     char wert space space .
  endloop.
endform.                    "DUMP_BKNVK

*eject
*-----------------------------------------------------------------------
*        Form  DUMP_BKNVL
*-----------------------------------------------------------------------
*        BKNVL ausgeben.
*-----------------------------------------------------------------------
form dump_bknvl.
  describe table nametab_bknvl lines sy-tfill.
  if sy-tfill = 0.
    call function 'NAMETAB_GET'
      exporting
        langu          = sy-langu
        tabname        = 'BKNVL'
      tables
        nametab        = nametab_bknvl
      exceptions
        no_texts_found = 1.
  endif.

  perform log_msg using c_msgid 'I' '017'
   space space space space .
  loop at nametab_bknvl.
    clear char.
    char(1)    = 'X'.
    char+1(5)  = nametab_bknvl-tabname.
    char+6(1)  = '-'.
    char+7(30) = nametab_bknvl-fieldname.
    assign (char) to <f1>.
    shift char.
    wert = <f1>.
    perform log_msg using c_msgid 'I' '014'
     char wert space space .
  endloop.
endform.                    "DUMP_BKNVL

*eject
*-----------------------------------------------------------------------
*        Form  DUMP_BKNVP
*-----------------------------------------------------------------------
*        BKNVP ausgeben.
*-----------------------------------------------------------------------
form dump_bknvp.
  describe table nametab_bknvp lines sy-tfill.
  if sy-tfill = 0.
    call function 'NAMETAB_GET'
      exporting
        langu          = sy-langu
        tabname        = 'BKNVP'
      tables
        nametab        = nametab_bknvp
      exceptions
        no_texts_found = 1.
  endif.

  perform log_msg using c_msgid 'I' '017'
   space space space space .
  loop at nametab_bknvp.
    clear char.
    char(1)    = 'X'.
    char+1(5)  = nametab_bknvp-tabname.
    char+6(1)  = '-'.
    char+7(30) = nametab_bknvp-fieldname.
    assign (char) to <f1>.
    shift char.
    wert = <f1>.
    perform log_msg using c_msgid 'I' '014'
     char wert space space .
  endloop.
endform.                    "DUMP_BKNVP

*eject
*-----------------------------------------------------------------------
*        Form  DUMP_BKNZA
*-----------------------------------------------------------------------
*        BKNZA ausgeben.
*-----------------------------------------------------------------------
form dump_bknza.
  describe table nametab_bknza lines sy-tfill.
  if sy-tfill = 0.
    call function 'NAMETAB_GET'
      exporting
        langu          = sy-langu
        tabname        = 'BKNZA'
      tables
        nametab        = nametab_bknza
      exceptions
        no_texts_found = 1.
  endif.

  perform log_msg using c_msgid 'I' '017'
   space space space space .
  loop at nametab_bknza.
    clear char.
    char(1)    = 'X'.
    char+1(5)  = nametab_bknza-tabname.
    char+6(1)  = '-'.
    char+7(30) = nametab_bknza-fieldname.
    assign (char) to <f1>.
    shift char.
    wert = <f1>.
    perform log_msg using c_msgid 'I' '014'
     char wert space space .
  endloop.
endform.                    "DUMP_BKNZA

*mi/46a begin
*-----------------------------------------------------------------------
*        Form  DUMP_BWRF12
*-----------------------------------------------------------------------
*        BWRF12 ausgeben.
*-----------------------------------------------------------------------
form dump_bwrf12.
  describe table nametab_bwrf12 lines sy-tfill.
  if sy-tfill = 0.
    call function 'NAMETAB_GET'
      exporting
        langu          = sy-langu
        tabname        = 'BWRF12'
      tables
        nametab        = nametab_bwrf12
      exceptions
        no_texts_found = 1.
  endif.

  perform log_msg using c_msgid 'I' '017'
   space space space space .
  loop at nametab_bwrf12.
    clear char.
    char(1)    = 'X'.
    char+1(5)  = nametab_bwrf12-tabname.
    char+6(1)  = '-'.
    char+7(30) = nametab_bwrf12-fieldname.
    assign (char) to <f1>.
    shift char.
    wert = <f1>.
    perform log_msg using c_msgid 'I' '014'
     char wert space space .
  endloop.
endform.                    "DUMP_BWRF12

*-----------------------------------------------------------------------
*        Form  DUMP_BWRF4
*-----------------------------------------------------------------------
*        BWRF4 ausgeben.
*-----------------------------------------------------------------------
form dump_bwrf4.
  describe table nametab_bwrf4 lines sy-tfill.
  if sy-tfill = 0.
    call function 'NAMETAB_GET'
      exporting
        langu          = sy-langu
        tabname        = 'BWRF4'
      tables
        nametab        = nametab_bwrf4
      exceptions
        no_texts_found = 1.
  endif.

  perform log_msg using c_msgid 'I' '017'
   space space space space .
  loop at nametab_bwrf4.
    clear char.
    char(1)    = 'X'.
    char+1(5)  = nametab_bwrf4-tabname.
    char+6(1)  = '-'.
    char+7(30) = nametab_bwrf4-fieldname.
    assign (char) to <f1>.
    shift char.
    wert = <f1>.
    perform log_msg using c_msgid 'I' '014'
     char wert space space .
  endloop.
endform.                                                    "DUMP_BWRF4
*mi/46a end

*eject
*-----------------------------------------------------------------------
*        Form  D0100_FUELLEN
*-----------------------------------------------------------------------
*        Batchinput-Daten für Anlegen-Einstiegsbild übertragen
*        Wegen SPA/GPA-Parametern, müssen auf dem Einstiegsbild die
*        Felder mit Space übergeben werden, falls sie nicht
*        explizit gefüllt wurden.
*-----------------------------------------------------------------------
form d0100_fuellen.
  check fl_check = space.

  perform dynpro_begin using rep_name_d '0100'.
  perform key_felder_fuellen.

*------- Ansprechpartner für Konsument angeben -------------------------
* MS Hinweis 446677 begin
  if  gv_consumer_account_group is initial
  and gv_consumer_not_exist is initial.
    select single ktokd from t077d
           into gv_consumer_account_group
           where dear6 = 'X'.
    if sy-subrc <> 0.
      gv_consumer_not_exist = 'X'.
    endif.
  endif.
  if  ( not gv_consumer_account_group is initial
        and BKN00-KTOKD = gv_consumer_account_group )
  OR  KNA1-DEAR6 = 'X'.
* MS Hinweis 446677 end
    if xbknvk-parnr(1)                    ne nodata.
      clear ft.
      ft-fnam = 'KNVK-PARNR'.
      ft-fval = xbknvk-parnr.
      append ft.
    endif.
  endif.

*------- Keys des Vorlagestammsatzes clearen ---------------------------
  clear ft.
  ft-fnam = 'RF02D-REF_KUNNR'.
  ft-fval = space.
  append ft.
  clear ft.
  ft-fnam = 'RF02D-REF_BUKRS'.
  ft-fval = space.
  append ft.
  clear ft.
  ft-fnam = 'RF02D-REF_VKORG'.
  ft-fval = space.
  append ft.
  clear ft.
  ft-fnam = 'RF02D-REF_VTWEG'.
  ft-fval = space.
  append ft.
  clear ft.
  ft-fnam = 'RF02D-REF_SPART'.
  ft-fval = space.
  append ft.

  clear ft.
  ft-fnam = 'RF02D-KTOKD'.
  if bkn00-ktokd(1) ne nodata.
    ft-fval =  bkn00-ktokd.
  else.
    ft-fval =  space.
  endif.
  append ft.

*ZAV: Pflege des Flags 'ZAV verwenden'.
  perform zav_verwendungsflag_setzen.

endform.                    "D0100_FUELLEN

*eject
*-----------------------------------------------------------------------
*        Form  D0101_FUELLEN
*-----------------------------------------------------------------------
*        Batchinput-Daten für Ändern-Einstiegsbild übertragen 0101
*-----------------------------------------------------------------------
form d0101_fuellen.
  check fl_check = space.

  perform dynpro_begin using rep_name_d '0101'.
  perform key_felder_fuellen.

*------- zu bearbeitende Bilder auf Einstiegsbild ankreuzen ------------
*$*$ IBU A&D/E&C  project CEM                             " \IS2ERP DIMP
* loop at dyntab where dynnr ne '1350'.                  " \IS2ERP DIMP
  loop at dyntab where dynnr ne '1350'                   " \IS2ERP DIMP
                  and   dynnr ne '0900'                  " \IS2ERP DIMP
                  and   dynnr ne '0910'.                 " \IS2ERP DIMP
    clear ft.
    ft-fnam(7)   = 'RF02D-D'.
    ft-fnam+7(4) =  dyntab-dynnr.
    ft-fval      = 'X'.
* ZAV: es wird zwar mit Dynpro 0111 gearbeitet; Feld auf Einstiegsbild
*      heißt aber RF02D-D0110
    if not zav_flag is initial.
      if dyntab-dynnr = '0111' or dyntab-dynnr = '0112'.
        ft-fnam+7(4) =  '0110'.
      endif.
    endif.
* ZAV Ende
    append ft.
  endloop.
*ZAV: Pflege des Flags 'ZAV verwenden'.
  perform zav_verwendungsflag_setzen.

endform.                    "D0101_FUELLEN

*eject
*-----------------------------------------------------------------------
*        Form  D0500_FUELLEN
*-----------------------------------------------------------------------
*        Batchinput-Daten für Sperren/Loevm-Einstiegsbild übertragen
*-----------------------------------------------------------------------
form d0500_fuellen.
  check fl_check = space.

  perform dynpro_begin using rep_name_d '0500'.
  perform key_felder_fuellen.
endform.                    "D0500_FUELLEN

*begin of j_1a
*eject
*-----------------------------------------------------------------------
*        Form  D0600_FUELLEN
*-----------------------------------------------------------------------
*        Batchinput-Daten für Steuerkategorien übertragen
*-----------------------------------------------------------------------
form d0600_fuellen.
  check fl_check = space.

  perform dynpro_begin using rep_name_d '0600'.

  if xbknat-taxgr(1) ne nodata.
    clear ft.
    ft-fnam = 'KNAT-TAXGR                    '.
    ft-fnam+30(4) =  '(01)'.
    condense ft-fnam no-gaps.
    ft-fval = xbknat-taxgr.
    append ft.
  endif.
  if xbknat-sbjdf(1) ne nodata.
    clear ft.
    ft-fnam = 'KNAT-SBJDF                    '.
    ft-fnam+30(4) =  '(01)'.
    condense ft-fnam no-gaps.
    ft-fval = xbknat-sbjdf.
    append ft.
  endif.
  if xbknat-sbjdt(1) ne nodata.
    clear ft.
    ft-fnam = 'KNAT-SBJDT                    '.
    ft-fnam+30(4) =  '(01)'.
    condense ft-fnam no-gaps.
    ft-fval = xbknat-sbjdt.
    append ft.
  endif.
  if xbknat-exnr(1) ne nodata.
    clear ft.
    ft-fnam = 'KNAT-EXNR                     '.
    ft-fnam+30(4) =  '(01)'.
    condense ft-fnam no-gaps.
    ft-fval = xbknat-exnr.
    append ft.
  endif.
  if xbknat-exrt(1) ne nodata.
    clear ft.
    ft-fnam = 'KNAT-EXRT                     '.
    ft-fnam+30(4) =  '(01)'.
    condense ft-fnam no-gaps.
    ft-fval = xbknat-exrt.
    append ft.
  endif.
  if xbknat-exdf(1) ne nodata.
    clear ft.
    ft-fnam = 'KNAT-EXDF                     '.
    ft-fnam+30(4) =  '(01)'.
    condense ft-fnam no-gaps.
    ft-fval = xbknat-exdf.
    append ft.
  endif.
  if xbknat-exdt(1) ne nodata.
    clear ft.
    ft-fnam = 'KNAT-EXDT                     '.
    ft-fnam+30(4) =  '(01)'.
    condense ft-fnam no-gaps.
    ft-fval = xbknat-exdt.
    append ft.
  endif.
endform.                    "D0600_FUELLEN
*end of j_1a

*eject
*-----------------------------------------------------------------------
*        Form  DL100_FUELLEN
*-----------------------------------------------------------------------
*        Kreditlimit FD32 Einstiegsbild
*-----------------------------------------------------------------------
form dl100_fuellen.
  check fl_check = space.

  perform dynpro_begin using rep_name_l '0100'.

  clear ft.
  ft-fnam = 'RF02L-KUNNR'.
  if bkn00-kunnr(1) ne nodata.
    ft-fval = bkn00-kunnr.
  else.
    ft-fval = space.
  endif.
  append ft.

  clear ft.
  ft-fnam = 'RF02L-KKBER'.
  if bkn00-kkber(1) ne nodata.
    ft-fval = bkn00-kkber.
  else.
    ft-fval = space.
  endif.
  append ft.

*------- zu bearbeitende Bilder auf Einstiegsbild ankreuzen ------------
  loop at dyntab.
    clear ft.
    ft-fnam(8)   = 'RF02L-D0'.
    ft-fnam+8(3) =  dyntab-dynnr+1(3).
    ft-fval      = 'X'.
    append ft.
  endloop.
endform.                    "DL100_FUELLEN

*eject
*-----------------------------------------------------------------------
*        Form  D0125_BRANCHENCODES
*-----------------------------------------------------------------------
*        Branchencodes 2-5 übertragen (D0125)
*-----------------------------------------------------------------------
form d0125_branchencodes.

*------- Wurden Branchencodes 2-5 übergeben ? -------------------------
  check bkna1-bran2(1) ne nodata
  or    bkna1-bran3(1) ne nodata
  or    bkna1-bran4(1) ne nodata
  or    bkna1-bran5(1) ne nodata.

*------- Branchencodes übertragen -------------------------------------
  perform okcode_f16.
  perform dynpro_fuellen using '1250'.
* perform okcode_f03.                      "S11K144454/3.0
  perform dynpro_begin using rep_name_d dyntab-dynnr.
endform.                    "D0125_BRANCHENCODES

*eject
*-----------------------------------------------------------------------
*        Form  D2130_FUELLEN
*-----------------------------------------------------------------------
*        Aufsetzfelder für Bankverbindungen
*-----------------------------------------------------------------------
form d2130_fuellen.
  check fl_check = space.

  perform dynpro_begin using rep_name_d '2130'.
  if xbknbk-banks(1) ne nodata.
    clear ft.
    ft-fnam = 'KNBK-BANKS'.
    ft-fval = xbknbk-banks.
    append ft.
  endif.
  if xbknbk-bankl(1) ne nodata.
    clear ft.
    ft-fnam = 'KNBK-BANKL'.
    ft-fval = xbknbk-bankl.
    append ft.
  endif.
  if xbknbk-bankn(1) ne nodata.
    clear ft.
    ft-fnam = 'KNBK-BANKN'.
    ft-fval = xbknbk-bankn.
    append ft.
  endif.
endform.                    "D2130_FUELLEN

*begin of j_1a
*eject
*-----------------------------------------------------------------------
*        Form  D2600_FUELLEN
*-----------------------------------------------------------------------
*        Aufsetzfelder für Steuerkategorien
*-----------------------------------------------------------------------
form d2600_fuellen.
  check fl_check = space.

  perform dynpro_begin using rep_name_d '2600'.
  if xbknat-taxgr(1) ne nodata.
    clear ft.
    ft-fnam = 'KNAT-TAXGR'.
    ft-fval = xbknat-taxgr.
    append ft.
  endif.
endform.                    "D2600_FUELLEN
*end of j_1a

*eject
*-----------------------------------------------------------------------
*       Form D0130_VERARBEITUNG
*-----------------------------------------------------------------------
*       Bei Listen wird jede Zeile einzeln gesendet.
*-----------------------------------------------------------------------
form d0130_verarbeitung.

* \BE Note 527139 - B
 DATA: LV_SONDER_BVTYP(1) TYPE C  VALUE SPACE.
 DATA: BEGIN OF LT_BKNBK OCCURS 0.
          INCLUDE STRUCTURE BKNBK.
 DATA: END OF LT_BKNBK.
 DATA: BEGIN OF LT_KNBK OCCURS 0.
         INCLUDE STRUCTURE KNBK.
 DATA: END OF LT_KNBK.
* \BE Note 527139 - E

  data: l_subrc                  type sysubrc,              " \TP 957820
        l_iban_wo_accno_aktyp(1) type c,                    " \TP 957820
        l_count                  type i.                    " \TP 957820
  data: ls_bnka                  type bnka.                " \TP 1031863
  data: l_i                      type integer.              "1754448

  clear xdytr.
  perform d0130_fuellen_einzelfelder.

* \TP 957820 - Begin
  if xt020-aktyp = 'H'.
*   Beim Anlegen gibt es keine Bankverbindungen zum Loeschen
    delete xbknbk      where xdele = 'X'.
    delete xbknbk_iban where xdele = 'X'.
  endif. " xt020-aktyp = 'H'
* \TP 957820 - End

* \BE Note 527139 - B
  IF XT020-AKTYP = 'V'.      "nur bei Änderungen notwendig
* \TP 957820 - Begin
    select * from knbk into table lt_knbk where kunnr = kunnr.
    sort lt_knbk by banks bankl bankn.
    loop at xbknbk_iban.
      clear: xbknbk,
             l_subrc,
             l_iban_wo_accno_aktyp.
      move-corresponding xbknbk_iban to xbknbk.
      xbknbk-iban(1) = nodata.         " 1686666
      xbknbk-valid_from(1) = nodata.   " 1686666
      xbknbk-tbnam = 'BKNBK'.
      xbknbk-dummy = nodata.
      xbknbk-bkont = nodata.
      call function 'FI_TECH_ACCNO_READ_TRY'
        exporting i_banks = xbknbk_iban-banks
                  i_bankl = xbknbk_iban-bankl
                  i_iban  = xbknbk_iban-iban
        importing e_tech_accno = xbknbk-bankn
        exceptions not_found = 1
                   others    = 2.
      if sy-subrc = 2.
*       Unerwartete Situation  ==>  Muss analysiert werden
        if xale = space.
          perform log_msg using c_msgid 'E' '629' trans_count '' '' ''.
          perform dump_bkn00.
          perform dump_bknbk_iban.
          perform log_abort using c_msgid '013'.
        else. " i.e. xale = 'X'
          message e629 with bkn00-tcode raising internal_error.
        endif. " xale = space
      endif. " sy-subrc = 2
      l_subrc = sy-subrc.
      if xbknbk_iban-xdele = 'X'.
*       Delete
        case l_subrc.
          when 0.
            l_iban_wo_accno_aktyp = 'D'.   " Delete
          when 1.
*           Zu loeschende Bankverbindung existiert nicht  ==>  Gibt eine
*           I-Meldung aus und ignoriert die Daten
            if xale = space.
              perform log_msg using c_msgid 'I' '628'
                trans_count 'BKNBK_IBAN' xbknbk_iban-iban ''.
            else. " i.e. xale = 'X'
              message i628
                with bkn00-tcode 'BKNBK_IBAN' xbknbk_iban-iban
                raising no_bknbk_bec_erase.
            endif. " xale = space
            delete xbknbk_iban.
            continue. " loop at xbknbk_iban
        endcase. " l_subrc
      else. " i.e. xbknbk_iban-xdele <> 'X'
*       Insert or Update
        case l_subrc.
          when 0.
*           Bekannte IBAN
            read table lt_knbk with key banks = xbknbk-banks
                                        bankl = xbknbk-bankl
                                        bankn = xbknbk-bankn
                               binary search.
            case sy-subrc.
              when 0.      l_iban_wo_accno_aktyp = 'U'.   " Update
              when others. l_iban_wo_accno_aktyp = 'I'.   " Insert
            endcase. " sy-subrc
          when 1.
*           Neue IBAN
            l_iban_wo_accno_aktyp = 'I'.                  " Insert
        endcase. " l_subrc
      endif. " xbknbk_iban-xdele = 'X'
*     Zum Loeschen und Aendern einer IBAN ohne Kontonummer kann gaenz-
*     lich auf die vorhandene Funktionalitaet / Logik zurueckgegriffen
*     werden  ==>  Verschiebt XBLFBK_IBAN in XBLFBK
      if l_iban_wo_accno_aktyp ca 'DU'.
        append xbknbk.
        delete xbknbk_iban.
      endif. " l_iban_wo_accno_aktyp ca 'DU'
    endloop. " at xbknbk_iban
* \TP 957820 - End

    LOOP AT XBKNBK.
      IF ( NOT XBKNBK-BVTYP IS INITIAL AND XBKNBK-BVTYP(1) NE NODATA )
         AND ( XBKNBK-XDELE IS INITIAL OR  XBKNBK-XDELE(1) EQ NODATA ).
        LV_SONDER_BVTYP = 'X'.
        EXIT.
      ENDIF.
    ENDLOOP.
    IF LV_SONDER_BVTYP = 'X'.
       CLEAR LV_SONDER_BVTYP.
       LOOP AT XBKNBK WHERE XDELE NE 'X'.
         READ TABLE LT_KNBK WITH KEY
               BANKS = XBKNBK-BANKS
               BANKL = XBKNBK-BANKL
               BANKN = XBKNBK-BANKN
               BINARY SEARCH.
* n_1805686
*        NEWLOGIC needed only if there is at least
*        one BVTYP value filled in DB
*        that will be actually changed to another filled value
*        (ex: 'AA' -> 'BB')
         IF SY-SUBRC = 0 AND LT_KNBK-BVTYP NE SPACE
          AND XBKNBK-BVTYP(1) NE NODATA
          AND LT_KNBK-BVTYP <> XBKNBK-BVTYP AND XBKNBK-BVTYP NE SPACE.
           LV_SONDER_BVTYP = 'X'.
           EXIT.
         ENDIF.
       ENDLOOP.
    ENDIF.
    IF LV_SONDER_BVTYP = 'X'.
      LT_BKNBK[] = XBKNBK[].
      LOOP AT XBKNBK.
* n_1805686
*       suppress useless or wrong additional BVTYP clear
*       during BI screen processing
*       (ex: 'AA' -> '/' = should not clear BVTYP - 'AA' -> ' '
*        = do not clear BVTYP twice)
        IF XBKNBK-BVTYP IS INITIAL OR XBKNBK-BVTYP(1) EQ NODATA
         OR XBKNBK-XDELE = 'X'.
          DELETE XBKNBK.
        ELSE.
          CLEAR XBKNBK-BVTYP.
          MODIFY XBKNBK.
        ENDIF.
      ENDLOOP.
      APPEND LINES OF LT_BKNBK TO XBKNBK.
    ENDIF.
* zuerst die Löschungen dann die leeren Banktypen
    SORT XBKNBK STABLE BY XDELE DESCENDING BVTYP ASCENDING.
  ENDIF.
* \BE Note 527139 - E
* note 1754448: make sure that okcode POSZ is transported
* independently of the bank data. Otherwise the formal check
* of the bank data will not be done when the BI session
* is processed.
  l_i = 1.                                                 "1754448
  loop at xbknbk.
    if l_i ne 1 and xdytr ne 'X'.                          "1770717
      perform dynpro_begin using rep_name_d dyntab-dynnr.  "1754448
    endif.                                                 "1754448
    l_i = l_i + 1.                                         "1754448
    perform okcode_posz.
    clear xdytr.
    perform d2130_fuellen.
    perform dynpro_fuellen using dyntab-dynnr.
    perform cursor_setzen_0130.
    if xbknbk-xdele = 'X'.
      perform okcode_f14.
      perform dynpro_begin using rep_name_d dyntab-dynnr.
      xdytr = 'X'.
    endif.
    perform bnka_bearbeiten.
* begin of note 1686666
* IBAN mit Kontonummer: Dynproreihenfolge
    IF XBKNBK-IBAN(1) ne NODATA and XBKNBK-XDELE ne 'X'.
      perform okcode_iban.
      perform dynpro_ibma_0100_fuellen_data using XBKNBK-IBAN
                                                  XBKNBK-VALID_FROM.
      perform dynpro_fuellen using dyntab-dynnr.
      clear XDYTR.
    ENDIF.
* end of note 1686666
  endloop.

* \TP 957820 - Begin
* Die zu loeschenden und zu aendernden IBAN ohne Kontonummer wurden be-
* reits vorher durch Verschiebung in XBKNBK abgearbeitet. Es bleiben nur
* noch die anzulegenden IBAN ohne Kontonummer uebrig.
* Zum Anlegen einer IBAN ohne Kontonummer wird die vorhandene Funktiona-
* litaet / Logik mit kleiner Abaenderung verwendet, denn der Druckknopf
* zur IBAN-Pflege muss auf einer leeren Zeile betaetigt werden.
  loop at xbknbk_iban.
    clear xdytr.

*   Daten zum Positionieren des Cursors auf eine leere Zeile und zum
*   Betaetigen des Druckknopfes fuer die IBAN-Pflege
    clear xbknbk.
    perform okcode_posz.
    perform d2130_fuellen.
    perform dynpro_begin using rep_name_d dyntab-dynnr.
    perform cursor_setzen_0130.
    perform okcode_iban.

*   Fuellt XBKNBK, um vorhandene Funktionalitaet zu nutzen
    move-corresponding xbknbk_iban to xbknbk.

*   Daten zum Prozessieren des IBAN-Konverters
    perform dynpro_ibma_0200_fuellen_data using xbknbk_iban-banks
                                                xbknbk_iban-bankl
                                                xbknbk_iban-iban
                                                xbknbk_iban-bic.

*   Neue Bankdaten BNKA?                                   " \TP 1031863
    clear ls_bnka.                                         " \TP 1031863
    perform bnka_read using xbknbk_iban-banks              " \TP 1031863
                            xbknbk_iban-bankl              " \TP 1031863
                   changing ls_bnka.                       " \TP 1031863
    if ls_bnka-banka is initial.                           " \TP 1031863
*     Bankdaten sind nicht im System  ==>  Legt sie an     " \TP 1031863
      perform dynpro_fuellen using 'B100'.                 " \TP 1031863
    endif.                                                 " \TP 1031863

    perform dynpro_ibma_0200_fuellen_enter.

*   Bei IBAN ohne Kontonummer sind die Felder BANKS, BANKL, BANKN und
*   BKONT nicht eingabebereit
    xbknbk-banks = nodata.
    xbknbk-bankl = nodata.
    xbknbk-bankn = nodata.
    xbknbk-bkont = nodata.
    perform dynpro_fuellen using dyntab-dynnr.
    perform cursor_setzen_0130.

*   Daten zum Pflegen des Bankenstammes
    if xbknbk_iban-banks <> nodata and xbknbk_iban-banks <> space.
      xbknbk-banks = xbknbk_iban-banks.
    else.
      xbknbk-banks = xbknbk_iban-iban(2).
    endif.
    xbknbk-bankl = xbknbk_iban-bankl.
    if ls_bnka-banka is initial.                           " \TP 1031863
*     Neue Bankdaten BNKA wurden schon vorher abgearbeitet " \TP 1031863
    else.                                                  " \TP 1031863
      perform bnka_bearbeiten.
    endif.                                                 " \TP 1031863
  endloop. " at xbknbk_iban
* \TP 957820 - End

*------- Letzte Zeile abschicken ---------------------------------------
  describe table xbknbk lines refe1.
  describe table xbknbk_iban lines l_count.                 " \TP 957820
  if ( refe1 <> 0 or l_count <> 0 )                         " \TP 957820
  and xdytr ne 'X'.
    perform dynpro_begin using rep_name_d dyntab-dynnr.
  endif.

  describe table xbknzaa lines refe1.
  if refe1 gt 0.
    perform knza_verarbeitung.
  endif.
endform.                    "D0130_VERARBEITUNG

*begin of j_1a
*eject
*-----------------------------------------------------------------------
*       Form D0600_VERARBEITUNG
*-----------------------------------------------------------------------
*       Bei Listen wird jede Zeile einzeln gesendet.
*-----------------------------------------------------------------------
form d0600_verarbeitung.
* setzen funktionscode für steuerkategorien
  clear ft.
  ft-fnam = 'BDC_OKCODE'.
  ft-fval = 'STKT'.
  append ft.

*dynpro verarbeiten
  perform dynpro_begin using rep_name_d '0600'.
  loop at xbknat.
    perform okcode_posz.
    perform d2600_fuellen.
    perform d0600_fuellen.
    perform cursor_setzen_0600.
    if xbknat-xdele = 'X'.
      perform okcode_f14.
      perform dynpro_begin  using rep_name_d '0600'.
    endif.
    perform knat_bearbeiten.
  endloop.

*------- Letzte Zeile abschicken ---------------------------------------
*  DESCRIBE TABLE XBKNAT LINES REFE1.
*  IF REFE1 NE 0.
*    PERFORM DYNPRO_BEGIN USING REP_NAME_D '0600'.
*  ENDIF.

* zurück zum aufrufer
  CLEAR FT.
  FT-FNAM = 'BDC_OKCODE'.
  FT-FVAL = 'ENTR'.
  append ft.
  perform dynpro_begin using rep_name_d dyntab-dynnr.
endform.                    "D0600_VERARBEITUNG
*end of j_1a

*eject
*-----------------------------------------------------------------------
*        Form  D2324_FUELLEN
*-----------------------------------------------------------------------
*        Aufsetzfelder für Partnerrollen
*-----------------------------------------------------------------------
form d2324_fuellen.
  check fl_check = space.

  perform dynpro_begin using rep_name_d '2324'.
  if xbknvp-parvw(1) ne nodata.
    clear ft.
    ft-fnam = 'KNVP-PARVW'.
    ft-fval = xbknvp-parvw.
    append ft.
  endif.
  if xbknvp-ktonr(1) ne nodata.
    clear ft.
    ft-fnam = 'RF02D-KTONR'.
    ft-fval = xbknvp-ktonr.
    append ft.
  endif.
endform.                    "D2324_FUELLEN

*eject
*-----------------------------------------------------------------------
*       Form D0324_VERARBEITUNG
*-----------------------------------------------------------------------
*       Bei Listen wird jede Zeile einzeln gesendet.
*-----------------------------------------------------------------------
form d0324_verarbeitung.
  clear xdytr.
  perform dynpro_begin using rep_name_d dyntab-dynnr.

  loop at xbknvp where xdele = 'X'.
    xbknvp-defpa = ' '.
    xbknvp-xdele = ' '.
    perform okcode_posz.
    perform d2324_fuellen.
    perform dynpro_fuellen using dyntab-dynnr.
    perform cursor_setzen_0324.
  endloop.
* Note 515103 begin
  sort XBKNVP by xdele defpa.
* Note 515103 end

  loop at xbknvp.
    clear xdytr.
    perform okcode_posz.
    perform d2324_fuellen.
    perform dynpro_fuellen using dyntab-dynnr.
    perform cursor_setzen_0324.
    if xbknvp-xdele = 'X'.
      perform okcode_f14.
      perform dynpro_begin using rep_name_d dyntab-dynnr.
      xdytr = 'X'.
    endif.
  endloop.

*------- Letzte Zeile abschicken ---------------------------------------
  describe table xbknvp lines refe1.
  if  refe1 ne  0
  and xdytr ne 'X'.
    perform dynpro_begin using rep_name_d dyntab-dynnr.
  endif.
endform.                    "D0324_VERARBEITUNG

*eject
*-----------------------------------------------------------------------
*        Form  D2326_FUELLEN
*-----------------------------------------------------------------------
*        Aufsetzfelder für Nachrichten
*-----------------------------------------------------------------------
form d2326_fuellen.
  check fl_check = space.

  perform dynpro_begin using rep_name_d '2326'.
  if xbknvd-doctp(1) ne nodata.
    clear ft.
    ft-fnam = 'KNVD-DOCTP'.
    ft-fval = xbknvd-doctp.
    append ft.
  endif.
  if xbknvd-spras(1) ne nodata.
    clear ft.
    ft-fnam = 'KNVD-SPRAS'.
    ft-fval = xbknvd-spras.
    append ft.
  endif.
endform.                    "D2326_FUELLEN

*eject
*-----------------------------------------------------------------------
*       Form D0326_VERARBEITUNG
*-----------------------------------------------------------------------
*       Bei Listen wird jede Zeile einzeln gesendet.
*-----------------------------------------------------------------------
form d0326_verarbeitung.
  clear xdytr.
  perform dynpro_begin using rep_name_d dyntab-dynnr.
  loop at xbknvd.
    clear xdytr.
    perform okcode_posz.
    perform d2326_fuellen.
    perform dynpro_fuellen using dyntab-dynnr.
    perform cursor_setzen_0326.
    if xbknvd-xdele = 'X'.
      perform okcode_f14.
      perform dynpro_begin using rep_name_d dyntab-dynnr.
      xdytr = 'X'.
    endif.
  endloop.

*------- Letzte Zeile abschicken ---------------------------------------
  describe table xbknvd lines refe1.
  if  refe1 ne  0
  and xdytr ne 'X'.
    perform dynpro_begin using rep_name_d dyntab-dynnr.
  endif.
endform.                    "D0326_VERARBEITUNG

*eject
*-----------------------------------------------------------------------
*        Form  D2340_FUELLEN
*-----------------------------------------------------------------------
*        Aufsetzfelder für Abladestellen
*-----------------------------------------------------------------------
form d2340_fuellen.
  check fl_check = space.

  perform dynpro_begin using rep_name_d '2340'.
  if xbknva-ablad(1) ne nodata.
    clear ft.
    ft-fnam = 'KNVA-ABLAD'.
    ft-fval = xbknva-ablad.
    append ft.
  endif.
  if xbknva-knfak(1) ne nodata.
    clear ft.
    ft-fnam = 'KNVA-KNFAK'.
    ft-fval = xbknva-knfak.
    append ft.
  endif.
endform.                    "D2340_FUELLEN

*mi/46a begin
*-----------------------------------------------------------------------
*        Form  D2420_FUELLEN
*-----------------------------------------------------------------------
*        Aufsetzfelder für Empfangstellen
*-----------------------------------------------------------------------
form d2420_fuellen.
  check fl_check = space.

  perform dynpro_begin using 'SAPLWR22' '2420'.
  if xbwrf12-empst(1) ne nodata.
    clear ft.
    ft-fnam = 'WRF12-EMPST'.
    ft-fval = xbwrf12-empst.
    append ft.
  endif.
endform.                    "D2420_FUELLEN

*-----------------------------------------------------------------------
*        Form  D2410_FUELLEN
*-----------------------------------------------------------------------
*        Aufsetzfelder für Abteilungen
*-----------------------------------------------------------------------
form d2410_fuellen.
  check fl_check = space.

  perform dynpro_begin using 'SAPLWR22' '2410'.
  if xbwrf4-abtnr(1) ne nodata.
    clear ft.
    ft-fnam = 'WRF4-ABTNR'.
    ft-fval = xbwrf4-abtnr.
    append ft.
  endif.
endform.                    "D2410_FUELLEN
*mi/46a end

*eject
*-----------------------------------------------------------------------
*       Form D0340_VERARBEITUNG
*-----------------------------------------------------------------------
*       Bei Listen wird jede Zeile einzeln gesendet.
*-----------------------------------------------------------------------
form d0340_verarbeitung.
  clear xdytr.
  perform dynpro_begin using rep_name_d dyntab-dynnr.
  loop at xbknva where xdele <> 'X'                         "mi/46a
                 and   defab <> 'X'.           "mi/note 205297
    clear xdytr.
    perform okcode_posz.
    perform d2340_fuellen.
    perform dynpro_fuellen using dyntab-dynnr.
    perform cursor_setzen_0340.
*mi/46a begin deletion
*    IF XBKNVA-XDELE = 'X'.
*      PERFORM OKCODE_F14.
*      PERFORM DYNPRO_BEGIN USING REP_NAME_D DYNTAB-DYNNR.
*      XDYTR = 'X'.
*    ENDIF.
*mi/46a end deletion
    perform knva_zeiten_bearbeiten.
  endloop.

*mi/46a begin deletion
*------- Letzte Zeile abschicken ---------------------------------------
*  DESCRIBE TABLE XBKNVA LINES REFE1.
*  IF  REFE1 NE  0
*  AND XDYTR NE 'X'.
*    PERFORM DYNPRO_BEGIN USING REP_NAME_D DYNTAB-DYNNR.
*  ENDIF.
*mi/46a end deletion

*mi/46a begin
  perform d0420_verarbeitung.        "Dann Empfangsstellen bearbeiten
  perform d0410_verarbeitung.        "Dann Abteilungen bearbeiten
  perform d0420_verarbeitung_xdele.  "Zuerst ggf. Abteilungen löschen
  "Als letztes Abladestellen löschen
*mi/note 205297 begin
  read table xbknva with key xdele = 'X'.
  if sy-subrc = 0.
    clear xdytr.
    loop at xbknva where xdele = 'X'.
      clear xdytr.
      perform okcode_posz.
      perform d2340_fuellen.
      perform dynpro_begin using rep_name_d dyntab-dynnr.
      perform cursor_setzen_0340.
      perform okcode_f14.
      perform dynpro_begin using rep_name_d dyntab-dynnr.
      xdytr = 'X'.
    endloop.
*mi/46a end
  endif.
  loop at xbknva where defab = 'X'.
    clear xdytr.
    perform okcode_posz.
    perform d2340_fuellen.
    perform dynpro_fuellen using dyntab-dynnr.
    perform cursor_setzen_0340.
    perform knva_zeiten_bearbeiten.
  endloop.

  check sy-subrc <> 0.
  describe table xbknva lines refe1.
  if  refe1 <>  0
  and xdytr <> 'X'.
    perform dynpro_begin using rep_name_d dyntab-dynnr.
  endif.
*mi/note 205297 end
endform.                    "D0340_VERARBEITUNG


*mi/46a begin
*-----------------------------------------------------------------------
*       Form D0420_VERARBEITUNG
*-----------------------------------------------------------------------
*       Bei Listen wird jede Zeile einzeln gesendet.
*-----------------------------------------------------------------------
form d0420_verarbeitung.
  clear xdytr.

* Zu verarbeitende Sätze vorhanden?
  read table xbwrf12 with key xdele = nodata.
  check sy-subrc = 0.

  clear ft.
  ft-fnam = 'BDC_OKCODE'.
  ft-fval = '/19'.
  append ft.

  perform dynpro_begin using 'SAPLWR22' '0420'.
  loop at xbwrf12 where xdele <> 'X'.
    clear xdytr.
    clear ft.
    ft-fnam = 'BDC_OKCODE'.
    ft-fval = '/19'.
    append ft.
    perform d2420_fuellen.
    perform d0420_fuellen.
  endloop.

  clear ft.
  ft-fnam = 'BDC_OKCODE'.
  ft-fval = '/03'.
  append ft.

  perform dynpro_begin using rep_name_d dyntab-dynnr.
endform.                    "D0420_VERARBEITUNG


*-----------------------------------------------------------------------
*       Form D0410_VERARBEITUNG
*-----------------------------------------------------------------------
*       Bei Listen wird jede Zeile einzeln gesendet.
*-----------------------------------------------------------------------
form d0410_verarbeitung.
  clear xdytr.

* Zu verarbeitende Sätze vorhanden?
  read table xbwrf4 index 1.      "key xdele = nodata.
  check sy-subrc = 0.

  clear ft.
  ft-fnam = 'BDC_OKCODE'.
  ft-fval = '/25'.
  append ft.

  perform dynpro_begin using 'SAPLWR22' '0410'.
  loop at xbwrf4.  " where xdele <> 'X'.
    clear xdytr.
    clear ft.
    ft-fnam = 'BDC_OKCODE'.
    ft-fval = '/19'.
    append ft.
    perform d2410_fuellen.
    perform d0410_fuellen.
    perform cursor_setzen_0410.
    if xbwrf4-xdele = 'X'.
      perform okcode_f14.
      perform dynpro_begin using 'SAPLWR22' '0410'.
      xdytr = 'X'.
    else.
      clear ft.
      ft-fnam = 'BDC_OKCODE'.
      ft-fval = '/02'.
      append ft.
      perform d0411_fuellen.
      clear ft.
      ft-fnam = 'BDC_OKCODE'.
      ft-fval = '/03'.
      append ft.
      perform dynpro_begin using 'SAPLWR22' '0410'.
    endif.
  endloop.

  clear ft.
  ft-fnam = 'BDC_OKCODE'.
  ft-fval = '/03'.
  append ft.

  perform dynpro_begin using rep_name_d dyntab-dynnr.
endform.                    "D0410_VERARBEITUNG


*-----------------------------------------------------------------------
*       Form D0420_VERARBEITUNG_XDELE
*-----------------------------------------------------------------------
*       Zu löschende Empfangsstellen bearbeiten
*-----------------------------------------------------------------------
form d0420_verarbeitung_xdele.
  clear xdytr.

* Zu löschende Sätze vorhanden?
  read table xbwrf12 with key xdele = 'X'.
  check sy-subrc = 0.

  clear ft.
  ft-fnam = 'BDC_OKCODE'.
  ft-fval = '/19'.
  append ft.

  perform dynpro_begin using 'SAPLWR22' '0420'.
  loop at xbwrf12 where xdele = 'X'.
    clear xdytr.
    clear ft.
    ft-fnam = 'BDC_OKCODE'.
    ft-fval = '/19'.
    append ft.
    perform d2420_fuellen.
    perform dynpro_begin using 'SAPLWR22' '0420'.
    perform cursor_setzen_0420.
    perform okcode_f14.
    perform dynpro_begin using 'SAPLWR22' '0420'.
    xdytr = 'X'.
  endloop.

  clear ft.
  ft-fnam = 'BDC_OKCODE'.
  ft-fval = '/03'.
  append ft.

  perform dynpro_begin using rep_name_d dyntab-dynnr.
endform.                    "D0420_VERARBEITUNG_XDELE


*----------------------------------------------------------
*        Form D0420_FUELLEN
*----------------------------------------------------------
form d0420_fuellen.
  clear ft.
  ft-program  = 'SAPLWR22'.
  ft-dynpro   = '0420'.
  ft-dynbegin = 'X'.
  append ft.
  if xbwrf12-empst(1)                   ne nodata.
    clear ft.
    ft-fnam = 'WRF12-EMPST                   '.
    ft-fnam+30(4) =  '(01)'.
    condense ft-fnam no-gaps.
    ft-fval = xbwrf12-empst                  .
    append ft.
  endif.
  if xbwrf12-ablad(1)                   ne nodata.
    clear ft.
    ft-fnam = 'WRF12-ABLAD                   '.
    ft-fnam+30(4) =  '(01)'.
    condense ft-fnam no-gaps.
    ft-fval = xbwrf12-ablad                  .
    append ft.
  endif.
endform.                    "D0420_FUELLEN

*----------------------------------------------------------
*        Form D0410_FUELLEN
*----------------------------------------------------------
form d0410_fuellen.
  clear ft.
  ft-program  = 'SAPLWR22'.
  ft-dynpro   = '0410'.
  ft-dynbegin = 'X'.
  append ft.
  if xbwrf4-abtnr(1)                   ne nodata.
    clear ft.
    ft-fnam = 'WRF4-ABTNR                   '.
    ft-fnam+30(4) =  '(01)'.
    condense ft-fnam no-gaps.
    ft-fval = xbwrf4-abtnr                  .
    append ft.
  endif.
  if xbwrf4-empst(1)                   ne nodata.
    clear ft.
    ft-fnam = 'WRF4-EMPST                   '.
    ft-fnam+30(4) =  '(01)'.
    condense ft-fnam no-gaps.
    ft-fval = xbwrf4-empst                  .
    append ft.
  endif.
endform.                    "D0410_FUELLEN

*----------------------------------------------------------
*        Form D0411_FUELLEN
*----------------------------------------------------------
form d0411_fuellen.
  clear ft.
  ft-program  = 'SAPLWR22'.
  ft-dynpro   = '0411'.
  ft-dynbegin = 'X'.
  append ft.
  if xbwrf4-layvr(1)                   ne nodata.
    clear ft.
    ft-fnam = 'WRF4-LAYVR                   '.
    ft-fnam+30(4) =  '(01)'.
    condense ft-fnam no-gaps.
    ft-fval = xbwrf4-layvr                  .
    append ft.
  endif.
  if xbwrf4-flvar(1)                   ne nodata.
    clear ft.
    ft-fnam = 'WRF4-FLVAR                   '.
    ft-fnam+30(4) =  '(01)'.
    condense ft-fnam no-gaps.
    ft-fval = xbwrf4-flvar                  .
    append ft.
  endif.
  if xbwrf4-verfl(1)                   ne nodata.
    clear ft.
    ft-fnam = 'WRF4-VERFL                   '.
    ft-fnam+30(4) =  '(01)'.
    condense ft-fnam no-gaps.
    ft-fval = xbwrf4-verfl                  .
    append ft.
  endif.
  if xbwrf4-verfe(1)                   ne nodata.
    clear ft.
    ft-fnam = 'WRF4-VERFE                   '.
    ft-fnam+30(4) =  '(01)'.
    condense ft-fnam no-gaps.
    ft-fval = xbwrf4-verfe                  .
    append ft.
  endif.
endform.                    "D0411_FUELLEN
*mi/46a end


*eject
*-----------------------------------------------------------------------
*        Form  D2360_FUELLEN
*-----------------------------------------------------------------------
*        Aufsetzfelder für Ansprechpartner
*-----------------------------------------------------------------------
form d2360_fuellen.
  check fl_check = space.

  perform dynpro_begin using rep_name_d '2360'.
  if  xbknvk-parnr(1) ne nodata.
* AND BKN00-TCODE     NE 'XD01'.     "zu 2.1A deaktiviert
    clear ft.
    ft-fnam = 'KNVK-PARNR'.
    ft-fval = xbknvk-parnr.
    append ft.
  endif.
  if xbknvk-name1(1) ne nodata.
    clear ft.
    ft-fnam = 'KNVK-NAME1'.
    ft-fval = xbknvk-name1.
    append ft.
  endif.
  if xbknvk-namev(1) ne nodata.
    clear ft.
    ft-fnam = 'KNVK-NAMEV'.
    ft-fval = xbknvk-namev.
    append ft.
  endif.
  if xbknvk-parge(1) ne nodata.
    clear ft.
    ft-fnam = 'KNVK-PARGE'.
    ft-fval = xbknvk-parge.
    append ft.
  endif.
  if xbknvk-gbdat(1) ne nodata.
    clear ft.
    ft-fnam = 'KNVK-GBDAT'.
    ft-fval = xbknvk-gbdat.
    append ft.
  endif.
endform.                    "D2360_FUELLEN

*eject
*-----------------------------------------------------------------------
*       Form D0360_VERARBEITUNG
*-----------------------------------------------------------------------
*       Bei Listen wird jede Zeile einzeln gesendet.
*-----------------------------------------------------------------------
form d0360_verarbeitung.
  clear xdytr.
  perform dynpro_begin using rep_name_d dyntab-dynnr.

*\BE ZAV
  if not zav_flag is initial.
    perform ermittle_alle_cont_partner using 'KNA1'.
  endif.
*\BE ZAV Ende

  loop at xbknvk.
    clear xdytr.
    clear knvk_mess.
    perform okcode_posz.
*\BE ZAV
    if not zav_flag is initial.
      perform zav_parnr_bestimmen.
    endif.
*\BE ZAV Ende
    perform d2360_fuellen.
    perform dynpro_fuellen using dyntab-dynnr.
    perform cursor_setzen_0360.
    if xbknvk-xdele = 'X'.
      perform okcode_f14.
      perform dynpro_begin using rep_name_d dyntab-dynnr.
      xdytr = 'X'.
    endif.

*------- Hinzufügen => es darf keine Partnernummer übergeben werden ---
*------- ab Release 2.1A dürfen Nummern übergeben werden! -------------
*   PERFORM parnr_uepar_pruefen.             "mit 2.1A deaktiviert

*------- Anrede darf nicht länger als 15 Stellen sein -----------------
*------- zu 3.0D wegen scrollbarer Felder deaktiviert -----------------
    if  xbknvk-anred ne space
    and xbknvk-anred(1) ne nodata.
*     xbknvk-anred+16(12) = space.                 "P30K070730/3.0D
    endif.
    perform d1360_daten_bearbeiten.
    perform d1365_daten_bearbeiten.
    perform d1366_daten_bearbeiten.
  endloop.

*------- Letzte Zeile abschicken ---------------------------------------
  describe table xbknvk lines refe1.
  if  refe1 ne  0
  and xdytr ne 'X'.
    perform dynpro_begin using rep_name_d dyntab-dynnr.
  endif.
endform.                    "D0360_VERARBEITUNG

*eject
*-----------------------------------------------------------------------
*        Form  D2370_FUELLEN
*-----------------------------------------------------------------------
*        Aufsetzfelder für Außenhandelsdaten
*-----------------------------------------------------------------------
form d2370_fuellen.
  check fl_check = space.

  perform dynpro_begin using rep_name_d '2370'.
  if xbknex-lndex(1) ne nodata.
    clear ft.
    ft-fnam = 'KNEX-LNDEX'.
    ft-fval = xbknex-lndex.
    append ft.
  endif.
endform.                    "D2370_FUELLEN

*eject
*-----------------------------------------------------------------------
*       Form D0370_VERARBEITUNG
*-----------------------------------------------------------------------
*       Bei Listen wird jede Zeile einzeln gesendet.
*-----------------------------------------------------------------------
form d0370_verarbeitung.
  clear xdytr.

*------- CIVVE/MILVE sind Auswahlknöpfe, nie beide = 'X' ---------------
  if  bkna1-civve = 'X'.
    clear bkna1-milve.
  elseif bkna1-milve = 'X'.
    clear bkna1-civve.
  endif.
  perform d0370_fuellen_einzelfelder.
  loop at xbknex.
    clear xdytr.
    perform okcode_posz.
    perform d2370_fuellen.
    perform dynpro_fuellen using dyntab-dynnr.
    perform cursor_setzen_0370.
    if xbknex-xdele = 'X'.
      perform okcode_f14.
      perform dynpro_begin using rep_name_d dyntab-dynnr.
      xdytr = 'X'.
    endif.
  endloop.

*------- Letzte Zeile abschicken ---------------------------------------
  describe table xbknex lines refe1.
  if  refe1 ne  0
  and xdytr ne 'X'.
    perform dynpro_begin using rep_name_d dyntab-dynnr.
  endif.
endform.                    "D0370_VERARBEITUNG

*eject
*-----------------------------------------------------------------------
*        Form  D2350_FUELLEN
*-----------------------------------------------------------------------
*        Aufsetzfelder für Steuern
*-----------------------------------------------------------------------
form d2350_fuellen.
  check fl_check = space.

  perform dynpro_begin using rep_name_d '2350'.
  if xbknvi-aland(1) ne nodata.
    clear ft.
    ft-fnam = 'KNVI-ALAND'.
    ft-fval = xbknvi-aland.
    append ft.
  endif.
  if xbknvi-tatyp(1) ne nodata.
    clear ft.
    ft-fnam = 'KNVI-TATYP'.
    ft-fval = xbknvi-tatyp.
    append ft.
  endif.
  if xbknvi-taxkd(1) ne nodata.
    clear ft.
    ft-fnam = 'KNVI-TAXKD'.
    ft-fval = xbknvi-taxkd.
    append ft.
  endif.
endform.                    "D2350_FUELLEN

*eject
*-----------------------------------------------------------------------
*       Form D1350_VERARBEITUNG
*-----------------------------------------------------------------------
*       Bei Listen wird jede Zeile einzeln gesendet.
*       Sonderfall Steuern/Lizenzen: Lizenzpflege ist nur über die
*       Steuerpflege möglich (Teilschlüssel). Deshalb muß der Teil-
*       schlüssel ALAND/TATYP aus Tabelle XBKNVL immer in XBKNVI ent-
*       halten sein, d.h. er ist ggf. neu aufzunehmen.
*-----------------------------------------------------------------------
form d1350_verarbeitung.
  clear xdytr.
  clear licex.
  perform dynpro_begin using rep_name_d dyntab-dynnr.

*------- Steuerdaten: Vollständigkeit prüfen --------------------------
  perform steuerdaten_pruefen.

*------- Lizenzdaten: Vollständigkeit prüfen --------------------------
  perform lizenzen_pruefen.

*------- XBKNVL-Teilschlüssel in XBKNVI enthalten ? -------------------
  loop at xbknvl.
    loop at xbknvi where aland = xbknvl-aland
                   and   tatyp = xbknvl-tatyp.
    endloop.
    if sy-subrc ne 0.
      xbknvi-aland = xbknvl-aland.
      xbknvi-tatyp = xbknvl-tatyp.
      xbknvi-taxkd = nodata.
      append xbknvi.
    endif.
  endloop.

*------- Steuer-/Lizenzverarbeitung beginnen --------------------------
  loop at xbknvi.
    clear xdytr.
    perform okcode_posz.
    perform d2350_fuellen.
    perform dynpro_fuellen using dyntab-dynnr.
    perform cursor_setzen_1350.

*------- Ggf. Lizenzen bearbeiten -------------------------------------
    loop at xbknvl where aland = xbknvi-aland
                   and   tatyp = xbknvi-tatyp.
    endloop.
    if sy-subrc = 0.
      licex = 'X'.
      perform okcode_knvl.
      perform d1355_verarbeitung.
      perform dynpro_begin using rep_name_d dyntab-dynnr.
    endif.
  endloop.

*------- Letzte Zeile abschicken ---------------------------------------
  describe table xbknvi lines refe1.
  if  refe1 ne  0
  and xdytr ne 'X'
  and licex ne 'X'.
    perform dynpro_begin using rep_name_d dyntab-dynnr.
  endif.
endform.                    "D1350_VERARBEITUNG

*eject
*-----------------------------------------------------------------------
*        Form  D2355_FUELLEN
*-----------------------------------------------------------------------
*        Aufsetzfelder für Lizenzen
*-----------------------------------------------------------------------
form d2355_fuellen.
  check fl_check = space.

  perform dynpro_begin using rep_name_d '2355'.
  if xbknvl-aland(1) ne nodata.
    clear ft.
    ft-fnam = 'KNVL-ALAND'.
    ft-fval = xbknvl-aland.
    append ft.
  endif.
  if xbknvl-tatyp(1) ne nodata.
    clear ft.
    ft-fnam = 'KNVL-TATYP'.
    ft-fval = xbknvl-tatyp.
    append ft.
  endif.
  if xbknvl-licnr(1) ne nodata.
    clear ft.
    ft-fnam = 'KNVL-LICNR'.
    ft-fval = xbknvl-licnr.
    append ft.
  endif.
endform.                    "D2355_FUELLEN

*eject
*-----------------------------------------------------------------------
*       Form D1355_VERARBEITUNG
*-----------------------------------------------------------------------
*       Bei Listen wird jede Zeile einzeln gesendet.
*       Bei Lizenzen dürfen nur jeweil die Sätze bearbeitet werden,
*       die den Schlüssel der aktuellen XBKNVI-Zeile beinhalten.
*-----------------------------------------------------------------------
form d1355_verarbeitung.
  clear xdytr.
  clear refe1.
  perform dynpro_begin using rep_name_d '1355'.
  loop at xbknvl where aland = xbknvi-aland
                 and   tatyp = xbknvi-tatyp.
    clear xdytr.
    perform okcode_posz.
    perform d2355_fuellen.
    perform dynpro_fuellen using '1355'.
    perform cursor_setzen_1355.
    if xbknvl-xdele = 'X'.
      perform okcode_f14.
      perform dynpro_begin using rep_name_d '1355'.
      xdytr = 'X'.
    endif.
    add 1 to refe1.
  endloop.

*------- Letzte Zeile abschicken ---------------------------------------
  if  refe1 ne  0
  and xdytr ne 'X'.
*   PERFORM DYNPRO_BEGIN USING REP_NAME_D '1355'.
  endif.
endform.                    "D1355_VERARBEITUNG

*eject
*-----------------------------------------------------------------------
*       Form DYNPRO_BEGIN
*-----------------------------------------------------------------------
form dynpro_begin using program dynpro.
  check fl_check = space.

  clear ft.
  ft-program  = program.
  ft-dynpro   = dynpro.
  ft-dynbegin = 'X'.
  append ft.
endform.                    "DYNPRO_BEGIN

*eject
*-----------------------------------------------------------------------
*        Form  DYNTAB_AUFBAUEN
*-----------------------------------------------------------------------
*        Für jede Transaktion werden in der DYNTAB die
*        abzuarbeitenden Bilder aufgelistet.
*
*        Aus den übergebenen Key-Feldern werden die zu
*        bearbeitenden Bereiche abgeleitet.
*
*        Besonderheit beim Anlegen:
*        Beim Anlegen wird die KNA1 zur Probe gelesen, um festzustellen,
*        ob das A-Segment schon angelegt wurde.
*        In diesem Fall dürfen keine Daten des Allg. Bereichs an die
*        Schnittstelle übergeben werden.
*-----------------------------------------------------------------------
form dyntab_aufbauen.
  refresh dyntab.
  clear   dyntab.

  clear   bi.

*------- Aktivität und Funktion aus T020 / XT020 ermitteln ---------
  perform aktivitaet_ermitteln.

*------- Sonderfall: Kreditlimit --------------------------------------
  if xt020-dyncl = 'C'.
    clear dyntab.
    dyntab-dynnr = 'L120'.
    dyntab-dtype = 'L'.
    append dyntab.
    if  bkn00-kkber ne nodata
    and bkn00-kkber ne space.
      clear dyntab.
      dyntab-dynnr = 'L210'.
      dyntab-dtype = 'L'.
      append dyntab.
      bi-xkkbr  = 'X'.
    endif.
    exit.
  endif.

*------- Debitor: zu bearbeitende Bereiche ermitteln ------------------
  bi-xaseg = 'X'.

*\BE
* Alpha-Konvertierung generell durchführen, da im Rahmen der
* ZAV-Umstellung auf im Ändern-Modus mit der KUNNR auf Daten zugegriffen
* wird.
  clear kunnr.
  if  bkn00-kunnr(1) ne nodata
   and bkn00-kunnr    ne space.
    translate bkn00-kunnr to upper case.                 "#EC TRANSLANG
    perform alphaformat(sapfs000) using bkn00-kunnr kunnr.
  endif.
*\BE Ende
*------- Anlegen: existiert allg. Bereich schon ? ----------------------
  if xt020-aktyp = 'H'.
    if  bkn00-kunnr(1) ne nodata
    and bkn00-kunnr    ne space.
*     TRANSLATE BKN00-KUNNR TO UPPER CASE.   "#EC TRANSLANG  "\BE s.o.
*     PERFORM ALPHAFORMAT(SAPFS000) USING BKN00-KUNNR KUNNR. "\BE s.o.
* \BE Beginn
* Umgestellt auf Lesebaustein; Puffer nicht ausnutzen, da ansonsten
* Daten nicht aktuell, wenn der gleiche Kunde mehrmals verarbeitet wird.
*     SELECT SINGLE * FROM KNA1 WHERE KUNNR = KUNNR.
      call function 'V_KNA1_SINGLE_READ'
           exporting
                pi_kunnr            = kunnr
                pi_bypassing_buffer = 'X'    "Daten müssen aktuell sein
*               PI_REFRESH_BUFFER   =
           importing
                pe_kna1             = kna1
           exceptions
                no_records_found    = 1
                others              = 2.
* \BE Ende
      if sy-subrc = 0.
        bi-xaseg = space.
      endif.
    endif.
*\BE ZAV: auch im Ändern-Modus die KNA1 lesen
  else.
    if not zav_flag is initial.
      if  bkn00-kunnr(1) ne nodata
      and bkn00-kunnr    ne space.
        call function 'V_KNA1_SINGLE_READ'
               exporting
                   pi_kunnr            = kunnr
                   pi_bypassing_buffer = 'X'
*                     PI_REFRESH_BUFFER   =
               importing
                   pe_kna1             = kna1
               exceptions
                   no_records_found    = 1
                   others              = 2.
      endif.
    endif.
*\BE Ende
  endif.

*------- Buchungskreisdaten bearbeiten? -------------------------------
  if  bkn00-bukrs(1) ne nodata
  and bkn00-bukrs    ne space.
    bi-xbukr = 'X'.
*--- Quellensteuer
    perform t001_daten_ermitteln.
*------- Anlegen: Existiert Buchungskreis schon ? ----------------------
    if xt020-aktyp = 'H'
    and bkn00-kunnr(1) ne nodata
    and bkn00-kunnr    ne space.
      select single * from knb1 where kunnr = kunnr
                                and   bukrs = bkn00-bukrs.
      if sy-subrc = 0.
        bi-xbukr = space.
      endif.
    endif.
  endif.

*------- Verkaufsdaten bearbeiten? ------------------------------------
  if  bkn00-vkorg(1) ne nodata
  and bkn00-vkorg    ne space.
    bi-xvkor = 'X'.

*------- Anlegen: Existiert Vertriebsbereich schon? --------------------
    if xt020-aktyp = 'H'
    and bkn00-kunnr(1) ne nodata
    and bkn00-kunnr    ne space.
      select single * from knvv where kunnr = kunnr
                                and   vkorg = bkn00-vkorg
                                and   vtweg = bkn00-vtweg
                                and   spart = bkn00-spart.
      if sy-subrc = 0.
        bi-xvkor = space.
      endif.
    endif.
  endif.

*------- Sperren: Dynpro setzen ----------------------------------------
  if  xt020-aktyp = 'V'
  and xt020-funcl = 'S'.
    clear dyntab.
    dyntab-dynnr = '0510'.
    append dyntab.
    perform log_msg using c_msgid 'I' '122'
     trans_count bkn00-tcode space space .
  endif.

*------- Löschvormerkung: Dynpro setzen --------------------------------
  if  xt020-aktyp = 'V'
  and xt020-funcl = 'L'.
    clear dyntab.
    dyntab-dynnr = '0520'.
    append dyntab.
    perform log_msg using c_msgid 'I' '123'
     trans_count bkn00-tcode space space .
  endif.

*------- DYNTAB aufbauen ( für anlegen / ändern ) ----------------------
  clear: char, char1.
  if xt020-funcl = space.
    while char(4) ne '$END'
      vary char(4)  from dynseq-d01 next dynseq-d02
      vary char1(1) from dynseq-t01 next dynseq-t02
      vary char2(1) from dynseq-l01 next dynseq-l02.
      clear dyntab.
      case char1(1).

*------- Dynpros für Allgemeine Daten ---------------------------------
        when 'A'.
          if bi-xaseg eq 'X'.
            dyntab-dynnr = char(4).
            dyntab-dtype = char1(1).
            dyntab-xlist = char2(1).
*ZAV: statt Dynpro 110 mit Dynpro 111 bzw. 112 (Konsument) arbeiten /ms
            if dyntab-dynnr = '0110'.
              if not zav_flag is initial.
* MS Hinweis 446677 begin
                if  gv_consumer_account_group is initial
                and gv_consumer_not_exist is initial.
                  select single ktokd from t077d
                         into gv_consumer_account_group
                         where dear6 = 'X'.
                  if sy-subrc <> 0.
                    gv_consumer_not_exist = 'X'.
                  endif.
                endif.
                if  ( not gv_consumer_account_group is initial
                      and bkn00-ktokd = gv_consumer_account_group )
* MS Hinweis 446677 end
                or  kna1-dear6 = 'X'.
                  dyntab-dynnr = '0112'.
                else.
                  dyntab-dynnr = '0111'.
                endif.
              endif.
            endif.
*ZAV Ende
            append dyntab.
          endif.

*------- Dynpros für RF-Daten -----------------------------------------
        when 'F'.
          if bi-xbukr eq 'X'.
            dyntab-dynnr = char(4).
            dyntab-dtype = char1(1).
            dyntab-xlist = char2(1).
            append dyntab.
          endif.

*------- Dynpros für RV-Daten -----------------------------------------
        when 'V'.
          if bi-xvkor eq 'X'.
            dyntab-dynnr = char(4).
            dyntab-dtype = char1(1).
            dyntab-xlist = char2(1).
            append dyntab.
          endif.
      endcase.
    endwhile.

*------- Sonderfall: Steuern Vertrieb (D1350 aufnehmen) ---------------
    if bi-xvkor eq 'X'.
      read table dyntab with key '0320'.
      tabix = sy-tabix + 1.
      dyntab-dynnr = '1350'.
      dyntab-dtype = 'V'.
      dyntab-xlist = 'X'.
      insert dyntab index tabix.
    endif.
  endif.

*-------- Südamerikanische Steuerbilder entfernen ----------------------
  loop at dyntab where dynnr = '0600'.                      "QHA960119
*                   or dynnr = '0610'.                      "QHA960119
    delete dyntab.                                          "QHA960119
  endloop.                                                  "QHA960119

endform.                    "DYNTAB_AUFBAUEN

*eject
*-----------------------------------------------------------------------
*        Form  D1360_DATEN_BEARBEITEN
*-----------------------------------------------------------------------
*        Partner-Detaildaten prüfen/übertragen
*-----------------------------------------------------------------------
form d1360_daten_bearbeiten.

*------- Wurden Detaildaten übergeben ? -------------------------------
  check xbknvk-sortl(1) ne nodata
  or    xbknvk-parla(1) ne nodata
  or    xbknvk-parge(1) ne nodata
  or    xbknvk-famst(1) ne nodata
  or    xbknvk-gbdat(1) ne nodata
  or    xbknvk-abtpa(1) ne nodata
  or    xbknvk-pavip(1) ne nodata
  or    xbknvk-parvo(1) ne nodata
  or    xbknvk-nmail(1) ne nodata
  or    xbknvk-uepar(1) ne nodata
  or    xbknvk-vrtnr(1) ne nodata
  or    xbknvk-bryth(1) ne nodata
  or    xbknvk-akver(1) ne nodata
  or    xbknvk-parau(1) ne nodata
  or    xbknvk-spnam(1) ne nodata      "K11K111524/3.0
*\BE ZAV Telefon-Nummer wird jetzt auf Detailbild 1361 verarbeitet
  or  ( xbknvk-telf1(1)    ne nodata
        and not zav_flag is initial )
  or  ( xbknvk-anred(1)    ne nodata
        and not zav_flag is initial )
*\BE ZAV Ende
  or    xbknvk-titel_ap(1) ne nodata.

*------- Delete-Flag gesetzt? -----------------------------------------
  if xbknvk-xdele eq 'X'.
    perform log_msg using c_msgid 'I' '197'
     xbknvk-name1 space space space .
    perform log_msg using c_msgid 'I' '198'
     space space space space .
    knvk_mess = 'X'.
    exit.
  endif.

*------- neue Detaildaten übertragen ----------------------------------
  perform okcode_knvk.
*\BE ZAV; Ansprung des neuen Detailbilds 1361
  if zav_flag is initial.
    perform dynpro_fuellen using '1360'.
  else.
    perform dynpro_fuellen using '1361'.
  endif.
*\BE ZAV Ende
  perform okcode_f03.
  perform dynpro_begin using rep_name_d dyntab-dynnr.
  xdytr = 'X'.
endform.                    "D1360_DATEN_BEARBEITEN

*eject
*-----------------------------------------------------------------------
*        Form  D1365_DATEN_BEARBEITEN
*-----------------------------------------------------------------------
*        Partner-Besuchszeiten übertragen
*-----------------------------------------------------------------------
form d1365_daten_bearbeiten.

*------- Wurden Besuchszeiten übergeben ? ------------------------------
  check knvk_mess ne 'X'.
  check xbknvk-moab1(1) ne nodata
  or    xbknvk-mobi1(1) ne nodata
  or    xbknvk-moab2(1) ne nodata
  or    xbknvk-mobi2(1) ne nodata
  or    xbknvk-diab1(1) ne nodata
  or    xbknvk-dibi1(1) ne nodata
  or    xbknvk-diab2(1) ne nodata
  or    xbknvk-dibi2(1) ne nodata
  or    xbknvk-miab1(1) ne nodata
  or    xbknvk-mibi1(1) ne nodata
  or    xbknvk-miab2(1) ne nodata
  or    xbknvk-mibi2(1) ne nodata
  or    xbknvk-doab1(1) ne nodata
  or    xbknvk-dobi1(1) ne nodata
  or    xbknvk-doab2(1) ne nodata
  or    xbknvk-dobi2(1) ne nodata
  or    xbknvk-frab1(1) ne nodata
  or    xbknvk-frbi1(1) ne nodata
  or    xbknvk-frab2(1) ne nodata
  or    xbknvk-frbi2(1) ne nodata
  or    xbknvk-saab1(1) ne nodata
  or    xbknvk-sabi1(1) ne nodata
  or    xbknvk-saab2(1) ne nodata
  or    xbknvk-sabi2(1) ne nodata
  or    xbknvk-soab1(1) ne nodata
  or    xbknvk-sobi1(1) ne nodata
  or    xbknvk-soab2(1) ne nodata
  or    xbknvk-sobi2(1) ne nodata.

*------- Delete-Flag gesetzt? -----------------------------------------
  if xbknvk-xdele eq 'X'.
    perform log_msg using c_msgid 'I' '197'
     xbknvk-name1 space space space .
    perform log_msg using c_msgid 'I' '198'
     space space space space .
    knvk_mess = 'X'.
    exit.
  endif.

*------- neue Besuchszeiten übertragen --------------------------------
  perform okcode_f09.
  perform dynpro_fuellen using '1365'.
* perform okcode_f03.                   "S11K144454/3.0
  perform dynpro_begin using rep_name_d dyntab-dynnr.
  xdytr = 'X'.
endform.                    "D1365_DATEN_BEARBEITEN

*eject
*-----------------------------------------------------------------------
*        Form  D1366_DATEN_BEARBEITEN
*-----------------------------------------------------------------------
*        Partner-Attribute übertragen
*-----------------------------------------------------------------------
form d1366_daten_bearbeiten.

*------- Wurden Attribute übergeben ? ----------------------------------
  check knvk_mess ne 'X'.
  check xbknvk-parh1(1) ne nodata
  or    xbknvk-parh2(1) ne nodata
  or    xbknvk-parh3(1) ne nodata
  or    xbknvk-parh4(1) ne nodata
  or    xbknvk-parh5(1) ne nodata
  or    xbknvk-pakn1(1) ne nodata
  or    xbknvk-pakn2(1) ne nodata
  or    xbknvk-pakn3(1) ne nodata
  or    xbknvk-pakn4(1) ne nodata
  or    xbknvk-pakn5(1) ne nodata.

*------- Delete-Flag gesetzt? -----------------------------------------
  if xbknvk-xdele eq 'X'.
    perform log_msg using c_msgid 'I' '197'
     xbknvk-name1 space space space .
    perform log_msg using c_msgid 'I' '198'
     space space space space .
    knvk_mess = 'X'.
    exit.
  endif.

*------- neue Detaildaten übertragen ----------------------------------
  perform okcode_attr.
  perform dynpro_fuellen using '1366'.
* perform okcode_f03.                   "S11K144454/3.0
  perform dynpro_begin using rep_name_d dyntab-dynnr.
  xdytr = 'X'.
endform.                    "D1366_DATEN_BEARBEITEN


*eject
*-----------------------------------------------------------------------
*        Form  D3130_FUELLEN
*-----------------------------------------------------------------------
*        Aufsetzfelder für abw. Regulierer
*-----------------------------------------------------------------------
form d3130_fuellen.
  check fl_check = space.

  perform dynpro_begin using rep_name_d '3130'.
  if xbknza-empfd(1) ne nodata.
    clear ft.
    ft-fnam = 'KNZA-EMPFD'.
    ft-fval = xbknza-empfd.
    append ft.
  endif.
endform.                    "D3130_FUELLEN

*eject
*-----------------------------------------------------------------------
*       Form FUNKTION_LOESCHVORMERKUNGEN
*-----------------------------------------------------------------------
form funktion_loeschvormerkungen.
  check fl_check = space.


*------- wurden Löschvormerkungen übergeben ? --------------------------

* begin P30K113875

* check bkna1-loevm(1) ne nodata
* or    bknb1-loevm(1) ne nodata
* or    bknvv-loevm(1) ne nodata.


* Löschvorm. von dem Dynpro aus setzen zu dem Kezi zu verarbeiten sind.
* Dabei berücksichtigen, daß Dynpros evtl. total ausgeblendet sind.

  check loesch_gesetzt = space.      "Loschvormerkung nur einmal setzen

  case dyntab-dynnr.

    when '0110'.
      CHECK BKNA1-LOEVM(1) NE NODATA
         OR BKNA1-NODEL(1) NE NODATA.          "\BE Note 522136
*\BE ZAV Beginn
    when '0111'.
      CHECK BKNA1-LOEVM(1) NE NODATA
         OR BKNA1-NODEL(1) NE NODATA.          "\BE Note 522136
*\MS Konsument Beginn
    when '0112'.
      CHECK BKNA1-LOEVM(1) NE NODATA
         OR BKNA1-NODEL(1) NE NODATA.          "\BE Note 522136
*\MS Konsument Beginn
*\BE ZAV Ende
    when '0120'.
      CHECK BKNA1-LOEVM(1) NE NODATA
         OR BKNA1-NODEL(1) NE NODATA.          "\BE Note 522136
    when '0125'.
      CHECK BKNA1-LOEVM(1) NE NODATA
         OR BKNA1-NODEL(1) NE NODATA.          "\BE Note 522136
    when '0130'.
      CHECK BKNA1-LOEVM(1) NE NODATA
         OR BKNA1-NODEL(1) NE NODATA.          "\BE Note 522136
    when '0340'.
      CHECK BKNA1-LOEVM(1) NE NODATA
         OR BKNA1-NODEL(1) NE NODATA.          "\BE Note 522136
    when '0370'.
      CHECK BKNA1-LOEVM(1) NE NODATA
         OR BKNA1-NODEL(1) NE NODATA.          "\BE Note 522136
    when '0360'.
      CHECK BKNA1-LOEVM(1) NE NODATA
         OR BKNA1-NODEL(1) NE NODATA.          "\BE Note 522136
    when '0210'.
      CHECK BKNB1-LOEVM(1) NE NODATA
         OR BKNB1-NODEL(1) NE NODATA.          "\BE Note 522136
    when '0215'.
      CHECK BKNB1-LOEVM(1) NE NODATA
         OR BKNB1-NODEL(1) NE NODATA.          "\BE Note 522136
    when '0220'.
      CHECK BKNB1-LOEVM(1) NE NODATA
         OR BKNB1-NODEL(1) NE NODATA.          "\BE Note 522136
    when '0230'.
      CHECK BKNB1-LOEVM(1) NE NODATA
         OR BKNB1-NODEL(1) NE NODATA.          "\BE Note 522136
    when '0310'.
      check bknvv-loevm(1) ne nodata.
    when '0315'.
      check bknvv-loevm(1) ne nodata.
    when '0320'.
      check bknvv-loevm(1) ne nodata.
    when '0324'.
      check bknvv-loevm(1) ne nodata.
    when '0326'.
      check bknvv-loevm(1) ne nodata.
    when others.
      exit.
  endcase.
* end P30K113875

*------- auf Löschvormerkungsbild springen -----------------------------
  clear ft.
  ft-fnam = 'BDC_OKCODE'.
  ft-fval = '0520'.
  append ft.

*------- Lövm-daten auf Dynpro stellen und zurückspringen -------------
  perform dynpro_fuellen using '0520'.
  clear ft.
  ft-fnam = 'BDC_OKCODE'.
  ft-fval = '/03'.
  append ft.
  perform dynpro_begin using rep_name_d dyntab-dynnr.

* begin P30K113875
* Löschvormerkung wurde gesetzt
  loesch_gesetzt = 'X'.
* end P30K113875

endform.                    "FUNKTION_LOESCHVORMERKUNGEN

*eject
*-----------------------------------------------------------------------
*       Form FUNKTION_SPERRDATEBN
*-----------------------------------------------------------------------
form funktion_sperrdaten.
  check fl_check = space.

*------- wurden Sperrdaten übergeben ? ---------------------------------
* begin P30K113875
* check bkna1-sperr(1) ne nodata
* or    bkna1-faksd(1) ne nodata
* or    bkna1-lifsd(1) ne nodata
* or    bkna1-aufsd(1) ne nodata
* or    bknb1-sperr(1) ne nodata
* or    bknvv-faksd(1) ne nodata
* or    bknvv-lifsd(1) ne nodata
* or    bknvv-aufsd(1) ne nodata.

* Sperre von dem Dynpro aus setzen zu dem Sperrkezi zu verarbeiten sind.
* Dabei berücksichtigen, daß Dynpros evtl. total ausgeblendet sind.


  check sperre_gesetzt = space.        "Sperre nur einmal setzen

  case dyntab-dynnr.
    when '0110'.
      check bkna1-sperr(1) ne nodata
      or    bkna1-aufsd(1) ne nodata
      or    bkna1-lifsd(1) ne nodata
      or    bkna1-faksd(1) ne nodata.
*\BE ZAV Beginn
    when '0111'.
      check bkna1-sperr(1) ne nodata
      or    bkna1-aufsd(1) ne nodata
      or    bkna1-lifsd(1) ne nodata
      or    bkna1-faksd(1) ne nodata.
*\MS Konsument Beginn
    when '0112'.
      check bkna1-sperr(1) ne nodata
      or    bkna1-aufsd(1) ne nodata
      or    bkna1-lifsd(1) ne nodata
      or    bkna1-faksd(1) ne nodata.
*\MS Konsument Ende
*\BE ZAV Ende
    when '0120'.
      check bkna1-sperr(1) ne nodata
      or    bkna1-aufsd(1) ne nodata
      or    bkna1-lifsd(1) ne nodata
      or    bkna1-faksd(1) ne nodata.
    when '0125'.
      check bkna1-sperr(1) ne nodata
      or    bkna1-aufsd(1) ne nodata
      or    bkna1-lifsd(1) ne nodata
      or    bkna1-faksd(1) ne nodata.
    when '0130'.
      check bkna1-sperr(1) ne nodata
      or    bkna1-aufsd(1) ne nodata
      or    bkna1-lifsd(1) ne nodata
      or    bkna1-faksd(1) ne nodata.
    when '0340'.
      check bkna1-sperr(1) ne nodata
      or    bkna1-aufsd(1) ne nodata
      or    bkna1-lifsd(1) ne nodata
      or    bkna1-faksd(1) ne nodata.
    when '0370'.
      check bkna1-sperr(1) ne nodata
      or    bkna1-aufsd(1) ne nodata
      or    bkna1-lifsd(1) ne nodata
      or    bkna1-faksd(1) ne nodata.
    when '0360'.
      check bkna1-sperr(1) ne nodata
      or    bkna1-aufsd(1) ne nodata
      or    bkna1-lifsd(1) ne nodata
      or    bkna1-faksd(1) ne nodata.
    when '0210'.
      check bknb1-sperr(1) ne nodata.
    when '0215'.
      check bknb1-sperr(1) ne nodata.
    when '0220'.
      check bknb1-sperr(1) ne nodata.
    when '0230'.
      check bknb1-sperr(1) ne nodata.
    when '0310'.
      check bknvv-aufsd(1) ne nodata
      or    bknvv-lifsd(1) ne nodata
      or    bknvv-faksd(1) ne nodata.
    when '0315'.
      check bknvv-aufsd(1) ne nodata
      or    bknvv-lifsd(1) ne nodata
      or    bknvv-faksd(1) ne nodata.
    when '0320'.
      check bknvv-aufsd(1) ne nodata
      or    bknvv-lifsd(1) ne nodata
      or    bknvv-faksd(1) ne nodata.
    when '0324'.
      check bknvv-aufsd(1) ne nodata
      or    bknvv-lifsd(1) ne nodata
      or    bknvv-faksd(1) ne nodata.
    when '0326'.
      check bknvv-aufsd(1) ne nodata
      or    bknvv-lifsd(1) ne nodata
      or    bknvv-faksd(1) ne nodata.
    when others.
      exit.
  endcase.
* end P30K113875

*------- auf Sperrbild springen ----------------------------------------
  clear ft.
  ft-fnam = 'BDC_OKCODE'.
  ft-fval = '0510'.
  append ft.

*------- Sperrdaten auf Dynpro stellen und zurückspringen -------------
  perform dynpro_fuellen using '0510'.
  clear ft.
  ft-fnam = 'BDC_OKCODE'.
  ft-fval = '/03'.
  append ft.
  perform dynpro_begin using rep_name_d dyntab-dynnr.

* begin P30K113875
* Sperre wurde gesetzt
  sperre_gesetzt = 'X'.
* end P30K113875
endform.                    "FUNKTION_SPERRDATEN

*eject
*-----------------------------------------------------------------------
*        Form  INIT_DEBI_STRUKTUREN
*-----------------------------------------------------------------------
*        Debitor-Strukturen mit Initialstrukturen 'initialisieren'.
*-----------------------------------------------------------------------
form init_debi_strukturen.
  refresh: xbknat,
           xbknbk,
           xbknbk_iban,                                     " \TP 957820
           xbknbw,
           xbknex,
           xbknva,
           xbknvd,
           xbknvi,
           xbknvk,
           xbknvl,
           xbknvp,
           xbknza,
*mi/46a begin
           xbwrf12,
           xbwrf4.
*mi/46a end

  bkna1   = i_bkna1.
  bknb1   = i_bknb1.
  bknb5   = i_bknb5.
  bknvv   = i_bknvv.
  bknex   = i_bknex.
  bknva   = i_bknva.
  bknvd   = i_bknvd.
  bknvi   = i_bknvi.
  bknvk   = i_bknvk.
  xbknvk  = i_bknvk.                                        "ms/46a
  bknvl   = i_bknvl.
  bknvp   = i_bknvp.
  bknka   = i_bknka.
  bknkk   = i_bknkk.
  bknza   = i_bknza.
*mi/46a begin
  bwrf12  = i_bwrf12.
  bwrf4   = i_bwrf4.
*mi/46a end
  biaddr2 = i_biaddr2.                                      "ms/46a
  bknbk_iban = i_bknbk_iban.                                " \TP 957820
endform.                    "INIT_DEBI_STRUKTUREN

*eject
*-----------------------------------------------------------------------
*        Form  KEY_FELDER_FUELLEN
*-----------------------------------------------------------------------
*        Key-Felder auf Einstiegsbilder übertragen.
*        Wegen SPA/GPA-Parametern, müssen auf dem Einstiegsbild die
*        Felder mit Space übergeben werden, falls sie nicht
*        explizit gefüllt wurden.
*-----------------------------------------------------------------------
form key_felder_fuellen.
  check fl_check = space.

  clear ft.
  ft-fnam = 'RF02D-KUNNR'.
  if bkn00-kunnr(1) ne nodata.
    ft-fval = bkn00-kunnr.
  else.
    ft-fval = space.
  endif.
  append ft.

  clear ft.
  ft-fnam = 'RF02D-BUKRS'.
  if bkn00-bukrs(1) ne nodata.
    ft-fval = bkn00-bukrs.
  else.
    ft-fval = space.
  endif.
  append ft.

  clear ft.
  ft-fnam = 'RF02D-VKORG'.
  if bkn00-vkorg(1) ne nodata.
    ft-fval = bkn00-vkorg.
  else.
    ft-fval = space.
  endif.
  append ft.

  clear ft.
  ft-fnam = 'RF02D-VTWEG'.
  if bkn00-vtweg(1) ne nodata.
    ft-fval = bkn00-vtweg.
  else.
    ft-fval = space.
  endif.
  append ft.

  clear ft.
  ft-fnam = 'RF02D-SPART'.
  if bkn00-spart(1) ne nodata.
    ft-fval = bkn00-spart.
  else.
    ft-fval = space.
  endif.
  append ft.
endform.                    "KEY_FELDER_FUELLEN

*eject
*-----------------------------------------------------------------------
*        Form  KNA1_ZUSATZDATEN
*-----------------------------------------------------------------------
*        KNA1-Zusatzdaten übertragen (neu zu 2.1B)
*-----------------------------------------------------------------------
form kna1_zusatzdaten.

*------- Wurden KNA1-Zusatzdaten übergeben ? --------------------------
  kna1_zuda = 'X'.
  check bkna1-katr1(1) ne nodata
  or    bkna1-katr2(1) ne nodata
  or    bkna1-katr3(1) ne nodata
  or    bkna1-katr4(1) ne nodata
  or    bkna1-katr5(1) ne nodata
  or    bkna1-katr6(1) ne nodata
  or    bkna1-katr7(1) ne nodata
  or    bkna1-katr8(1) ne nodata
  or    bkna1-katr9(1) ne nodata
  or    bkna1-katr10(1) ne nodata
  or    bkna1-kdkg1(1) ne nodata
  or    bkna1-kdkg2(1) ne nodata
  or    bkna1-kdkg3(1) ne nodata
  or    bkna1-kdkg4(1) ne nodata
  or    bkna1-kdkg5(1) ne nodata.

*------- KNA1-Zusatzdaten übertragen ----------------------------------
  perform okcode_zuda.
  perform dynpro_fuellen using 'Z100'.
* perform okcode_f03.
  perform dynpro_begin using rep_name_d dyntab-dynnr.
  xdytr = 'X'.
endform.                    "KNA1_ZUSATZDATEN

*eject
*-----------------------------------------------------------------------
*        Form  KNVA_ZEITEN_BEARBEITEN
*-----------------------------------------------------------------------
*        Warenannahmezeiten prüfen/Übertragen
*-----------------------------------------------------------------------
form knva_zeiten_bearbeiten.

*------- Wurden Warenannahmezeiten oder eine ID übergeben? ------------
  if    xbknva-wanid(1) ne nodata    "mi/note 205297
  or    xbknva-moab1(1) ne nodata
  or    xbknva-mobi1(1) ne nodata
  or    xbknva-moab2(1) ne nodata
  or    xbknva-mobi2(1) ne nodata
  or    xbknva-diab1(1) ne nodata
  or    xbknva-dibi1(1) ne nodata
  or    xbknva-diab2(1) ne nodata
  or    xbknva-dibi2(1) ne nodata
  or    xbknva-miab1(1) ne nodata
  or    xbknva-mibi1(1) ne nodata
  or    xbknva-miab2(1) ne nodata
  or    xbknva-mibi2(1) ne nodata
  or    xbknva-doab1(1) ne nodata
  or    xbknva-dobi1(1) ne nodata
  or    xbknva-doab2(1) ne nodata
  or    xbknva-dobi2(1) ne nodata
  or    xbknva-frab1(1) ne nodata
  or    xbknva-frbi1(1) ne nodata
  or    xbknva-frab2(1) ne nodata
  or    xbknva-frbi2(1) ne nodata
  or    xbknva-saab1(1) ne nodata
  or    xbknva-sabi1(1) ne nodata
  or    xbknva-saab2(1) ne nodata
  or    xbknva-sabi2(1) ne nodata
  or    xbknva-soab1(1) ne nodata
  or    xbknva-sobi1(1) ne nodata
  or    xbknva-soab2(1) ne nodata
  or    xbknva-sobi2(1) ne nodata.

*------- Delete-Flag gesetzt? -----------------------------------------
    if xbknva-xdele eq 'X'.
      perform log_msg using c_msgid 'I' '180'
       xbknva-ablad space space space .
      perform log_msg using c_msgid 'I' '181'
       space space space space .
      exit.
    endif.

*------- WANID prüfen,ggf. Zeiten übernehmen --------------------------
    if  xbknva-wanid(1) ne nodata
    and xbknva-wanid    ne space.
      if tvwa-wanid ne xbknva-wanid.
        select single * from tvwa where wanid = xbknva-wanid.
        if sy-subrc ne 0.
          perform log_msg using c_msgid 'I' '182'
           xbknva-ablad 'TVWA' space space .
          perform log_msg using c_msgid 'I' '181'
           space space space space .
        else.
          perform log_msg using c_msgid 'I' '183'
           xbknva-ablad xbknva-wanid space space .
          perform log_msg using c_msgid 'I' '188'
           'TVWA' space space space .
          perform log_msg using c_msgid 'I' '184'
           space space space space .
        endif.
      else.
        perform log_msg using c_msgid 'I' '183'
         xbknva-ablad xbknva-wanid space space .
        perform log_msg using c_msgid 'I' '184'
         space space space space .
      endif.
    endif.

*------- neue Annahmezeiten-ID und /oder Zeiten übertragen ------------
    perform okcode_knva.
    perform dynpro_fuellen using '1340'.
* perform okcode_f03.                      "S11K144454/3.0
  endif.                             "mi/note 205297
  perform dynpro_begin using rep_name_d dyntab-dynnr.
  xdytr = 'X'.
endform.                    "KNVA_ZEITEN_BEARBEITEN

*eject
*-----------------------------------------------------------------------
*        Form  KNVV_ZUSATZDATEN
*-----------------------------------------------------------------------
*        KNVV-Zusatzdaten übertragen (neu zu 2.1B)
*-----------------------------------------------------------------------
form knvv_zusatzdaten.

*------- Wurden KNVV-Zusatzdaten übergeben ? --------------------------
  knvv_zuda = 'X'.
  check bknvv-kvgr1(1) ne nodata
  or    bknvv-kvgr2(1) ne nodata
  or    bknvv-kvgr3(1) ne nodata
  or    bknvv-kvgr4(1) ne nodata
  or    bknvv-kvgr5(1) ne nodata.

*------- KNA1-Zusatzdaten übertragen ----------------------------------
  perform okcode_zuda.
  perform dynpro_fuellen using 'Z200'.
* perform okcode_f03.
  perform dynpro_begin using rep_name_d dyntab-dynnr.
  xdytr = 'X'.
endform.                    "KNVV_ZUSATZDATEN

*eject
*-----------------------------------------------------------------------
*        Form  KOPFSATZ_LESEN
*-----------------------------------------------------------------------
*        Kopfdaten in Workarea lesen
*-----------------------------------------------------------------------
form kopfsatz_lesen.
  clear wa.
  read dataset ds_name into wa.

*------- End of File erreicht ? --> Exit -------------------------------
  if sy-subrc ne 0.
    xeof = 'X'.
    exit.
  endif.

  if wa(1) ne '1'.
    perform log_msg using c_msgid 'I' '101'
     group_count space space space .
    perform log_msg using c_msgid 'I' '015'
     space space space space .
    perform dump_wa using 'BGR00'.
    perform log_abort using c_msgid '013'.
  endif.
endform.                    "KOPFSATZ_LESEN

*eject
*-----------------------------------------------------------------------
*        Form  LIZENZEN_PRUEFEN
*-----------------------------------------------------------------------
*        Lizenzdaten auf Vollständigkeit prüfen
*-----------------------------------------------------------------------
form lizenzen_pruefen.
  loop at xbknvl.
    if xbknvl-aland ne nodata
    or xbknvl-tatyp ne nodata
    or xbknvl-licnr ne nodata
    or xbknvl-belic ne nodata
    or xbknvl-datab ne nodata
    or xbknvl-datbi ne nodata.
      if xbknvl-aland = nodata
      or xbknvl-aland = space
      or xbknvl-tatyp = nodata
      or xbknvl-tatyp = space
      or xbknvl-licnr = nodata
      or xbknvl-licnr = space.
        if  bkna1-name1 ne space
        and bkna1-name1 ne nodata.
          perform log_msg using c_msgid 'I' '194'
           bkna1-name1 space space space .
        else.
          perform log_msg using c_msgid 'I' '194'
           bkn00-kunnr space space space .
        endif.
        perform log_msg using c_msgid 'I' '195'
         xbknvl-aland xbknvl-tatyp xbknvl-licnr space .
        perform log_msg using c_msgid 'I' '196'
         xbknvl-belic xbknvl-datab xbknvl-datbi space .
        delete xbknvl.
      endif.
    endif.
  endloop.
endform.                    "LIZENZEN_PRUEFEN

*eject
*-----------------------------------------------------------------------
*        Form  MAPPE_OEFFNEN
*-----------------------------------------------------------------------
*        Öffnen der BDC-Queue für Datentransfer
*-----------------------------------------------------------------------
form mappe_oeffnen.
  call function 'BDC_OPEN_GROUP'
    exporting
      client   = bgr00-mandt
      group    = bgr00-group
      holddate = bgr00-start
      keep     = bgr00-xkeep
      user     = bgr00-usnam.
  perform log_msg using c_msgid 'I' '007'
   group_count bgr00-group space space .
  group_open = 'X'.
endform.                    "MAPPE_OEFFNEN

*eject
*-----------------------------------------------------------------------
*        Form  mappe_pruefen_oeffnen
*-----------------------------------------------------------------------
*        Prüfen/Bearbeiten der Daten im Mappenvorsatz.
*        Sonderzeichen für NODATA bestimmen
*        Öffnen der BDC-Queue für Datentransfer
*        Initialstrukturen mit NODATA erzeugen
*-----------------------------------------------------------------------
form mappe_pruefen_oeffnen.
  clear bgr00.
  bgr00 = wa.
  group_count = group_count + 1.

*------- Mappenname gesetzt? -------------------------------------------
  if bgr00-group = space.
    perform log_msg using c_msgid 'I' '011'
     group_count space space space .
    perform log_msg using c_msgid 'I' '015'
     space space space space .
    perform dump_wa using 'BGR00'.
    perform log_abort using c_msgid '013'.
  endif.

*------- Mandant gesetzt/ richtig gesetzt ? ----------------------------
  if bgr00-mandt is initial.
    perform log_msg using c_msgid 'I' '005'
     group_count space space space .
    perform log_msg using c_msgid 'I' '015'
     space space space space .
    perform dump_wa using 'BGR00'.
    perform log_abort using c_msgid '013'.
  endif.
  if bgr00-mandt ne sy-mandt.
    perform log_msg using c_msgid 'I' '006'
     group_count bgr00-mandt sy-mandt space .
    perform log_msg using c_msgid 'I' '015'
     space space space space .
    perform dump_wa using 'BGR00'.
    perform log_abort using c_msgid '013'.
  endif.

*------- Username gesetzt ----------------------------------------------
  if bgr00-usnam = space.
    perform log_msg using c_msgid 'I' '009'
     group_count space space space .
    perform log_msg using c_msgid 'I' '015'
     space space space space .
    perform dump_wa using 'BGR00'.
    perform log_abort using c_msgid '013'.
  endif.

*------- Sonderzeichen NODATA prüfen / übernehmen ---------------------
  if bgr00-nodata(1) = space.
    nodata = c_nodata.
  else.
    if bgr00-nodata between '0' and '9'
    or bgr00-nodata between 'A' and 'I'
    or bgr00-nodata between 'J' and 'R'
    or bgr00-nodata between 'S' and 'Z'
    or bgr00-nodata between 'a' and 'i'
    or bgr00-nodata between 'j' and 'r'
    or bgr00-nodata between 's' and 'z'.
      perform log_msg using c_msgid 'I' '010'
       group_count bgr00-nodata space space .
      perform log_msg using c_msgid 'I' '015'
       space space space space .
      perform dump_wa using 'BGR00'.
      perform log_abort using c_msgid '013'.
    endif.
    nodata = bgr00-nodata.
  endif.
  perform log_msg using c_msgid 'I' '012'
   group_count nodata space space .

*------- Vorinitialisierung für die FORM-Routine "CHECK_STRUCTURE_EMPTY"
  g_empty_data = ' '.
  g_empty_data+1 = nodata.

*------- Mappe öffnen --------------------------------------------------
  if  fl_check = space
  and xcall    = space.
    perform mappe_oeffnen.
  endif.

*------- Flags, Zähler initialisieren ----------------------------------
  clear: xnewg, trans_count, satz2_count.

*------- Initialstrukturen erzeugen (NODATA-Sonderzeichen ) ------------
  if nodata ne nodata_old.
    perform init_strukturen_erzeugen(rfbidei0) using nodata.
    perform init_bkna1(rfbidei0) using i_bkna1.
    perform init_bknat(rfbidei0) using i_bknat.             " \TP 857698
    perform init_bknbk(rfbidei0) using i_bknbk.
    perform init_bknbk_iban(rfbidei0) using i_bknbk_iban.   " \TP 957820
    perform init_bknza(rfbidei0) using i_bknza.             " \TP 857698

    perform init_bknb1(rfbidei0) using i_bknb1.
    perform init_bknb5(rfbidei0) using i_bknb5.
    perform init_bknbw(rfbidei0) using i_bknbw.             " \TP 857698

    perform init_bknka(rfbidei0) using i_bknka.
    perform init_bknkk(rfbidei0) using i_bknkk.

    perform init_bknvv(rfbidei0) using i_bknvv.
    perform init_bknex(rfbidei0) using i_bknex.
    perform init_bknva(rfbidei0) using i_bknva.
    perform init_bknvd(rfbidei0) using i_bknvd.
    perform init_bknvi(rfbidei0) using i_bknvi.
    perform init_bknvk(rfbidei0) using i_bknvk.
    perform init_bknvl(rfbidei0) using i_bknvl.
    perform init_bknvp(rfbidei0) using i_bknvp.
*mi/46a begin
    perform init_bwrf12(rfbidei0) using i_bwrf12.
    perform init_bwrf4(rfbidei0) using i_bwrf4.
*mi/46a end
    perform init_biaddr2(rfbidei0) using i_biaddr2.         "ms/46a
    perform init_bknbw(rfbidei0) using i_bknbw.      "\BE zu 4.70 erg.
    nodata_old = nodata.
  endif.
endform.                    "MAPPE_PRUEFEN_OEFFNEN

*eject
*-----------------------------------------------------------------------
*        Form  MAPPE_SCHLIESSEN
*-----------------------------------------------------------------------
form mappe_schliessen.
  if fl_check = space.
    if group_open = 'X'.
      call function 'BDC_CLOSE_GROUP'.
      perform log_msg using c_msgid 'I' '008'
       group_count bgr00-group space space .
      clear group_open.
    endif.
  else.
    perform log_msg using c_msgid 'I' '019'
     group_count bgr00-group space space .
  endif.
* Delete the transfer file, which was created internal by RFBIDE20
  if xeof = 'X' and
     lds_name = 'FI_COPY_COMPANY_CODE_DATA_FOR_CUSTOMERS'.
    delete dataset ds_name.
  endif.
endform.                    "MAPPE_SCHLIESSEN

*eject
*-----------------------------------------------------------------------
*        Form  MAPPEN_WECHSEL
*-----------------------------------------------------------------------
*        Neuer Mappenvorsatz wurde gesendet.
*        Aktuelle Mappe wird geschlosssen, neue Mappe geöffnet.
*-----------------------------------------------------------------------
form mappen_wechsel.
  perform mappe_schliessen.
  perform mappe_pruefen_oeffnen.
endform.                    "MAPPEN_WECHSEL

*eject
*-----------------------------------------------------------------------
*        Form  MESSAGE_AUSGEBEN
*-----------------------------------------------------------------------
*        'Call Transaction .. Using ..'
*        Meldung ins Protokoll ausgeben.
*-----------------------------------------------------------------------
form message_call_transaction.

*------- neuer Eintrag aus T100 ----------------------------------------
  if t100-sprsl ne sy-langu
  or t100-arbgb ne sy-msgid
  or t100-msgnr ne sy-msgno.
    clear: text, text1, text2, text3, msgvn.
    select single * from t100 where sprsl = sy-langu
                              and   arbgb = sy-msgid
                              and   msgnr = sy-msgno.
    if sy-subrc = 0.
      text = t100-text.
      do 4 times varying msgvn from sy-msgv1 next sy-msgv2.
        if text ca '$'.
          replace '$' with msgvn into text.
          condense text.
        endif.
        if text ca '&'.
          replace '&' with msgvn into text.
          condense text.
        endif.
      enddo.
      text1 = text(40).
      text2 = text+40(40).
      text3 = text+80(40).
      perform log_msg using c_msgid 'I' '130'
       trans_count text1 text2 text3 .
    else.
      perform log_msg using c_msgid 'I' '131'
       trans_count sy-msgno sy-msgv1 sy-msgv2 .
    endif.

*------- gleicher Eintrag aus T100 -------------------------------------
  else.
    if text ne space.
      clear: text, text1, text2, text3, msgvn.
      text = t100-text.
      do 4 times varying msgvn from sy-msgv1 next sy-msgv2.
        if text ca '$'.
          replace '$' with msgvn into text.
          condense text.
        endif.
        if text ca '&'.
          replace '&' with msgvn into text.
          condense text.
        endif.
      enddo.
      text1 = text(40).
      text2 = text+40(40).
      text3 = text+80(40).
      perform log_msg using c_msgid 'I' '130'
       trans_count text1 text2 text3 .
    else.
      perform log_msg using c_msgid 'I' '131'
       trans_count sy-msgno sy-msgv1 sy-msgv2 .
    endif.
  endif.
endform.                    "MESSAGE_CALL_TRANSACTION

*eject
*-----------------------------------------------------------------------
*        Form  OKCODE_ATTR
*-----------------------------------------------------------------------
*        OK-Code 'ATTR' für Attribute der Partner übergeben
*-----------------------------------------------------------------------
form okcode_attr.
  check fl_check = space.

  clear ft.
  ft-fnam = 'BDC_OKCODE'.
  ft-fval = 'ATTR'.
  append ft.
endform.                    "OKCODE_ATTR

*eject
*-----------------------------------------------------------------------
*        Form  OKCODE_BACK
*-----------------------------------------------------------------------
*        OK-Code 'BACK': 'Popup beenden'.
*-----------------------------------------------------------------------
form okcode_back.
  check fl_check = space.

  clear ft.
  ft-fnam = 'BDC_OKCODE'.
  ft-fval = '/13'.
  append ft.
endform.                    "OKCODE_BACK

*eject
*-----------------------------------------------------------------------
*        Form  OKCODE_BANK
*-----------------------------------------------------------------------
*        OK-Code F16 'Bankanschrift' übergeben
*-----------------------------------------------------------------------
form okcode_bank.
  check fl_check = space.

  clear ft.
  ft-fnam = 'BDC_OKCODE'.
  ft-fval = '/16'.
  append ft.
endform.                    "OKCODE_BANK

*eject
*-----------------------------------------------------------------------
*        Form  OKCODE_F03
*-----------------------------------------------------------------------
*        OK-Code F03 'Zurück' übergeben (call-Dynpros ohne DREQ)
*-----------------------------------------------------------------------
form okcode_f03.
  check fl_check = space.

  clear ft.
  ft-fnam = 'BDC_OKCODE'.
  ft-fval = '/03'.
  append ft.
endform.                                                    "OKCODE_F03

*eject
*-----------------------------------------------------------------------
*        Form  OKCODE_F09
*-----------------------------------------------------------------------
*        OK-Code F09 übergeben (z.B. Besuchszeiten KNVK)
*-----------------------------------------------------------------------
form okcode_f09.
  check fl_check = space.

  clear ft.
  ft-fnam = 'BDC_OKCODE'.
  ft-fval = '/09'.
  append ft.
endform.                                                    "OKCODE_F09

*eject
*-----------------------------------------------------------------------
*        Form  OKCODE_F11
*-----------------------------------------------------------------------
*        OK-Code F11 'Sichern' übergeben
*-----------------------------------------------------------------------
form okcode_f11.
  check fl_check = space.

  clear ft.
  ft-fnam = 'BDC_OKCODE'.
  ft-fval = '/11'.
  append ft.
endform.                                                    "OKCODE_F11

*eject
*-----------------------------------------------------------------------
*        Form  OKCODE_F14
*-----------------------------------------------------------------------
*        OK-Code F14 'Zeile löschen' übergeben
*-----------------------------------------------------------------------
form okcode_f14.
  check fl_check = space.

  clear ft.
  ft-fnam = 'BDC_OKCODE'.
  ft-fval = '/14'.
  append ft.
endform.                                                    "OKCODE_F14

*eject
*-----------------------------------------------------------------------
*        Form  OKCODE_F16
*-----------------------------------------------------------------------
*        OK-Code F16 'Branchencodes' übergeben
*-----------------------------------------------------------------------
form okcode_f16.
  check fl_check = space.

  clear ft.
  ft-fnam = 'BDC_OKCODE'.
  ft-fval = '/16'.
  append ft.
endform.                                                    "OKCODE_F16

*eject
*-----------------------------------------------------------------------
*        Form  OKCODE_KNVA
*-----------------------------------------------------------------------
*        OK-Code F02 'Warenannahmezeiten' übergeben
*-----------------------------------------------------------------------
form okcode_knva.
  check fl_check = space.

  clear ft.
  ft-fnam = 'BDC_OKCODE'.
  ft-fval = '/02'.
  append ft.
endform.                    "OKCODE_KNVA

*mi/46a begin
*-----------------------------------------------------------------------
*        Form  OKCODE_F19
*-----------------------------------------------------------------------
*        OK-Code F19 'Empfangsstellen' übergeben
*-----------------------------------------------------------------------
form okcode_f19.
  check fl_check = space.

  clear ft.
  ft-fnam = 'BDC_OKCODE'.
  ft-fval = '/19'.
  append ft.
endform.                                                    "OKCODE_F19

*-----------------------------------------------------------------------
*        Form  OKCODE_F25
*-----------------------------------------------------------------------
*        OK-Code F25 'Abteilungen' übergeben
*-----------------------------------------------------------------------
form okcode_f25.
  check fl_check = space.

  clear ft.
  ft-fnam = 'BDC_OKCODE'.
  ft-fval = '/25'.
  append ft.
endform.                                                    "OKCODE_F25
*mi/46a end

*eject
*-----------------------------------------------------------------------
*        Form  OKCODE_KNVK
*-----------------------------------------------------------------------
*        OK-Code F02 'Partner-Detail' übergeben
*-----------------------------------------------------------------------
form okcode_knvk.
  check fl_check = space.

  clear ft.
  ft-fnam = 'BDC_OKCODE'.
  ft-fval = '/02'.
  append ft.
endform.                    "OKCODE_KNVK

*eject
*-----------------------------------------------------------------------
*        Form  OKCODE_KNVL
*-----------------------------------------------------------------------
*        OK-Code F02 'Lizenzen' übergeben
*-----------------------------------------------------------------------
form okcode_knvl.
  check fl_check = space.

  clear ft.
  ft-fnam = 'BDC_OKCODE'.
  ft-fval = '/02'.
  append ft.
endform.                    "OKCODE_KNVL

*eject
*-----------------------------------------------------------------------
*        Form  OKCODE_KNZA
*-----------------------------------------------------------------------
*        OK-Code 'KNZA': 'Abw. Regulierer'.
*-----------------------------------------------------------------------
form okcode_knza.
  check fl_check = space.

  clear ft.
  ft-fnam = 'BDC_OKCODE'.
  ft-fval = 'KNZA'.
  append ft.
endform.                    "OKCODE_KNZA
*eject
*-----------------------------------------------------------------------
*        Form  OKCODE_POSZ
*-----------------------------------------------------------------------
*        OK-Code 'POSZ': 'Positionieren auf 1.Zeile'.
*-----------------------------------------------------------------------
form okcode_posz.
  check fl_check = space.

  clear ft.
  ft-fnam = 'BDC_OKCODE'.
  ft-fval = '/06'.
  append ft.
endform.                    "OKCODE_POSZ

*-----------------------------------------------------------------------
*        Form  OKCODE_ZUDA
*-----------------------------------------------------------------------
*        OK-Code 'ZUDA': Zusatzdaten übergeben (KNA1 und/oder KNVV)
*-----------------------------------------------------------------------
form okcode_zuda.
  check fl_check = space.

  clear ft.
  ft-fnam = 'BDC_OKCODE'.
  ft-fval = '=ZUDA'.
  append ft.
endform.                    "OKCODE_ZUDA

*eject
*-----------------------------------------------------------------------
*        Form  parnr_uepar_pruefen
*-----------------------------------------------------------------------
*        Nur bis Release 2.1A:
*        Beim Hinzufügen darf KEINE Partnernummer übergeben werden
*        Ab Release 2.1A dürfen Nummern übergeben werden!
*-----------------------------------------------------------------------
form parnr_uepar_pruefen.
  if  bkn00-tcode  = 'XD01'
  and xbknvk-parnr ne space
  and xbknvk-parnr(1) ne nodata.
    perform log_msg using c_msgid 'I' '187'
     bkna1-name1 xbknvk-parnr space space .
    perform log_msg using c_msgid 'I' '189'
     xbknvk-name1 space space space .
    perform log_msg using c_msgid 'I' '186'
     space space space space .
    clear xbknvk-parnr.
    xbknvk-parnr(1) = nodata.
  endif.
  if  bkn00-tcode  = 'XD01'
  and xbknvk-uepar ne space
  and xbknvk-uepar(1) ne nodata.
    perform log_msg using c_msgid 'I' '185'
     bkna1-name1 space space space .
    perform log_msg using c_msgid 'I' '189'
     xbknvk-uepar space space space .
    perform log_msg using c_msgid 'I' '186'
     space space space space .
    clear xbknvk-uepar.
    xbknvk-uepar(1) = nodata.
  endif.
  modify xbknvk.
endform.                    "PARNR_UEPAR_PRUEFEN

*eject
*-----------------------------------------------------------------------
*        Form  STEUERDATEN_PRUEFEN
*-----------------------------------------------------------------------
*        Steuerdaten: Land und Steuertyp MÜSSEN angegeben sein
*-----------------------------------------------------------------------
form steuerdaten_pruefen.
  loop at xbknvi.
    if xbknvi-aland ne nodata
    or xbknvi-tatyp ne nodata
    or xbknvi-taxkd ne nodata.
      if xbknvi-aland = nodata
      or xbknvi-aland = space.
        if  bkna1-name1 ne space
        and bkna1-name1 ne nodata.
          perform log_msg using c_msgid 'I' '190'
           bkna1-name1 xbknvi-tatyp xbknvi-taxkd space .
        else.
          perform log_msg using c_msgid 'I' '190'
           bkn00-kunnr xbknvi-tatyp xbknvi-taxkd space .
        endif.
        perform log_msg using c_msgid 'I' '193'
         space space space space .
        delete xbknvi.
      else.
        if xbknvi-tatyp = nodata
        or xbknvi-tatyp = space.
          if  bkna1-name1 ne space
          and bkna1-name1 ne nodata.
            perform log_msg using c_msgid 'I' '191'
             bkna1-name1 xbknvi-aland xbknvi-taxkd space .
          else.
            perform log_msg using c_msgid 'I' '191'
             bkn00-kunnr xbknvi-aland xbknvi-taxkd space .
          endif.
          perform log_msg using c_msgid 'I' '193'
           space space space space .
          delete xbknvi.
        else.
          if xbknvi-taxkd = nodata
          or xbknvi-taxkd = space.
            if  bkna1-name1 ne space
            and bkna1-name1 ne nodata.
              perform log_msg using c_msgid 'I' '192'
               bkna1-name1 xbknvi-aland xbknvi-tatyp space .
            else.
              perform log_msg using c_msgid 'I' '192'
               bkn00-kunnr xbknvi-aland xbknvi-tatyp space .
            endif.
            perform log_msg using c_msgid 'I' '193'
             space space space space .
            delete xbknvi.
          endif.
        endif.
      endif.
    endif.
  endloop.
endform.                    "STEUERDATEN_PRUEFEN

*eject
*-----------------------------------------------------------------------
*        Form  TRANSAKTION_SENDEN
*-----------------------------------------------------------------------
form transaktion_senden.
  check fl_check = space.

*------- Batch-Input erstellen -----------------------------------------
  if xcall = space.
    call function 'BDC_INSERT'
      exporting
        tcode     = bkn00-tcode
      tables
        dynprotab = ft.

*------- zunächst 'Call Transaction'; nur bei Fehlern Batch-Input ------
  else.
    call transaction bkn00-tcode using  ft
                                 mode   anz_mode
                                 update update.
    subrc = sy-subrc.
    perform message_call_transaction.
    if subrc ne 0.
      if group_open ne 'X'.
        perform mappe_oeffnen.
      endif.
      call function 'BDC_INSERT'
        exporting
          tcode     = bkn00-tcode
        tables
          dynprotab = ft.
    endif.
  endif.

*------- Commit Work? ------------------------------------------------
  commit_count = commit_count + 1.
  if commit_count = max_commit.
    commit work.
    clear commit_count.
  endif.
endform.                    "TRANSAKTION_SENDEN
*eject
*-----------------------------------------------------------------------
*        FORM  WA_UEBERTRAGEN                                          *
*-----------------------------------------------------------------------
*        Daten aus Workareas in Strukturen übertragen.
*        Prüfung, ob der entrprechende Bereich bearbeitet werden kann.
*        D.h.: Die entsprechenden Kennz. XASEG, XBUKR, XVKOR
*              müssen sitzen.
*        BKNA1, BKNB1, BKNB5, BKNVV dürfen je Transaktion
*              nur einmal übergeben werden.
*        BKNBK, BKNZA (Multiple Tabelle) darf mehrmals übergeben werden,
*        ebenso BKNVA/D/I/K/L/P/EX.
*-----------------------------------------------------------------------
form wa_uebertragen.
* ADD_ON-Aenderungen - B
  data: l_structname   type tabname,
        l_trans_count  type i,
        l_record_count type i,
        l_checked      type boole-boole,
        l_subrc        type sysubrc,
        l_msgid        type symsgid,
        l_msgno        type symsgno,
        l_msgv1        type symsgv,
        l_msgv2        type symsgv,
        l_msgv3        type symsgv,
        l_msgv4        type symsgv.
* ADD_ON-Aenderungen - E
  data: l_t005  type t005,    " Landeseinstellung           " \TP 957820
        l_land1 type land1,   " Laenderschluessel           " \TP 957820
        l_xtech type xfeld.   " X = KtoNr ist technisch     " \TP 957820

  l_structname = wa+1(30).
  case l_structname.

*-----------------------------------------------------------------------
*        BKNA1 Allgemeine Daten
*-----------------------------------------------------------------------
    when 'BKNA1'.
* Daten werden wegen der Feldlänge-Erweiterung des Feldes SPRAS
* von 1B (<4.0) auf 2B verschoben
      if os_xon = xon.
        shift wa by 1 places right.
        wa(339) = wa+1(338).
      endif.
      if bi-xaseg ne 'X'.
        perform log_msg using c_msgid 'I' '104'
         trans_count bkn00-tcode space space .
        perform log_msg using c_msgid 'I' '125'
         'BKNA1' space space space .
        perform dump_bkn00.
        perform log_msg using c_msgid 'I' '017'
         space space space space .
        bkna1 = wa.
        perform dump_wa using 'BKNA1'.
        perform log_abort using c_msgid '013'.
      endif.
      if bkna1 ne i_bkna1.
        perform log_msg using c_msgid 'I' '107'
         trans_count satz2_count 'BKNA1' space .
        perform dump_bkn00.
        perform log_msg using c_msgid 'I' '017'
         space space space space .
        bkna1 = wa.
        perform dump_wa using 'BKNA1'.
        perform log_abort using c_msgid '013'.
      endif.
* Konvertieren der internen 1-stelligen Sprachenlänge in die
* Ausgabelänge 2B.
      if os_xon = xon.
        translate wa+337(1) to upper case.
      endif.   "vor 4.0 waren nur Großbuchstb. für die Sprache möglich

      bkna1 = wa.
      perform bkna1_erweiterung_pruefen.

*------- Keine A-Seg. Daten => keine A-Seg. Dynpros --------------------
      if xt020-aktyp = 'H'.
        bkna1-sende = nodata.
        if bkna1 = i_bkna1.
* MS Hinweis 446677 begin
          if  gv_consumer_account_group is initial
          and gv_consumer_not_exist is initial.
            select single ktokd from t077d
                   into gv_consumer_account_group
                   where dear6 = 'X'.
            if sy-subrc <> 0.
              gv_consumer_not_exist = 'X'.
            endif.
          endif.
          if not ( ( not gv_consumer_account_group is initial
                   and bkn00-ktokd = gv_consumer_account_group )
                   or kna1-dear6 = 'X' ).
* MS Hinweis 446677 end
            clear bi-xaseg.
            delete dyntab where dtype = 'A'.
          endif.
        endif.
      endif.

* begin of j_1a
*-----------------------------------------------------------------------
*        BKNAT Steuerkategorien
*-----------------------------------------------------------------------
    when 'BKNAT'.
      if xt020-funcl ca 'SL'.
        perform log_msg using c_msgid 'I' '110'
         trans_count 'BKNAT' space space .
        perform dump_bkn00.
        xbknat = i_bknat.
        xbknat = wa.
        perform dump_bknat.
        perform log_abort using c_msgid '013'.
      endif.
      if bi-xaseg ne 'X'.
        perform log_msg using c_msgid 'I' '104'
         trans_count bkn00-tcode space space .
        perform log_msg using c_msgid 'I' '125'
         'BKNAT' space space space .
        perform dump_bkn00.
        xbknat = i_bknat.
        xbknat = wa.
        perform dump_bknat.
        perform log_abort using c_msgid '013'.
      endif.

      xbknat = i_bknat.
      xbknat = wa.

      perform check_structure_empty using 'BKNAT'.
      check g_empty is initial.
      append xbknat.
* end of j_1a

*-----------------------------------------------------------------------
*        BKNBK Bankverbindungen
*-----------------------------------------------------------------------
    when 'BKNBK'.
      if xt020-funcl ca 'SL'.
        perform log_msg using c_msgid 'I' '110'
         trans_count 'BKNBK' space space .
        perform dump_bkn00.
        xbknbk = i_bknbk.
        xbknbk = wa.
        perform dump_bknbk.
        perform log_abort using c_msgid '013'.
      endif.
      if bi-xaseg ne 'X'.
        perform log_msg using c_msgid 'I' '104'
         trans_count bkn00-tcode space space .
        perform log_msg using c_msgid 'I' '125'
         'BKNBK' space space space .
        perform dump_bkn00.
        xbknbk = i_bknbk.
        xbknbk = wa.
        perform dump_bknbk.
        perform log_abort using c_msgid '013'.
      endif.
      xbknbk = i_bknbk.
      xbknbk = wa.
* \TP 957820 - Begin
      call function 'FI_TECH_ACCNO_CHECK_TRY'
        exporting i_bankn = xbknbk-bankn
        importing e_xtech = l_xtech.
      if l_xtech = 'X'.
        if xale = space.
          perform log_msg using c_msgid 'I' '627'
                                trans_count xbknbk-bankn 'BKNBK' ''.
        else. " i.e. xale = 'X'
          message i627 with bkn00-tcode xbknbk-bankn 'BKNBK'.
        endif. " xale = space
        exit. " form, i.e. ignore technical bank account number in BKNBK
      endif. " l_xtech = 'X'
* \TP 957820 - End
      perform bknbk_erweiterung_pruefen.
      perform check_structure_empty using 'BKNBK'.
      check g_empty is initial.
      if  xbknbk-dummy(1) ne nodata
      and xbknbk-dummy    ne space.
        xbknbk-provz = xbknbk-dummy.
        xbknbk-dummy = nodata.
      endif.
* begin of note 1686666
* IBAN mit Kontonummer
* Falls eine IBAN und keine Kontonummer in BKNBK übergeben wird,
* soll Eintrag wie IBAN ohne Kontonummer behandelt werden.
* Deshalb werden die Daten dann in XBKNBK_IBAN geschoben.
      IF XBKNBK-IBAN(1) ne NODATA and
         XBKNBK-BANKN(1) = NODATA.
         CALL FUNCTION 'FUNCTION_EXISTS'
           EXPORTING
             funcname           = 'FI_TECH_ACCNO_CHECK'
           EXCEPTIONS
             function_not_exist = 1
             others             = 2.
* IBAN ohne Kontonummer existiert nicht, IBAN ignorieren.
         if sy-subrc <> 0 or xale = 'X'.
           message i626 with bkn00-tcode.
           XBKNBK-IBAN(1) = NODATA.
           APPEND XBKNBK.
         endif.
         XBKNBK_IBAN = I_BKNBK_IBAN.
         move-corresponding XBKNBK to XBKNBK_IBAN.
         if xbknbk_iban-banks <> nodata and xbknbk_iban-banks <> space.
           l_land1 = xbknbk_iban-banks.
         else.
           l_land1 = xbknbk_iban-iban(2).
         endif.
         perform read_t005 using l_land1 changing l_t005.
         if l_t005 is initial.
           if xale = space.
             perform log_msg using c_msgid 'I' '221' l_land1 '' '' ''.
             perform dump_bkn00.
             perform dump_bknbk.
             perform log_abort using c_msgid '013'.
           else. " i.e. xale = 'X'
             message i221 with l_land1 raising no_bknbk_bec_key2.
           endif. " xale = space
         endif. " l_t005 is initial
         if l_t005-bnkey = '2'.
*       IBAN ohne Kontonummer ist bei dieser Landeseinstellung nicht
*       zulaessig.
          if xale = space.
            perform log_msg using c_msgid 'I' '631' l_land1 '' '' ''.
            perform dump_bkn00.
            perform dump_bknbk.
            perform log_abort using c_msgid '013'.
          else. " i.e. xale = 'X'
            message i631 with l_land1 raising no_bknbk_bec_bnkey.
          endif. " xale = space
        endif. " l_t005-bnkey = '2'
        append xbknbk_iban.
      ELSE.
        append xbknbk.
      ENDIF.
* End of note 1686666
* \TP 957820 - Begin
*-----------------------------------------------------------------------
*        BKNBK_IBAN IBAN ohne Kontonummer
*-----------------------------------------------------------------------
    when 'BKNBK_IBAN'.
*     Ueberprueft, of die neue Funktionalitaet "IBAN ohne Kontonummer"
*     aus der SAP_ABA-Schicht (Support Package 10 SAPKA70010) im System
*     vorhanden ist.
      call function 'FUNCTION_EXISTS'
        exporting
          funcname = 'FI_TECH_ACCNO_CHECK'
        exceptions
          function_not_exist = 1
          others             = 2.
      if sy-subrc <> 0 or xale = 'X'.
*       Neue Funktionalitaet wird nicht unterstuetzt
        message i626 with bkn00-tcode.
        exit. " form, i.e. ignore the BKNBK_IBAN data
      endif.
      if xt020-funcl ca 'SL'.
        if xale = space.
          perform log_msg using c_msgid 'I' '110'
                                trans_count 'BKNBK_IBAN' '' ''.
          perform dump_bkn00.
          xbknbk_iban = i_bknbk_iban.
          xbknbk_iban = wa.
          perform dump_bknbk_iban.
          perform log_abort using c_msgid '013'.
        else. " i.e. xale = 'X'
          message i110 with bkn00-tcode 'BKNBK_IBAN'
                  raising no_bknbk_iban_bec_entry.
*   Trans. &: Daten der Tabelle & koennen nicht bearbeitet werden
        endif. " xale = space
      endif. " xt020-funcl ca 'SL'
      if bi-xaseg <> 'X'.
        if xale = space.
          perform log_msg using c_msgid 'I' '104'
                                trans_count bkn00-tcode '' ''.
          perform log_msg using c_msgid 'I' '125'
                                'BKNBK_IBAN' '' '' ''.
          perform dump_bkn00.
          xbknbk_iban = i_bknbk_iban.
          xbknbk_iban = wa.
          perform dump_bknbk_iban.
          perform log_abort using c_msgid '013'.
        else. " i.e. xale = 'X'
          message i104 with trans_count bkn00-tcode
                  raising no_bknbk_iban_bec_exist1.
*   Trans. & &: Konto existiert bereits, Allg.Bereich wird nicht bearbei
        endif. " xale = space
      endif. " bi-xaseg <> 'X'
      xbknbk_iban = i_bknbk_iban.
      xbknbk_iban = wa.
      perform bknbk_iban_erweiterung_pruefen.
      perform check_structure_empty using 'BKNBK_IBAN'.
      check g_empty is initial.
      if xbknbk_iban-iban = space or xbknbk_iban-iban(1) = nodata.
        if xale = space.
          perform log_msg using c_msgid 'I' '110'
                                trans_count 'BKNBK_IBAN' '' ''.
          perform dump_bkn00.
          perform dump_bknbk_iban.
          perform log_abort using c_msgid '013'.
        else. " i.e. xale = 'X'
          message i110 with bkn00-tcode 'BKNBK_IBAN'
                  raising no_bknbk_iban_bec_entry.
        endif. " xale = space
      endif. " xbknbk_iban-iban = space or xbknbk_iban-iban(1) = nodata
      if xbknbk_iban-banks <> nodata and xbknbk_iban-banks <> space.
        l_land1 = xbknbk_iban-banks.
      else.
        l_land1 = xbknbk_iban-iban(2).
      endif.
      perform read_t005 using l_land1 changing l_t005.
      if l_t005 is initial.
        if xale = space.
          perform log_msg using c_msgid 'I' '221' l_land1 '' '' ''.
          perform dump_bkn00.
          perform dump_bknbk.
          perform log_abort using c_msgid '013'.
        else. " i.e. xale = 'X'
          message i221 with l_land1 raising no_bknbk_bec_key2.
        endif. " xale = space
      endif. " l_t005 is initial
      if l_t005-bnkey = '2'.
*       IBAN ohne Kontonummer ist bei dieser Landeseinstellung nicht
*       zulaessig.
        if xale = space.
          perform log_msg using c_msgid 'I' '631' l_land1 '' '' ''.
          perform dump_bkn00.
          perform dump_bknbk.
          perform log_abort using c_msgid '013'.
        else. " i.e. xale = 'X'
          message i631 with l_land1 raising no_bknbk_bec_bnkey.
        endif. " xale = space
      endif. " l_t005-bnkey = '2'
      append xbknbk_iban.
* \TP 957820 - End

*-----------------------------------------------------------------------
*        BKNB1 Buchungskreisdaten
*-----------------------------------------------------------------------
    when 'BKNB1'.
      if bi-xbukr ne 'X'.
        perform log_msg using c_msgid 'I' '105'
         trans_count bkn00-tcode space space .
        perform log_msg using c_msgid 'I' '125'
         'BKNB1' space space space .
        perform dump_bkn00.
        perform log_msg using c_msgid 'I' '017'
         space space space space .
        bknb1 = wa.
        perform dump_wa using 'BKNB1'.
        perform log_abort using c_msgid '013'.
      endif.
      if bknb1 ne i_bknb1.
        perform log_msg using c_msgid 'I' '107'
         trans_count satz2_count 'BKNB1' space .
        perform dump_bkn00.
        perform log_msg using c_msgid 'I' '017'
         space space space space .
        bknb1 = wa.
        perform dump_wa using 'BKNB1'.
        perform log_abort using c_msgid '013'.
      endif.
      bknb1 = wa.

      perform bknb1_erweiterung_pruefen.

*------- Keine F-Seg. Daten => keine F-Seg. Dynpros --------------------
      if xt020-aktyp = 'H'.
        bknb1-sende = nodata.
        if bknb1 = i_bknb1.
          clear bi-xbukr.
          loop at dyntab where dtype = 'F'.
            delete dyntab.
          endloop.
        endif.
      endif.

*-----------------------------------------------------------------------
*        BKNBW Quellensteuerdaten
*-----------------------------------------------------------------------
    when 'BKNBW'.
      if xt020-funcl ca 'SL'.
        perform log_msg using c_msgid 'I' '110'
         trans_count 'BKNBW' space space .
        perform dump_bkn00.
        xbknbw = i_bknbw.
        xbknbw = wa.
        perform dump_bknbw.
        perform log_abort using c_msgid '013'.
      endif.
      if bi-xbukr ne 'X'.
        perform log_msg using c_msgid 'I' '105'
         trans_count bkn00-tcode space space .
        perform log_msg using c_msgid 'I' '125'
         'BKNBW' space space space .
        perform dump_bkn00.
        perform log_msg using c_msgid 'I' '017'
         space space space space .
        xbknbw = i_bknbw.
        xbknbw = wa.
        perform dump_bknbw.
        perform log_abort using c_msgid '013'.
      endif.

      xbknbw = i_bknbw.
      xbknbw = wa.
      perform check_structure_empty using 'BKNBW'.
      check g_empty is initial.
      append xbknbw.

*-----------------------------------------------------------------------
*        BKNB5 Mahndaten
*-----------------------------------------------------------------------
    when 'BKNB5'.
      if xt020-funcl ca 'SL'.
        perform log_msg using c_msgid 'I' '110'
         trans_count 'BKNB5' space space .
        perform dump_bkn00.
        perform log_msg using c_msgid 'I' '017'
         space space space space .
        bknb5 = wa.
        perform dump_wa using 'BKNB5'.
        perform log_abort using c_msgid '013'.
      endif.
      if bi-xbukr ne 'X'.
        perform log_msg using c_msgid 'I' '105'
         trans_count bkn00-tcode space space .
        perform log_msg using c_msgid 'I' '125'
         'BKNB5' space space space .
        perform dump_bkn00.
        perform log_msg using c_msgid 'I' '017'
         space space space space .
        bknb5 = wa.
        perform dump_wa using 'BKNB5'.
        perform log_abort using c_msgid '013'.
      endif.
      if bknb5 ne i_bknb5.
        perform log_msg using c_msgid 'I' '107'
         trans_count satz2_count 'BKNB5' space .
        perform dump_bkn00.
        perform log_msg using c_msgid 'I' '017'
         space space space space .
        bknb5 = wa.
        perform dump_wa using 'BKNB5'.
        perform log_abort using c_msgid '013'.
      endif.
      bknb5 = wa.

*-----------------------------------------------------------------------
*        BLFZA Abw. Regulierer  (A und B-Segment)
*-----------------------------------------------------------------------
    when 'BKNZA'.
      if xt020-funcl ca 'SL'.
        perform log_msg using c_msgid 'I' '110'
         trans_count 'BKNZA' space space .
        perform dump_bkn00.
        xbknza = i_bknza.
        xbknza = wa.
        perform dump_bknza.
        perform log_abort using c_msgid '013'.
      endif.

      xbknza = i_bknza.
      xbknza = wa.
      perform check_structure_empty using 'BKNZA'.          " \TP 857698
      check g_empty is initial.                             " \TP 857698

      if xbknza-bukrs = nodata.
        xbknza-bukrs = space.
      endif.

      if bi-xaseg ne 'X' and xbknza-bukrs is initial.
        perform log_msg using c_msgid 'I' '104'
         trans_count bkn00-tcode space space .
        perform log_msg using c_msgid 'I' '125'
         'BKNZA' space space space .
        perform dump_bkn00.
        perform dump_bknza.
        perform log_abort using c_msgid '013'.
      endif.
      if bi-xbukr ne 'X' and not xbknza-bukrs is initial.
        perform log_msg using c_msgid 'I' '105'
         trans_count bkn00-tcode space space .
        perform log_msg using c_msgid 'I' '125'
         'BKNZA' space space space .
        perform dump_bkn00.
        perform log_msg using c_msgid 'I' '017'
         space space space space .
        perform dump_bknza.
        perform log_abort using c_msgid '013'.
      endif.
      if not xbknza-bukrs is initial.
        if xbknza-bukrs ne bkn00-bukrs.
          perform log_msg using c_msgid 'I' '139'
           trans_count xbknza-empfd xbknza-bukrs space .
          perform log_msg using c_msgid 'I' '140'
           'BKNZA-BUKRS' space space space .
          perform log_msg using c_msgid 'I' '141'
           'BKNZA-BUKRS' bkn00-bukrs space space .
          perform dump_bkn00.
          perform log_msg using c_msgid 'I' '017'
           space space space space .
          perform dump_bknza.
          perform log_abort using c_msgid '013'.
        endif.
      endif.
      append xbknza.

*----------------------------------------------------------------------
*        BKNKA Kreditlimit zentral
*----------------------------------------------------------------------
    when 'BKNKA'.
      if xt020-dyncl ne 'C'.
        perform log_msg using c_msgid 'I' '113'
         trans_count bkn00-tcode space space .
        perform log_msg using c_msgid 'I' '125'
         'BKNKA' space space space .
        perform dump_bkn00.
        perform log_msg using c_msgid 'I' '017'
         space space space space .
        bknka = wa.
        perform dump_wa using 'BKNKA'.
        perform log_abort using c_msgid '013'.
      endif.
      if bknka ne i_bknka.
        perform log_msg using c_msgid 'I' '107'
         trans_count satz2_count 'BKNKA' space .
        perform dump_bkn00.
        perform log_msg using c_msgid 'I' '017'
         space space space space .
        bknka = wa.
        perform dump_wa using 'BKNKA'.
        perform log_abort using c_msgid '013'.
      endif.
      bknka = wa.

*----------------------------------------------------------------------
*        BKNKK Kreditlimit Kontrollbereich
*----------------------------------------------------------------------
    when 'BKNKK'.
      if xt020-dyncl ne 'C'.
        perform log_msg using c_msgid 'I' '113'
         trans_count bkn00-tcode space space .
        perform log_msg using c_msgid 'I' '125'
         'BKNKK' space space space .
        perform dump_bkn00.
        perform log_msg using c_msgid 'I' '017'
         space space space space .
        bknkk = wa.
        perform dump_wa using 'BKNKK'.
        perform log_abort using c_msgid '013'.
      endif.
      if bi-xkkbr ne 'X'.
        perform log_msg using c_msgid 'I' '114'
         trans_count bkn00-tcode space space .
        perform log_msg using c_msgid 'I' '125'
         'BKNKK' space space space .
        perform dump_bkn00.
        perform log_msg using c_msgid 'I' '017'
         space space space space .
        bknkk = wa.
        perform dump_wa using 'BKNKK'.
        perform log_abort using c_msgid '013'.
      endif.
      if bknkk ne i_bknkk.
        perform log_msg using c_msgid 'I' '107'
         trans_count satz2_count 'BKNKK' space .
        perform dump_bkn00.
        perform log_msg using c_msgid 'I' '017'
         space space space space .
        bknkk = wa.
        perform dump_wa using 'BKNKK'.
        perform log_abort using c_msgid '013'.
      endif.
      bknkk = wa.
      perform bknkk_erweiterung_pruefen.

*-----------------------------------------------------------------------
*        BKNVV
*-----------------------------------------------------------------------
    when 'BKNVV'.
      if bi-xvkor ne 'X'.
        perform log_msg using c_msgid 'I' '121'
         trans_count bkn00-tcode space space .
        perform log_msg using c_msgid 'I' '125'
         'BKNVV' space space space .
        perform dump_bkn00.
        perform log_msg using c_msgid 'I' '017'
         space space space space .
        bknvv = wa.
        perform dump_wa using 'BKNVV'.
        perform log_abort using c_msgid '013'.
      endif.
      if bknvv ne i_bknvv.
        perform log_msg using c_msgid 'I' '107'
         trans_count satz2_count 'BKNVV' space .
        perform dump_bkn00.
        perform log_msg using c_msgid 'I' '017'
         space space space space .
        bknvv = wa.
        perform dump_wa using 'BKNVV'.
        perform log_abort using c_msgid '013'.
      endif.
      bknvv = wa.
      bknvv-chspl = nodata.                                 "mi/46a
      perform bknvv_erweiterung_pruefen.

*------- Keine V-Seg. Daten => keine V-Seg. Dynpros --------------------
      if xt020-aktyp = 'H'.
        bknvv-sende = nodata.
        if bknvv = i_bknvv.
          clear bi-xvkor.
          loop at dyntab where dtype = 'V'.
            delete dyntab.
          endloop.
        endif.
      endif.

*-----------------------------------------------------------------------
*        BKNEX Außenhandel
*-----------------------------------------------------------------------
    when 'BKNEX'.
      if xt020-funcl ca 'SL'.
        perform log_msg using c_msgid 'I' '110'
         trans_count 'BKNEX' space space .
        perform dump_bkn00.
        xbknex = i_bknex.
        xbknex = wa.
        perform dump_bknex.
        perform log_abort using c_msgid '013'.
      endif.
      if bi-xaseg ne 'X'.
        perform log_msg using c_msgid 'I' '104'
         trans_count bkn00-tcode space space .
        perform log_msg using c_msgid 'I' '125'
         'BKNEX' space space space .
        perform dump_bkn00.
        xbknex = i_bknex.
        xbknex = wa.
        perform dump_bknex.
        perform log_abort using c_msgid '013'.
      endif.
      xbknex = i_bknex.
      xbknex = wa.
      PERFORM bknex_erweiterung_pruefen.              " ADD_ON-Aenderung
      perform check_structure_empty using 'BKNEX'.          " \TP 857698
      check g_empty is initial.                             " \TP 857698
      append xbknex.

*-----------------------------------------------------------------------
*        BKNVA Abladestellen
*-----------------------------------------------------------------------
    when 'BKNVA'.
      if xt020-funcl ca 'SL'.
        perform log_msg using c_msgid 'I' '110'
         trans_count 'BKNVA' space space .
        perform dump_bkn00.
        xbknva = i_bknva.
        xbknva = wa.
        perform dump_bknva.
        perform log_abort using c_msgid '013'.
      endif.
      if bi-xaseg ne 'X'.
        perform log_msg using c_msgid 'I' '104'
         trans_count bkn00-tcode space space .
        perform log_msg using c_msgid 'I' '125'
         'BKNVA' space space space .
        perform dump_bkn00.
        xbknva = i_bknva.
        xbknva = wa.
        perform dump_bknva.
        perform log_abort using c_msgid '013'.
      endif.
      xbknva = i_bknva.
      xbknva = wa.
      perform bknva_erweiterung_pruefen.
      perform check_structure_empty using 'BKNVA'.          " \TP 857698
      check g_empty is initial.                             " \TP 857698
      append xbknva.

*mi/46a begin
*-----------------------------------------------------------------------
*        BWRF12 Empfangstellen
*-----------------------------------------------------------------------
    when 'BWRF12'.
      if xt020-funcl ca 'SL'.
        perform log_msg using c_msgid 'I' '110'
         trans_count 'BWRF12' space space .
        perform dump_bkn00.
        xbwrf12 = i_bwrf12.
        xbwrf12 = wa.
        perform dump_bwrf12.
        perform log_abort using c_msgid '013'.
      endif.
      if bi-xaseg ne 'X'.
        perform log_msg using c_msgid 'I' '104'
         trans_count bkn00-tcode space space .
        perform log_msg using c_msgid 'I' '125'
         'BWRF12' space space space .
        perform dump_bkn00.
        xbwrf12 = i_bwrf12.
        xbwrf12 = wa.
        perform dump_bwrf12.
        perform log_abort using c_msgid '013'.
      endif.
      xbwrf12 = i_bwrf12.
      xbwrf12 = wa.
      perform check_structure_empty using 'BWRF12'.         " \TP 857698
      check g_empty is initial.                             " \TP 857698
      append xbwrf12.

*-----------------------------------------------------------------------
*        BWRF4 Abteilungen
*-----------------------------------------------------------------------
    when 'BWRF4'.
      if xt020-funcl ca 'SL'.
        perform log_msg using c_msgid 'I' '110'
         trans_count 'BWRF4' space space .
        perform dump_bkn00.
        xbwrf4 = i_bwrf4.
        xbwrf4 = wa.
        perform dump_bwrf4.
        perform log_abort using c_msgid '013'.
      endif.
      if bi-xaseg ne 'X'.
        perform log_msg using c_msgid 'I' '104'
         trans_count bkn00-tcode space space .
        perform log_msg using c_msgid 'I' '125'
         'BWRF4' space space space .
        perform dump_bkn00.
        xbwrf4 = i_bwrf4.
        xbwrf4 = wa.
        perform dump_bwrf4.
        perform log_abort using c_msgid '013'.
      endif.
      xbwrf4 = i_bwrf4.
      xbwrf4 = wa.
      perform check_structure_empty using 'BWRF4'.          " \TP 857698
      check g_empty is initial.                             " \TP 857698
      append xbwrf4.
*mi/46a end

*-----------------------------------------------------------------------
*        BIADDR2 Privatadresse Konsument
*-----------------------------------------------------------------------
    when 'BIADDR2'.
      if xt020-funcl ca 'SL'.
        perform log_msg using c_msgid 'I' '110'
         trans_count 'BIADDR2' space space .
        perform dump_bkn00.
        perform log_msg using c_msgid 'I' '017'
         space space space space .
        biaddr2 = wa.
        perform dump_wa using 'BIADDR2'.
        perform log_abort using c_msgid '013'.
      endif.
      if bi-xaseg ne 'X'.
        perform log_msg using c_msgid 'I' '104'
         trans_count bkn00-tcode space space .
        perform log_msg using c_msgid 'I' '125'
         'BIADDR2' space space space .
        perform dump_bkn00.
        perform log_msg using c_msgid 'I' '017'
         space space space space .
        biaddr2 = wa.
        perform dump_wa using 'BIADDR2'.
        perform log_abort using c_msgid '013'.
      endif.
      if biaddr2 ne i_biaddr2.
        perform log_msg using c_msgid 'I' '107'
         trans_count satz2_count 'BIADDR2' space .
        perform dump_bkn00.
        perform log_msg using c_msgid 'I' '017'
         space space space space .
        biaddr2 = wa.
        perform dump_wa using 'BIADDR2'.
        perform log_abort using c_msgid '013'.
      endif.
      biaddr2 = wa.

*-----------------------------------------------------------------------
*        BKNVK Ansprechpartner
*-----------------------------------------------------------------------
    when 'BKNVK'.
      if xt020-funcl ca 'SL'.
        perform log_msg using c_msgid 'I' '110'
         trans_count 'BKNVK' space space .
        perform dump_bkn00.
        xbknvk = i_bknvk.
        xbknvk = wa.
        perform dump_bknvk.
        perform log_abort using c_msgid '013'.
      endif.
      if bi-xaseg ne 'X'.
        perform log_msg using c_msgid 'I' '104'
         trans_count bkn00-tcode space space .
        perform log_msg using c_msgid 'I' '125'
         'BKNVK' space space space .
        perform dump_bkn00.
        xbknvk = i_bknvk.
        xbknvk = wa.
        perform dump_bknvk.
        perform log_abort using c_msgid '013'.
      endif.
      xbknvk = i_bknvk.
      xbknvk = wa.
      perform bknvk_erweiterung_pruefen.
      perform check_structure_empty using 'BKNVK'.
      check g_empty is initial.
      append xbknvk.

*-----------------------------------------------------------------------
*        BKNVD Nachrichten
*-----------------------------------------------------------------------
    when 'BKNVD'.
      if xt020-funcl ca 'SL'.
        perform log_msg using c_msgid 'I' '110'
         trans_count 'BKNVD' space space .
        perform dump_bkn00.
        xbknvd = i_bknvd.
        xbknvd = wa.
        perform dump_bknvd.
        perform log_abort using c_msgid '013'.
      endif.
      if bi-xvkor ne 'X'.
        perform log_msg using c_msgid 'I' '121'
         trans_count bkn00-tcode space space .
        perform log_msg using c_msgid 'I' '125'
         'BKNVD' space space space .
        perform dump_bkn00.
        xbknvd = i_bknvd.
        xbknvd = wa.
        perform dump_bknvd.
        perform log_abort using c_msgid '013'.
      endif.
      xbknvd = i_bknvd.
      xbknvd = wa.
      perform bknvd_erweiterung_pruefen.              " ADD_ON-Aenderung
      perform check_structure_empty using 'BKNVD'.          " \TP 857698
      check g_empty is initial.                             " \TP 857698
      append xbknvd.

*-----------------------------------------------------------------------
*        BKNVI Steuern Vertrieb
*-----------------------------------------------------------------------
    when 'BKNVI'.
      if xt020-funcl ca 'SL'.
        perform log_msg using c_msgid 'I' '110'
         trans_count 'BKNVI' space space .
        perform dump_bkn00.
        xbknvi = i_bknvi.
        xbknvi = wa.
        perform dump_bknvi.
        perform log_abort using c_msgid '013'.
      endif.
      if bi-xvkor ne 'X'.
        perform log_msg using c_msgid 'I' '121'
         trans_count bkn00-tcode space space .
        perform log_msg using c_msgid 'I' '125'
         'BKNVI' space space space .
        perform dump_bkn00.
        xbknvi = i_bknvi.
        xbknvi = wa.
        perform dump_bknvi.
        perform log_abort using c_msgid '013'.
      endif.
      xbknvi = i_bknvi.
      xbknvi = wa.
      perform bknvi_erweiterung_pruefen.              " ADD_ON-Aenderung
      perform check_structure_empty using 'BKNVI'.          " \TP 857698
      check g_empty is initial.                             " \TP 857698
      append xbknvi.

*-----------------------------------------------------------------------
*        BKNVL Lizenzen Vertrieb
*-----------------------------------------------------------------------
    when 'BKNVL'.
      if xt020-funcl ca 'SL'.
        perform log_msg using c_msgid 'I' '110'
         trans_count 'BKNVL' space space .
        perform dump_bkn00.
        xbknvl = i_bknvl.
        xbknvl = wa.
        perform dump_bknvl.
        perform log_abort using c_msgid '013'.
      endif.
      if bi-xvkor ne 'X'.
        perform log_msg using c_msgid 'I' '121'
         trans_count bkn00-tcode space space .
        perform log_msg using c_msgid 'I' '125'
         'BKNVL' space space space .
        perform dump_bkn00.
        xbknvl = i_bknvl.
        xbknvl = wa.
        perform dump_bknvl.
        perform log_abort using c_msgid '013'.
      endif.
      xbknvl = i_bknvl.
      xbknvl = wa.
      perform bknvl_erweiterung_pruefen.              " ADD_ON-Aenderung
      perform check_structure_empty using 'BKNVL'.          " \TP 857698
      check g_empty is initial.                             " \TP 857698
      append xbknvl.

*-----------------------------------------------------------------------
*        BKNVP Partnerrollen
*-----------------------------------------------------------------------
    when 'BKNVP'.
      if xt020-funcl ca 'SL'.
        perform log_msg using c_msgid 'I' '110'
         trans_count 'BKNVP' space space .
        perform dump_bkn00.
        xbknvp = i_bknvp.
        xbknvp = wa.
        perform dump_bknvp.
        perform log_abort using c_msgid '013'.
      endif.
      if bi-xvkor ne 'X'.
        perform log_msg using c_msgid 'I' '121'
         trans_count bkn00-tcode space space .
        perform log_msg using c_msgid 'I' '125'
         'BKNVP' space space space .
        perform dump_bkn00.
        xbknvp = i_bknvp.
        xbknvp = wa.
        perform dump_bknvp.
        perform log_abort using c_msgid '013'.
      endif.
      xbknvp = i_bknvp.
      xbknvp = wa.
      perform bknvp_erweiterung_pruefen.
      perform check_structure_empty using 'BKNVP'.          " \TP 857698
      check g_empty is initial.                             " \TP 857698
      append xbknvp.

    when others.
*     ADD_ON-Aenderungen - B
      if  g_addon_active-any = 'X'
      and not g_inst_d-add_data_bi is initial.              " \TP 563352
        l_trans_count  = trans_count.
        l_record_count = satz2_count.
        call method g_inst_d-add_data_bi->check_data_row
          exporting
            i_structname   = l_structname
            i_nodata       = bgr00-nodata
            i_tcode        = bkn00-tcode
            i_trans_count  = l_trans_count
            i_record_count = l_record_count
          changing
            c_data_row          = wa
            e_structure_checked = l_checked
            e_subrc             = l_subrc
            e_msgid             = l_msgid
            e_msgno             = l_msgno
            e_msgv1             = l_msgv1
            e_msgv2             = l_msgv2
            e_msgv3             = l_msgv3
            e_msgv4             = l_msgv4.
      endif. " g_addon_active-any = 'X'

      if g_addon_active-any = space or l_checked = space
      or l_subrc <> 0.
*       Fehler aufgetreten  ==>  Meldung und Abbruch
        if g_addon_active-any = space or l_checked = space.
          l_msgid = c_msgid.
          l_msgno = '111'.
          l_msgv1 = trans_count.
          l_msgv2 = satz2_count.
          l_msgv3 = l_structname.
          l_msgv4 = space.
        else. " i.e. l_subrc <> 0
          if l_msgid is initial.
*           Setzt Default-Meldung
            l_msgid = c_msgid.
            l_msgno = '644'.
            l_msgv1 = trans_count.
            l_msgv2 = satz2_count.
            l_msgv3 = l_structname.
            l_msgv4 = space.
          endif.
        endif.
*     ADD_ON-Aenderungen - E
        if xale = space.
          perform log_msg using l_msgid 'I' l_msgno
                                l_msgv1 l_msgv2 l_msgv3 l_msgv4.
          perform dump_bkn00.
          perform log_abort using c_msgid '013'.
        else.
          message id l_msgid type 'I' number l_msgno
                  with l_msgv1 l_msgv2 l_msgv3 l_msgv4.
          perform dump_bkn00.
          message a013 raising editing_terminated.
        endif.
      endif. " g_addon_active-any = space or ...      " ADD_ON-Aenderung
  endcase.
  append wa to gt_wa.                                 " ADD_ON-Aenderung
endform.                    "WA_UEBERTRAGEN


*&---------------------------------------------------------------------*
*&      Form  XBKNZA_SPLIT
*&---------------------------------------------------------------------*
*   XBKNZA (abw. Regulierer) auf A-Segm. (XBKNZAA) und
*   B-Segm. (XBKNZAB) verteilen
*----------------------------------------------------------------------*
form xbknza_split.
  clear:   xbknzaa, xbknzab.
  refresh: xbknzaa, xbknzab.

  loop at xbknza.
    if xbknza-bukrs is initial.
      clear xbknzaa.
      xbknzaa = xbknza.
      append xbknzaa.
    else.
      clear xbknzab.
      xbknzab = xbknza.
      append xbknzab.
    endif.
  endloop.
endform.                    "XBKNZA_SPLIT

*&---------------------------------------------------------------------*
*&      Form  KNZA_VERARBEITUNG
*&---------------------------------------------------------------------*
*   Verarbeiten der uebergebenen abw. Regulierer (BKNZA)
*----------------------------------------------------------------------*
form knza_verarbeitung.
  perform okcode_knza.
  perform dynpro_begin  using rep_name_d '1130'.
  perform xbknza_loop.
  perform dynpro_begin  using rep_name_d dyntab-dynnr.
endform.                    "KNZA_VERARBEITUNG

*&---------------------------------------------------------------------*
*&      Form  XBKNZA_LOOP
*&---------------------------------------------------------------------*
*   Loop ueber die abw. Regulierer
*----------------------------------------------------------------------*
form xbknza_loop.
  case dyntab-dynnr.
    when '0130'.
      perform xbknzaa_loop.
    when '0215'.
      perform xbknzab_loop.
  endcase.
endform.                    "XBKNZA_LOOP

*&---------------------------------------------------------------------*
*&      Form  XBKNZAA_LOOP
*&---------------------------------------------------------------------*
*   Loop ueber die abw. Regulierer im A-Segment (XBKNZAA)
*----------------------------------------------------------------------*
form xbknzaa_loop.

  loop at xbknza where bukrs is initial.
* Felder können durch Customizing ausgeblendet sein. Nur Übertragen
* wenn Daten dazu vorhanden
    check xbknza-empfd(1) ne nodata.
    clear xdytr.
    perform okcode_posz.
    perform d3130_fuellen.
    perform dynpro_fuellen using '1130'.
    perform cursor_setzen_1130.
    if xbknza-xdele = 'X'.
      perform okcode_f14.
      perform line_select.
      perform dynpro_begin  using rep_name_d '1130'.
      xdytr = 'X'.
    endif.
  endloop.

*------- Letzte Zeile abschicken ---------------------------------------
  describe table xbknzaa lines refe1.
  if  refe1 ne  0.
    if xdytr ne 'X'.
      perform dynpro_begin using rep_name_d '1130'.
    endif.
    perform okcode_back.
  endif.

endform.                    "XBKNZAA_LOOP

*&---------------------------------------------------------------------*
*&      Form  XBKNZAB_LOOP
*&---------------------------------------------------------------------*
*   Loop ueber die abw. Regulierer im B-Segment (XBKNZAB)
*----------------------------------------------------------------------*
form xbknzab_loop.

  loop at xbknza where not bukrs is initial.
* Felder können durch Customizing ausgeblendet sein. Nur Übertragen
* wenn Daten dazu vorhanden
    check xbknza-empfd(1) ne nodata.
    clear xdytr.
    perform okcode_posz.
    perform d3130_fuellen.
    perform dynpro_fuellen using '1130'.
    perform cursor_setzen_1130.
    if xbknza-xdele = 'X'.
      perform okcode_f14.
      perform line_select.
      perform dynpro_begin  using rep_name_d '1130'.
      xdytr = 'X'.
    endif.
  endloop.

*------- Letzte Zeile abschicken ---------------------------------------
  describe table xbknzab lines refe1.
  if  refe1 ne  0.
    if xdytr ne 'X'.
      perform dynpro_begin using rep_name_d '1130'.
    endif.
    perform okcode_back.
  endif.

endform.                    "XBKNZAB_LOOP

*&---------------------------------------------------------------------*
*&      Form  LINE_SELECT
*&---------------------------------------------------------------------*
*   Den zu löschenden Eintrag selektieren
*----------------------------------------------------------------------*
form line_select.
  clear ft.
  ft-fnam = 'SELECTED(01)'.
  ft-fval = 'X'.
  append ft.
endform.                    "LINE_SELECT

*&---------------------------------------------------------------------*
*&      Form  D0112_FUELLEN
*&---------------------------------------------------------------------*
form d0112_fuellen.
  clear ft.
  ft-program  = 'SAPMF02D'.
  ft-dynpro   = '0112'.
  ft-dynbegin = 'X'.
  append ft.
  if xbknvk-parge(1)                    ne nodata.
    clear ft.
    ft-fnam = 'KNVK-PARGE                    '.
    ft-fval = xbknvk-parge                   .
    append ft.
  endif.
  if xbknvk-gbdat(1)                    ne nodata.
    clear ft.
    ft-fnam = 'KNVK-GBDAT                    '.
    ft-fval = xbknvk-gbdat                   .
    append ft.
  endif.
  if xbknvk-famst(1)                    ne nodata.
    clear ft.
    ft-fnam = 'KNVK-FAMST                    '.
    ft-fval = xbknvk-famst                   .
    append ft.
  endif.
  if biaddr2-title_p                    ne nodata.
    clear ft.
    ft-fnam = 'SZA7_D0400-TITLE_MEDI        '.
    ft-fval = biaddr2-title_p               .
    append ft.
  endif.
  if biaddr2-firstname                  ne nodata.
    clear ft.
    ft-fnam = 'ADDR2_DATA-NAME_FIRST        '.
    ft-fval = biaddr2-firstname             .
    append ft.
  endif.
  if biaddr2-lastname                   ne nodata.
    clear ft.
    ft-fnam = 'ADDR2_DATA-NAME_LAST         '.
    ft-fval = biaddr2-lastname              .
    append ft.
  endif.
  if biaddr2-birth_name                 ne nodata.
    clear ft.
    ft-fnam = 'ADDR2_DATA-NAME2_P           '.
    ft-fval = biaddr2-birth_name            .
    append ft.
  endif.
  if biaddr2-title_aca1                 ne nodata.
    clear ft.
    ft-fnam = 'SZA7_D0400-TITLE_ACA1        '.
    ft-fval = biaddr2-title_aca1            .
    append ft.
  endif.
  if biaddr2-title_aca2                 ne nodata.
    clear ft.
    ft-fnam = 'SZA7_D0400-TITLE_ACA2        '.
    ft-fval = biaddr2-title_aca2            .
    append ft.
  endif.
  if biaddr2-prefix1                    ne nodata.
    clear ft.
    ft-fnam = 'SZA7_D0400-PREFIX1           '.
    ft-fval = biaddr2-prefix1               .
    append ft.
  endif.
  if biaddr2-prefix2                    ne nodata.
    clear ft.
    ft-fnam = 'SZA7_D0400-PREFIX2           '.
    ft-fval = biaddr2-prefix2               .
    append ft.
  endif.
  if biaddr2-title_sppl                 ne nodata.
    clear ft.
    ft-fnam = 'SZA7_D0400-TITLE_SPPL        '.
    ft-fval = biaddr2-title_sppl            .
    append ft.
  endif.
  if biaddr2-nickname                   ne nodata.
    clear ft.
    ft-fnam = 'ADDR2_DATA-NICKNAME          '.
    ft-fval = biaddr2-nickname              .
    append ft.
  endif.
  if biaddr2-initials                   ne nodata.
    clear ft.
    ft-fnam = 'ADDR2_DATA-INITIALS          '.
    ft-fval = biaddr2-initials              .
    append ft.
  endif.
  if biaddr2-nameformat                 ne nodata.
    clear ft.
    ft-fnam = 'ADDR2_DATA-NAMEFORMAT        '.
    ft-fval = biaddr2-nameformat            .
    append ft.
  endif.
  if biaddr2-namcountry                 ne nodata.
    clear ft.
    ft-fnam = 'ADDR2_DATA-NAMCOUNTRY        '.
    ft-fval = biaddr2-namcountry            .
    append ft.
  endif.
  if biaddr2-langup_iso                 ne nodata.
    clear ft.
    ft-fnam = 'ADDR2_DATA-LANGU_P           '.
    ft-fval = biaddr2-langup_iso            .
    append ft.
  endif.
  if biaddr2-sort1_p                    ne nodata.
    clear ft.
    ft-fnam = 'ADDR2_DATA-SORT1_P           '.
    ft-fval = biaddr2-sort1_p               .
    append ft.
  endif.
  if biaddr2-sort2_p                    ne nodata.
    clear ft.
    ft-fnam = 'ADDR2_DATA-SORT2_P           '.
    ft-fval = biaddr2-sort2_p               .
    append ft.
  endif.
  if biaddr2-c_o_name                   ne nodata.
    clear ft.
    ft-fnam = 'ADDR2_DATA-NAME_CO           '.
    ft-fval = biaddr2-c_o_name              .
    append ft.
  endif.
  if biaddr2-city                       ne nodata.
    clear ft.
    ft-fnam = 'ADDR2_DATA-CITY1             '.
    ft-fval = biaddr2-city                  .
    append ft.
  endif.
  if biaddr2-district                   ne nodata.
    clear ft.
    ft-fnam = 'ADDR2_DATA-CITY2             '.
    ft-fval = biaddr2-district              .
    append ft.
  endif.
  if biaddr2-postl_cod1                 ne nodata.
    clear ft.
    ft-fnam = 'ADDR2_DATA-POST_CODE1        '.
    ft-fval = biaddr2-postl_cod1            .
    append ft.
  endif.
  if biaddr2-postl_cod2                 ne nodata.
    clear ft.
    ft-fnam = 'ADDR2_DATA-POST_CODE2        '.
    ft-fval = biaddr2-postl_cod2            .
    append ft.
  endif.
  if biaddr2-po_box                     ne nodata.
    clear ft.
    ft-fnam = 'ADDR2_DATA-PO_BOX            '.
    ft-fval = biaddr2-po_box                .
    append ft.
  endif.
  if biaddr2-transpzone                 ne nodata.
    clear ft.
    ft-fnam = 'ADDR2_DATA-TRANSPZONE        '.
    ft-fval = biaddr2-transpzone            .
    append ft.
  endif.
  if biaddr2-street                     ne nodata.
    clear ft.
    ft-fnam = 'ADDR2_DATA-STREET            '.
    ft-fval = biaddr2-street                .
    append ft.
  endif.
  if biaddr2-house_no                   ne nodata.
    clear ft.
    ft-fnam = 'ADDR2_DATA-HOUSE_NUM1        '.
    ft-fval = biaddr2-house_no              .
    append ft.
  endif.
  if biaddr2-house_no2                  ne nodata.
    clear ft.
    ft-fnam = 'ADDR2_DATA-HOUSE_NUM2        '.
    ft-fval = biaddr2-house_no2             .
    append ft.
  endif.
  if biaddr2-str_suppl1                 ne nodata.
    clear ft.
    ft-fnam = 'ADDR2_DATA-STR_SUPPL1        '.
    ft-fval = biaddr2-str_suppl1            .
    append ft.
  endif.
  if biaddr2-str_suppl2                 ne nodata.
    clear ft.
    ft-fnam = 'ADDR2_DATA-STR_SUPPL2        '.
    ft-fval = biaddr2-str_suppl2            .
    append ft.
  endif.
  if biaddr2-str_suppl3                 ne nodata.
    clear ft.
    ft-fnam = 'ADDR2_DATA-STR_SUPPL3        '.
    ft-fval = biaddr2-str_suppl3            .
    append ft.
  endif.
  if biaddr2-location                   ne nodata.
    clear ft.
    ft-fnam = 'ADDR2_DATA-LOCATION          '.
    ft-fval = biaddr2-location              .
    append ft.
  endif.
  if biaddr2-floor                      ne nodata.
    clear ft.
    ft-fnam = 'ADDR2_DATA-FLOOR             '.
    ft-fval = biaddr2-floor                 .
    append ft.
  endif.
  if biaddr2-room_no                    ne nodata.
    clear ft.
    ft-fnam = 'ADDR2_DATA-ROOMNUMBER        '.
    ft-fval = biaddr2-room_no               .
    append ft.
  endif.
  if biaddr2-country                    ne nodata.
    clear ft.
    ft-fnam = 'ADDR2_DATA-COUNTRY           '.
    ft-fval = biaddr2-country               .
    append ft.
  endif.
  if biaddr2-region                     ne nodata.
    clear ft.
    ft-fnam = 'ADDR2_DATA-REGION            '.
    ft-fval = biaddr2-region                .
    append ft.
  endif.
  if biaddr2-time_zone                  ne nodata.
    clear ft.
    ft-fnam = 'ADDR2_DATA-TIME_ZONE         '.
    ft-fval = biaddr2-time_zone             .
    append ft.
  endif.
  if biaddr2-taxjurcode                 ne nodata.
    clear ft.
    ft-fnam = 'ADDR2_DATA-TAXJURCODE        '.
    ft-fval = biaddr2-taxjurcode            .
    append ft.
  endif.
  if biaddr2-adr_notes                  ne nodata.
    clear ft.
    ft-fnam = 'ADDR2_DATA-REMARK            '.
    ft-fval = biaddr2-adr_notes             .
    append ft.
  endif.
  if biaddr2-comm_type                  ne nodata.
    clear ft.
    ft-fnam = 'ADDR2_DATA-DEFLT_COMM        '.
    ft-fval = biaddr2-comm_type             .
    append ft.
  endif.
  if biaddr2-tel1_numbr                 ne nodata.
    clear ft.
    ft-fnam = 'SZA7_D0400-TEL_NUMBER        '.
    ft-fval = biaddr2-tel1_numbr            .
    append ft.
  endif.
  if biaddr2-tel1_ext                   ne nodata.
    clear ft.
    ft-fnam = 'SZA7_D0400-TEL_EXTENS        '.
    ft-fval = biaddr2-tel1_ext              .
    append ft.
  endif.
  if biaddr2-fax_number                 ne nodata.
    clear ft.
    ft-fnam = 'SZA7_D0400-FAX_NUMBER        '.
    ft-fval = biaddr2-fax_number            .
    append ft.
  endif.
  if biaddr2-fax_extens                 ne nodata.
    clear ft.
    ft-fnam = 'SZA7_D0400-FAX_EXTENS        '.
    ft-fval = biaddr2-fax_extens            .
    append ft.
  endif.
  if biaddr2-e_mail                     ne nodata.
    clear ft.
    ft-fnam = 'SZA7_D0400-SMTP_ADDR         '.
    ft-fval = biaddr2-e_mail                .
    append ft.
  endif.
  if biaddr2-build_long                 ne nodata.
    clear ft.
    ft-fnam = 'ADDR2_DATA-BUILDING          '.
    ft-fval = biaddr2-build_long            .
    append ft.
  endif.
  if biaddr2-regiogroup                 ne nodata.
    clear ft.
    ft-fnam = 'ADDR2_DATA-REGIOGROUP        '.
    ft-fval = biaddr2-regiogroup            .
    append ft.
  endif.
endform.                    " D0112_FUELLEN


*eject
************************************************************************
*        Generiertes Coding ......
*-----------------------------------------------------------
*        Generated  DATE 20130514.
*                   TIME 165359.
*                   USER LUKOWSKI    .
*-----------------------------------------------------------

*eject
*----------------------------------------------------------
*        Form DYNPRO_FUELLEN
*----------------------------------------------------------
FORM DYNPRO_FUELLEN USING DYNNR.
  CHECK FL_CHECK = SPACE.
  CASE DYNNR.
    WHEN '0110'.
      PERFORM D0110_FUELLEN.
    WHEN '0120'.
      PERFORM D0120_FUELLEN.
    WHEN '0125'.
      PERFORM D0125_FUELLEN.
    WHEN '1250'.
      PERFORM D1250_FUELLEN.
    WHEN '0130'.
      PERFORM D0130_FUELLEN.
    WHEN '0340'.
      PERFORM D0340_FUELLEN.
    WHEN '1340'.
      PERFORM D1340_FUELLEN.
    WHEN '0370'.
      PERFORM D0370_FUELLEN.
    WHEN '0360'.
      PERFORM D0360_FUELLEN.
    WHEN '1360'.
      PERFORM D1360_FUELLEN.
    WHEN '1365'.
      PERFORM D1365_FUELLEN.
    WHEN '1366'.
      PERFORM D1366_FUELLEN.
    WHEN '0210'.
      PERFORM D0210_FUELLEN.
    WHEN '0215'.
      PERFORM D0215_FUELLEN.
    WHEN '0220'.
      PERFORM D0220_FUELLEN.
    WHEN '0230'.
      PERFORM D0230_FUELLEN.
    WHEN '0610'.
      PERFORM D0610_FUELLEN.
    WHEN '0310'.
      PERFORM D0310_FUELLEN.
    WHEN '0315'.
      PERFORM D0315_FUELLEN.
    WHEN '0320'.
      PERFORM D0320_FUELLEN.
    WHEN '1350'.
      PERFORM D1350_FUELLEN.
    WHEN '1355'.
      PERFORM D1355_FUELLEN.
    WHEN '0326'.
      PERFORM D0326_FUELLEN.
    WHEN '0324'.
      PERFORM D0324_FUELLEN.
    WHEN '0510'.
      PERFORM D0510_FUELLEN.
    WHEN '0520'.
      PERFORM D0520_FUELLEN.
    WHEN 'L120'.
      PERFORM DL120_FUELLEN.
    WHEN 'L210'.
      PERFORM DL210_FUELLEN.
    WHEN 'B100'.
      PERFORM DB100_FUELLEN.
    WHEN 'Z100'.
      PERFORM DZ100_FUELLEN.
    WHEN 'Z200'.
      PERFORM DZ200_FUELLEN.
    WHEN '0111'.
      PERFORM D0111_FUELLEN.
    WHEN '0112'.
      PERFORM D0112_FUELLEN.
    WHEN '1361'.
      PERFORM D1361_FUELLEN.
    WHEN '1130'.
      PERFORM D1130_FUELLEN.
  ENDCASE.
ENDFORM.

*eject
*----------------------------------------------------------
*        Form D0110_FUELLEN
*----------------------------------------------------------
FORM D0110_FUELLEN.
  CLEAR FT.
  FT-PROGRAM  = 'SAPMF02D'.
  FT-DYNPRO   = '0110'.
  FT-DYNBEGIN = 'X'.
  APPEND FT.
  IF BKNA1-ANRED(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-ANRED                    '.
    FT-FVAL = BKNA1-ANRED                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-NAME1(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-NAME1                    '.
    FT-FVAL = BKNA1-NAME1                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-SORTL(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-SORTL                    '.
    FT-FVAL = BKNA1-SORTL                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-NAME2(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-NAME2                    '.
    FT-FVAL = BKNA1-NAME2                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-NAME3(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-NAME3                    '.
    FT-FVAL = BKNA1-NAME3                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-NAME4(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-NAME4                    '.
    FT-FVAL = BKNA1-NAME4                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-STRAS(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-STRAS                    '.
    FT-FVAL = BKNA1-STRAS                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-PFACH(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-PFACH                    '.
    FT-FVAL = BKNA1-PFACH                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-ORT01(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-ORT01                    '.
    FT-FVAL = BKNA1-ORT01                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-PSTLZ(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-PSTLZ                    '.
    FT-FVAL = BKNA1-PSTLZ                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-ORT02(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-ORT02                    '.
    FT-FVAL = BKNA1-ORT02                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-PFORT(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-PFORT                    '.
    FT-FVAL = BKNA1-PFORT                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-PSTL2(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-PSTL2                    '.
    FT-FVAL = BKNA1-PSTL2                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-LAND1(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-LAND1                    '.
    FT-FVAL = BKNA1-LAND1                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-REGIO(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-REGIO                    '.
    FT-FVAL = BKNA1-REGIO                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-SPRAS(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-SPRAS                    '.
    FT-FVAL = BKNA1-SPRAS                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-TELX1(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-TELX1                    '.
    FT-FVAL = BKNA1-TELX1                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-TELF1(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-TELF1                    '.
    FT-FVAL = BKNA1-TELF1                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-TELFX(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-TELFX                    '.
    FT-FVAL = BKNA1-TELFX                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-TELF2(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-TELF2                    '.
    FT-FVAL = BKNA1-TELF2                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-TELTX(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-TELTX                    '.
    FT-FVAL = BKNA1-TELTX                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-TELBX(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-TELBX                    '.
    FT-FVAL = BKNA1-TELBX                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-DATLT(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-DATLT                    '.
    FT-FVAL = BKNA1-DATLT                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-KNURL(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-KNURL                    '.
    FT-FVAL = BKNA1-KNURL                   .
    APPEND FT.
  ENDIF.
ENDFORM.

*eject
*----------------------------------------------------------
*        Form D0120_FUELLEN
*----------------------------------------------------------
FORM D0120_FUELLEN.
  CLEAR FT.
  FT-PROGRAM  = 'SAPMF02D'.
  FT-DYNPRO   = '0120'.
  FT-DYNBEGIN = 'X'.
  APPEND FT.
  IF BKNA1-LIFNR(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-LIFNR                    '.
    FT-FVAL = BKNA1-LIFNR                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-BEGRU(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-BEGRU                    '.
    FT-FVAL = BKNA1-BEGRU                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-KTOCD(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-KTOCD                    '.
    FT-FVAL = BKNA1-KTOCD                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-VBUND(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-VBUND                    '.
    FT-FVAL = BKNA1-VBUND                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-KONZS(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-KONZS                    '.
    FT-FVAL = BKNA1-KONZS                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-STCD1(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-STCD1                    '.
    FT-FVAL = BKNA1-STCD1                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-STCDT(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-STCDT                    '.
    FT-FVAL = BKNA1-STCDT                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-STKZA(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-STKZA                    '.
    FT-FVAL = BKNA1-STKZA                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-STCD2(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-STCD2                    '.
    FT-FVAL = BKNA1-STCD2                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-FITYP(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-FITYP                    '.
    FT-FVAL = BKNA1-FITYP                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-STKZN(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-STKZN                    '.
    FT-FVAL = BKNA1-STKZN                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-STCD3(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-STCD3                    '.
    FT-FVAL = BKNA1-STCD3                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-STKZU(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-STKZU                    '.
    FT-FVAL = BKNA1-STKZU                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-STCD4(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-STCD4                    '.
    FT-FVAL = BKNA1-STCD4                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-FISKN(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-FISKN                    '.
    FT-FVAL = BKNA1-FISKN                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-COUNC(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-COUNC                    '.
    FT-FVAL = BKNA1-COUNC                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-STCEG(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-STCEG                    '.
    FT-FVAL = BKNA1-STCEG                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-CITYC(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-CITYC                    '.
    FT-FVAL = BKNA1-CITYC                   .
    APPEND FT.
  ENDIF.
  IF ZAV_FLAG IS INITIAL.
  IF BKNA1-TXJCD(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-TXJCD                    '.
    FT-FVAL = BKNA1-TXJCD                   .
    APPEND FT.
  ENDIF.
  ENDIF.
  IF BKNA1-TXLW1(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-TXLW1                    '.
    FT-FVAL = BKNA1-TXLW1                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-XSUBT(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-XSUBT                    '.
    FT-FVAL = BKNA1-XSUBT                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-XICMS(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-XICMS                    '.
    FT-FVAL = BKNA1-XICMS                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-TXLW2(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-TXLW2                    '.
    FT-FVAL = BKNA1-TXLW2                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-XXIPI(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-XXIPI                    '.
    FT-FVAL = BKNA1-XXIPI                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-CFOPC(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-CFOPC                    '.
    FT-FVAL = BKNA1-CFOPC                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-J_1KFTBUS(1)                NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-J_1KFTBUS                '.
    FT-FVAL = BKNA1-J_1KFTBUS               .
    APPEND FT.
  ENDIF.
  IF BKNA1-J_1KFREPRE(1)               NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-J_1KFREPRE               '.
    FT-FVAL = BKNA1-J_1KFREPRE              .
    APPEND FT.
  ENDIF.
  IF BKNA1-J_1KFTIND(1)                NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-J_1KFTIND                '.
    FT-FVAL = BKNA1-J_1KFTIND               .
    APPEND FT.
  ENDIF.
  IF BKNA1-STCD5(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-STCD5                    '.
    FT-FVAL = BKNA1-STCD5                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-BBBNR(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-BBBNR                    '.
    FT-FVAL = BKNA1-BBBNR                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-BBSNR(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-BBSNR                    '.
    FT-FVAL = BKNA1-BBSNR                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-BUBKZ(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-BUBKZ                    '.
    FT-FVAL = BKNA1-BUBKZ                   .
    APPEND FT.
  ENDIF.
  IF BRSCH1 NE NODATA.
  IF BKNA1-BRSCH(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-BRSCH                    '.
    FT-FVAL = BKNA1-BRSCH                   .
    APPEND FT.
  ENDIF.
  ENDIF.
  IF BKNA1-BAHNS(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-BAHNS                    '.
    FT-FVAL = BKNA1-BAHNS                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-BAHNE(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-BAHNE                    '.
    FT-FVAL = BKNA1-BAHNE                   .
    APPEND FT.
  ENDIF.
  IF ZAV_FLAG IS INITIAL.
  IF BKNA1-LZONE(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-LZONE                    '.
    FT-FVAL = BKNA1-LZONE                   .
    APPEND FT.
  ENDIF.
  ENDIF.
  IF BKNA1-LOCCO(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-LOCCO                    '.
    FT-FVAL = BKNA1-LOCCO                   .
    APPEND FT.
  ENDIF.
ENDFORM.

*eject
*----------------------------------------------------------
*        Form D0125_FUELLEN
*----------------------------------------------------------
FORM D0125_FUELLEN.
  CLEAR FT.
  FT-PROGRAM  = 'SAPMF02D'.
  FT-DYNPRO   = '0125'.
  FT-DYNBEGIN = 'X'.
  APPEND FT.
  IF BKNA1-NIELS(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-NIELS                    '.
    FT-FVAL = BKNA1-NIELS                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-RPMKR(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-RPMKR                    '.
    FT-FVAL = BKNA1-RPMKR                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-KUKLA(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-KUKLA                    '.
    FT-FVAL = BKNA1-KUKLA                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-HZUOR(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-HZUOR                    '.
    FT-FVAL = BKNA1-HZUOR                   .
    APPEND FT.
  ENDIF.
  IF BRSCH2 NE NODATA.
  IF BKNA1-BRSCH(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-BRSCH                    '.
    FT-FVAL = BKNA1-BRSCH                   .
    APPEND FT.
  ENDIF.
  ENDIF.
  IF BKNA1-BRAN1(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-BRAN1                    '.
    FT-FVAL = BKNA1-BRAN1                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-UMSA1(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-UMSA1                    '.
    FT-FVAL = BKNA1-UMSA1                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-UWAER(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-UWAER                    '.
    FT-FVAL = BKNA1-UWAER                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-UMJAH(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-UMJAH                    '.
    FT-FVAL = BKNA1-UMJAH                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-JMZAH(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-JMZAH                    '.
    FT-FVAL = BKNA1-JMZAH                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-JMJAH(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-JMJAH                    '.
    FT-FVAL = BKNA1-JMJAH                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-PERIV(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-PERIV                    '.
    FT-FVAL = BKNA1-PERIV                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-GFORM(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-GFORM                    '.
    FT-FVAL = BKNA1-GFORM                   .
    APPEND FT.
  ENDIF.
ENDFORM.

*eject
*----------------------------------------------------------
*        Form D1250_FUELLEN
*----------------------------------------------------------
FORM D1250_FUELLEN.
  CLEAR FT.
  FT-PROGRAM  = 'SAPMF02D'.
  FT-DYNPRO   = '1250'.
  FT-DYNBEGIN = 'X'.
  APPEND FT.
  IF BKNA1-BRAN2(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-BRAN2                    '.
    FT-FVAL = BKNA1-BRAN2                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-BRAN3(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-BRAN3                    '.
    FT-FVAL = BKNA1-BRAN3                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-BRAN4(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-BRAN4                    '.
    FT-FVAL = BKNA1-BRAN4                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-BRAN5(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-BRAN5                    '.
    FT-FVAL = BKNA1-BRAN5                   .
    APPEND FT.
  ENDIF.
ENDFORM.

*eject
*----------------------------------------------------------
*        Form D0130_FUELLEN
*----------------------------------------------------------
FORM D0130_FUELLEN.
* \TP 957820 - Begin
  data: l_xtech type xfeld.  " X = Kontonr. ist technisch
  call function 'FI_TECH_ACCNO_CHECK_TRY'
    exporting i_bankn = xbknbk-bankn
    importing e_xtech = l_xtech.
* \TP 957820 - End

  CLEAR FT.
  FT-PROGRAM  = 'SAPMF02D'.
  FT-DYNPRO   = '0130'.
  FT-DYNBEGIN = 'X'.
  APPEND FT.
  IF XBKNBK-BANKS(1)                   NE NODATA.
   if l_xtech is initial.      " \TP 957820
    CLEAR FT.
    FT-FNAM = 'KNBK-BANKS                    '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNBK-BANKS                  .
    APPEND FT.
   endif.                      " \TP 957820
  ENDIF.
  IF XBKNBK-BANKL(1)                   NE NODATA.
   if l_xtech is initial.      " \TP 957820
    CLEAR FT.
    FT-FNAM = 'KNBK-BANKL                    '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNBK-BANKL                  .
    APPEND FT.
   endif.                      " \TP 957820
  ENDIF.
  IF XBKNBK-BANKN(1)                   NE NODATA.
   if l_xtech is initial.      " \TP 957820
    CLEAR FT.
    FT-FNAM = 'KNBK-BANKN                    '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNBK-BANKN                  .
    APPEND FT.
   endif.                      " \TP 957820
  ENDIF.
  IF XBKNBK-KOINH(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNBK-KOINH                    '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNBK-KOINH                  .
    APPEND FT.
  ENDIF.
  IF XBKNBK-BKONT(1)                   NE NODATA.
   if l_xtech is initial.      " \TP 957820
    CLEAR FT.
    FT-FNAM = 'KNBK-BKONT                    '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNBK-BKONT                  .
    APPEND FT.
   endif.                      " \TP 957820
  ENDIF.
  IF XBKNBK-BVTYP(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNBK-BVTYP                    '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNBK-BVTYP                  .
    APPEND FT.
  ENDIF.
  IF XBKNBK-BKREF(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNBK-BKREF                    '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNBK-BKREF                  .
    APPEND FT.
  ENDIF.
  IF XBKNBK-XEZER(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNBK-XEZER                    '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNBK-XEZER                  .
    APPEND FT.
  ENDIF.
ENDFORM.

*eject
*----------------------------------------------------------
*        Form D0130_FUELLEN_EINZELFELDER
*----------------------------------------------------------
FORM D0130_FUELLEN_EINZELFELDER.
  CHECK FL_CHECK = SPACE.
  CLEAR FT.
  FT-PROGRAM  = 'SAPMF02D'.
  FT-DYNPRO   = '0130'.
  FT-DYNBEGIN = 'X'.
  APPEND FT.
  IF BKNA1-KNRZA(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-KNRZA                    '.
    FT-FVAL = BKNA1-KNRZA                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-XZEMP(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-XZEMP                    '.
    FT-FVAL = BKNA1-XZEMP                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-DTAMS(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-DTAMS                    '.
    FT-FVAL = BKNA1-DTAMS                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-DTAWS(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-DTAWS                    '.
    FT-FVAL = BKNA1-DTAWS                   .
    APPEND FT.
  ENDIF.
ENDFORM.

*eject
*----------------------------------------------------------
*        Form D0340_FUELLEN
*----------------------------------------------------------
FORM D0340_FUELLEN.
  CLEAR FT.
  FT-PROGRAM  = 'SAPMF02D'.
  FT-DYNPRO   = '0340'.
  FT-DYNBEGIN = 'X'.
  APPEND FT.
  IF XBKNVA-ABLAD(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVA-ABLAD                    '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNVA-ABLAD                  .
    APPEND FT.
  ENDIF.
  IF XBKNVA-DEFAB(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVA-DEFAB                    '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNVA-DEFAB                  .
    APPEND FT.
  ENDIF.
  IF XBKNVA-KNFAK(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVA-KNFAK                    '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNVA-KNFAK                  .
    APPEND FT.
  ENDIF.
ENDFORM.

*eject
*----------------------------------------------------------
*        Form D1340_FUELLEN
*----------------------------------------------------------
FORM D1340_FUELLEN.
  CLEAR FT.
  FT-PROGRAM  = 'SAPMF02D'.
  FT-DYNPRO   = '1340'.
  FT-DYNBEGIN = 'X'.
  APPEND FT.
  IF XBKNVA-WANID(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVA-WANID                    '.
    FT-FVAL = XBKNVA-WANID                  .
    APPEND FT.
  ENDIF.
  IF XBKNVA-MOAB1(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVA-MOAB1                    '.
    FT-FVAL = XBKNVA-MOAB1                  .
    APPEND FT.
  ENDIF.
  IF XBKNVA-MOBI1(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVA-MOBI1                    '.
    FT-FVAL = XBKNVA-MOBI1                  .
    APPEND FT.
  ENDIF.
  IF XBKNVA-MOAB2(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVA-MOAB2                    '.
    FT-FVAL = XBKNVA-MOAB2                  .
    APPEND FT.
  ENDIF.
  IF XBKNVA-MOBI2(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVA-MOBI2                    '.
    FT-FVAL = XBKNVA-MOBI2                  .
    APPEND FT.
  ENDIF.
  IF XBKNVA-DIAB1(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVA-DIAB1                    '.
    FT-FVAL = XBKNVA-DIAB1                  .
    APPEND FT.
  ENDIF.
  IF XBKNVA-DIBI1(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVA-DIBI1                    '.
    FT-FVAL = XBKNVA-DIBI1                  .
    APPEND FT.
  ENDIF.
  IF XBKNVA-DIAB2(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVA-DIAB2                    '.
    FT-FVAL = XBKNVA-DIAB2                  .
    APPEND FT.
  ENDIF.
  IF XBKNVA-DIBI2(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVA-DIBI2                    '.
    FT-FVAL = XBKNVA-DIBI2                  .
    APPEND FT.
  ENDIF.
  IF XBKNVA-MIAB1(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVA-MIAB1                    '.
    FT-FVAL = XBKNVA-MIAB1                  .
    APPEND FT.
  ENDIF.
  IF XBKNVA-MIBI1(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVA-MIBI1                    '.
    FT-FVAL = XBKNVA-MIBI1                  .
    APPEND FT.
  ENDIF.
  IF XBKNVA-MIAB2(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVA-MIAB2                    '.
    FT-FVAL = XBKNVA-MIAB2                  .
    APPEND FT.
  ENDIF.
  IF XBKNVA-MIBI2(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVA-MIBI2                    '.
    FT-FVAL = XBKNVA-MIBI2                  .
    APPEND FT.
  ENDIF.
  IF XBKNVA-DOAB1(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVA-DOAB1                    '.
    FT-FVAL = XBKNVA-DOAB1                  .
    APPEND FT.
  ENDIF.
  IF XBKNVA-DOBI1(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVA-DOBI1                    '.
    FT-FVAL = XBKNVA-DOBI1                  .
    APPEND FT.
  ENDIF.
  IF XBKNVA-DOAB2(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVA-DOAB2                    '.
    FT-FVAL = XBKNVA-DOAB2                  .
    APPEND FT.
  ENDIF.
  IF XBKNVA-DOBI2(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVA-DOBI2                    '.
    FT-FVAL = XBKNVA-DOBI2                  .
    APPEND FT.
  ENDIF.
  IF XBKNVA-FRAB1(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVA-FRAB1                    '.
    FT-FVAL = XBKNVA-FRAB1                  .
    APPEND FT.
  ENDIF.
  IF XBKNVA-FRBI1(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVA-FRBI1                    '.
    FT-FVAL = XBKNVA-FRBI1                  .
    APPEND FT.
  ENDIF.
  IF XBKNVA-FRAB2(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVA-FRAB2                    '.
    FT-FVAL = XBKNVA-FRAB2                  .
    APPEND FT.
  ENDIF.
  IF XBKNVA-FRBI2(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVA-FRBI2                    '.
    FT-FVAL = XBKNVA-FRBI2                  .
    APPEND FT.
  ENDIF.
  IF XBKNVA-SAAB1(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVA-SAAB1                    '.
    FT-FVAL = XBKNVA-SAAB1                  .
    APPEND FT.
  ENDIF.
  IF XBKNVA-SABI1(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVA-SABI1                    '.
    FT-FVAL = XBKNVA-SABI1                  .
    APPEND FT.
  ENDIF.
  IF XBKNVA-SAAB2(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVA-SAAB2                    '.
    FT-FVAL = XBKNVA-SAAB2                  .
    APPEND FT.
  ENDIF.
  IF XBKNVA-SABI2(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVA-SABI2                    '.
    FT-FVAL = XBKNVA-SABI2                  .
    APPEND FT.
  ENDIF.
  IF XBKNVA-SOAB1(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVA-SOAB1                    '.
    FT-FVAL = XBKNVA-SOAB1                  .
    APPEND FT.
  ENDIF.
  IF XBKNVA-SOBI1(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVA-SOBI1                    '.
    FT-FVAL = XBKNVA-SOBI1                  .
    APPEND FT.
  ENDIF.
  IF XBKNVA-SOAB2(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVA-SOAB2                    '.
    FT-FVAL = XBKNVA-SOAB2                  .
    APPEND FT.
  ENDIF.
  IF XBKNVA-SOBI2(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVA-SOBI2                    '.
    FT-FVAL = XBKNVA-SOBI2                  .
    APPEND FT.
  ENDIF.
ENDFORM.

*eject
*----------------------------------------------------------
*        Form D0370_FUELLEN
*----------------------------------------------------------
FORM D0370_FUELLEN.
  CLEAR FT.
  FT-PROGRAM  = 'SAPMF02D'.
  FT-DYNPRO   = '0370'.
  FT-DYNBEGIN = 'X'.
  APPEND FT.
  IF XBKNEX-LNDEX(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNEX-LNDEX                    '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNEX-LNDEX                  .
    APPEND FT.
  ENDIF.
  IF XBKNEX-TDODA(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNEX-TDODA                    '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNEX-TDODA                  .
    APPEND FT.
  ENDIF.
  IF XBKNEX-TDOCO(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNEX-TDOCO                    '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNEX-TDOCO                  .
    APPEND FT.
  ENDIF.
  IF XBKNEX-SDNDA(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNEX-SDNDA                    '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNEX-SDNDA                  .
    APPEND FT.
  ENDIF.
  IF XBKNEX-SDNCO(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNEX-SDNCO                    '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNEX-SDNCO                  .
    APPEND FT.
  ENDIF.
  IF XBKNEX-DHRDA(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNEX-DHRDA                    '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNEX-DHRDA                  .
    APPEND FT.
  ENDIF.
  IF XBKNEX-DHRCO(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNEX-DHRCO                    '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNEX-DHRCO                  .
    APPEND FT.
  ENDIF.
ENDFORM.

*eject
*----------------------------------------------------------
*        Form D0370_FUELLEN_EINZELFELDER
*----------------------------------------------------------
FORM D0370_FUELLEN_EINZELFELDER.
  CHECK FL_CHECK = SPACE.
  CLEAR FT.
  FT-PROGRAM  = 'SAPMF02D'.
  FT-DYNPRO   = '0370'.
  FT-DYNBEGIN = 'X'.
  APPEND FT.
  IF BKNA1-CIVVE(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-CIVVE                    '.
    FT-FVAL = BKNA1-CIVVE                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-MILVE(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-MILVE                    '.
    FT-FVAL = BKNA1-MILVE                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-CCC01(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-CCC01                    '.
    FT-FVAL = BKNA1-CCC01                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-CCC02(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-CCC02                    '.
    FT-FVAL = BKNA1-CCC02                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-CCC03(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-CCC03                    '.
    FT-FVAL = BKNA1-CCC03                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-CCC04(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-CCC04                    '.
    FT-FVAL = BKNA1-CCC04                   .
    APPEND FT.
  ENDIF.
ENDFORM.

*eject
*----------------------------------------------------------
*        Form D0360_FUELLEN
*----------------------------------------------------------
FORM D0360_FUELLEN.
  CLEAR FT.
  FT-PROGRAM  = 'SAPMF02D'.
  FT-DYNPRO   = '0360'.
  FT-DYNBEGIN = 'X'.
  APPEND FT.
  IF ZAV_FLAG IS INITIAL.
  IF XBKNVK-ANRED(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVK-ANRED                    '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNVK-ANRED                  .
    APPEND FT.
  ENDIF.
  ENDIF.
  IF XBKNVK-NAMEV(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVK-NAMEV                    '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNVK-NAMEV                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-NAME1(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVK-NAME1                    '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNVK-NAME1                  .
    APPEND FT.
  ENDIF.
  IF ZAV_FLAG IS INITIAL.
  IF XBKNVK-TELF1(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVK-TELF1                    '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNVK-TELF1                  .
    APPEND FT.
  ENDIF.
  ENDIF.
  IF XBKNVK-ABTNR(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVK-ABTNR                    '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNVK-ABTNR                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-PAFKT(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVK-PAFKT                    '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNVK-PAFKT                  .
    APPEND FT.
  ENDIF.
ENDFORM.

*eject
*----------------------------------------------------------
*        Form D1360_FUELLEN
*----------------------------------------------------------
FORM D1360_FUELLEN.
  CLEAR FT.
  FT-PROGRAM  = 'SAPMF02D'.
  FT-DYNPRO   = '1360'.
  FT-DYNBEGIN = 'X'.
  APPEND FT.
  IF XBKNVK-SORTL(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVK-SORTL                    '.
    FT-FVAL = XBKNVK-SORTL                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-NAME1(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVK-NAME1                    '.
    FT-FVAL = XBKNVK-NAME1                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-NAMEV(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVK-NAMEV                    '.
    FT-FVAL = XBKNVK-NAMEV                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-TITEL_AP(1)                NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVK-TITEL_AP                 '.
    FT-FVAL = XBKNVK-TITEL_AP               .
    APPEND FT.
  ENDIF.
  IF XBKNVK-ANRED(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVK-ANRED                    '.
    FT-FVAL = XBKNVK-ANRED                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-SPNAM(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVK-SPNAM                    '.
    FT-FVAL = XBKNVK-SPNAM                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-PAVIP(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVK-PAVIP                    '.
    FT-FVAL = XBKNVK-PAVIP                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-TELF1(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVK-TELF1                    '.
    FT-FVAL = XBKNVK-TELF1                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-PARLA(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVK-PARLA                    '.
    FT-FVAL = XBKNVK-PARLA                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-PARGE(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVK-PARGE                    '.
    FT-FVAL = XBKNVK-PARGE                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-FAMST(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVK-FAMST                    '.
    FT-FVAL = XBKNVK-FAMST                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-GBDAT(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVK-GBDAT                    '.
    FT-FVAL = XBKNVK-GBDAT                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-ABTNR(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVK-ABTNR                    '.
    FT-FVAL = XBKNVK-ABTNR                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-ABTPA(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVK-ABTPA                    '.
    FT-FVAL = XBKNVK-ABTPA                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-PAFKT(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVK-PAFKT                    '.
    FT-FVAL = XBKNVK-PAFKT                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-PARVO(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVK-PARVO                    '.
    FT-FVAL = XBKNVK-PARVO                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-UEPAR(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'RF02D-KTONR                   '.
    FT-FVAL = XBKNVK-UEPAR                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-VRTNR(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVK-VRTNR                    '.
    FT-FVAL = XBKNVK-VRTNR                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-BRYTH(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVK-BRYTH                    '.
    FT-FVAL = XBKNVK-BRYTH                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-NMAIL(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVK-NMAIL                    '.
    FT-FVAL = XBKNVK-NMAIL                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-AKVER(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVK-AKVER                    '.
    FT-FVAL = XBKNVK-AKVER                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-PARAU(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVK-PARAU                    '.
    FT-FVAL = XBKNVK-PARAU                  .
    APPEND FT.
  ENDIF.
ENDFORM.

*eject
*----------------------------------------------------------
*        Form D1365_FUELLEN
*----------------------------------------------------------
FORM D1365_FUELLEN.
  CLEAR FT.
  FT-PROGRAM  = 'SAPMF02D'.
  FT-DYNPRO   = '1365'.
  FT-DYNBEGIN = 'X'.
  APPEND FT.
  IF XBKNVK-MOAB1(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = '*KNVK-MOAB1                   '.
    FT-FVAL = XBKNVK-MOAB1                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-MOBI1(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = '*KNVK-MOBI1                   '.
    FT-FVAL = XBKNVK-MOBI1                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-MOAB2(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = '*KNVK-MOAB2                   '.
    FT-FVAL = XBKNVK-MOAB2                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-MOBI2(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = '*KNVK-MOBI2                   '.
    FT-FVAL = XBKNVK-MOBI2                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-DIAB1(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = '*KNVK-DIAB1                   '.
    FT-FVAL = XBKNVK-DIAB1                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-DIBI1(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = '*KNVK-DIBI1                   '.
    FT-FVAL = XBKNVK-DIBI1                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-DIAB2(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = '*KNVK-DIAB2                   '.
    FT-FVAL = XBKNVK-DIAB2                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-DIBI2(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = '*KNVK-DIBI2                   '.
    FT-FVAL = XBKNVK-DIBI2                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-MIAB1(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = '*KNVK-MIAB1                   '.
    FT-FVAL = XBKNVK-MIAB1                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-MIBI1(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = '*KNVK-MIBI1                   '.
    FT-FVAL = XBKNVK-MIBI1                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-MIAB2(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = '*KNVK-MIAB2                   '.
    FT-FVAL = XBKNVK-MIAB2                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-MIBI2(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = '*KNVK-MIBI2                   '.
    FT-FVAL = XBKNVK-MIBI2                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-DOAB1(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = '*KNVK-DOAB1                   '.
    FT-FVAL = XBKNVK-DOAB1                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-DOBI1(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = '*KNVK-DOBI1                   '.
    FT-FVAL = XBKNVK-DOBI1                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-DOAB2(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = '*KNVK-DOAB2                   '.
    FT-FVAL = XBKNVK-DOAB2                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-DOBI2(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = '*KNVK-DOBI2                   '.
    FT-FVAL = XBKNVK-DOBI2                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-FRAB1(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = '*KNVK-FRAB1                   '.
    FT-FVAL = XBKNVK-FRAB1                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-FRBI1(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = '*KNVK-FRBI1                   '.
    FT-FVAL = XBKNVK-FRBI1                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-FRAB2(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = '*KNVK-FRAB2                   '.
    FT-FVAL = XBKNVK-FRAB2                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-FRBI2(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = '*KNVK-FRBI2                   '.
    FT-FVAL = XBKNVK-FRBI2                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-SAAB1(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = '*KNVK-SAAB1                   '.
    FT-FVAL = XBKNVK-SAAB1                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-SABI1(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = '*KNVK-SABI1                   '.
    FT-FVAL = XBKNVK-SABI1                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-SAAB2(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = '*KNVK-SAAB2                   '.
    FT-FVAL = XBKNVK-SAAB2                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-SABI2(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = '*KNVK-SABI2                   '.
    FT-FVAL = XBKNVK-SABI2                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-SOAB1(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = '*KNVK-SOAB1                   '.
    FT-FVAL = XBKNVK-SOAB1                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-SOBI1(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = '*KNVK-SOBI1                   '.
    FT-FVAL = XBKNVK-SOBI1                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-SOAB2(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = '*KNVK-SOAB2                   '.
    FT-FVAL = XBKNVK-SOAB2                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-SOBI2(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = '*KNVK-SOBI2                   '.
    FT-FVAL = XBKNVK-SOBI2                  .
    APPEND FT.
  ENDIF.
ENDFORM.

*eject
*----------------------------------------------------------
*        Form D1366_FUELLEN
*----------------------------------------------------------
FORM D1366_FUELLEN.
  CLEAR FT.
  FT-PROGRAM  = 'SAPMF02D'.
  FT-DYNPRO   = '1366'.
  FT-DYNBEGIN = 'X'.
  APPEND FT.
  IF XBKNVK-PARH1(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = '*KNVK-PARH1                   '.
    FT-FVAL = XBKNVK-PARH1                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-PARH2(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = '*KNVK-PARH2                   '.
    FT-FVAL = XBKNVK-PARH2                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-PARH3(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = '*KNVK-PARH3                   '.
    FT-FVAL = XBKNVK-PARH3                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-PARH4(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = '*KNVK-PARH4                   '.
    FT-FVAL = XBKNVK-PARH4                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-PARH5(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = '*KNVK-PARH5                   '.
    FT-FVAL = XBKNVK-PARH5                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-PAKN1(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = '*KNVK-PAKN1                   '.
    FT-FVAL = XBKNVK-PAKN1                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-PAKN2(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = '*KNVK-PAKN2                   '.
    FT-FVAL = XBKNVK-PAKN2                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-PAKN3(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = '*KNVK-PAKN3                   '.
    FT-FVAL = XBKNVK-PAKN3                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-PAKN4(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = '*KNVK-PAKN4                   '.
    FT-FVAL = XBKNVK-PAKN4                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-PAKN5(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = '*KNVK-PAKN5                   '.
    FT-FVAL = XBKNVK-PAKN5                  .
    APPEND FT.
  ENDIF.
ENDFORM.

*eject
*----------------------------------------------------------
*        Form D0210_FUELLEN
*----------------------------------------------------------
FORM D0210_FUELLEN.
  CLEAR FT.
  FT-PROGRAM  = 'SAPMF02D'.
  FT-DYNPRO   = '0210'.
  FT-DYNBEGIN = 'X'.
  APPEND FT.
  IF BKNB1-AKONT(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-AKONT                    '.
    FT-FVAL = BKNB1-AKONT                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-ZUAWA(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-ZUAWA                    '.
    FT-FVAL = BKNB1-ZUAWA                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-KNRZE(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-KNRZE                    '.
    FT-FVAL = BKNB1-KNRZE                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-BLNKZ(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-BLNKZ                    '.
    FT-FVAL = BKNB1-BLNKZ                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-BEGRU(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-BEGRU                    '.
    FT-FVAL = BKNB1-BEGRU                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-FDGRV(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-FDGRV                    '.
    FT-FVAL = BKNB1-FDGRV                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-FRGRP(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-FRGRP                    '.
    FT-FVAL = BKNB1-FRGRP                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-WBRSL(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-WBRSL                    '.
    FT-FVAL = BKNB1-WBRSL                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-VZSKZ(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-VZSKZ                    '.
    FT-FVAL = BKNB1-VZSKZ                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-ZINDT(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-ZINDT                    '.
    FT-FVAL = BKNB1-ZINDT                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-ZINRT(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-ZINRT                    '.
    FT-FVAL = BKNB1-ZINRT                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-DATLZ(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-DATLZ                    '.
    FT-FVAL = BKNB1-DATLZ                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-ALTKN(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-ALTKN                    '.
    FT-FVAL = BKNB1-ALTKN                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-PERNR(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-PERNR                    '.
    FT-FVAL = BKNB1-PERNR                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-EKVBD(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-EKVBD                    '.
    FT-FVAL = BKNB1-EKVBD                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-GRICD(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-GRICD                    '.
    FT-FVAL = BKNB1-GRICD                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-GRIDT(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-GRIDT                    '.
    FT-FVAL = BKNB1-GRIDT                   .
    APPEND FT.
  ENDIF.
ENDFORM.

*eject
*----------------------------------------------------------
*        Form D0215_FUELLEN
*----------------------------------------------------------
FORM D0215_FUELLEN.
  CLEAR FT.
  FT-PROGRAM  = 'SAPMF02D'.
  FT-DYNPRO   = '0215'.
  FT-DYNBEGIN = 'X'.
  APPEND FT.
  IF BKNB1-ZTERM(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-ZTERM                    '.
    FT-FVAL = BKNB1-ZTERM                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-TOGRU(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-TOGRU                    '.
    FT-FVAL = BKNB1-TOGRU                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-GUZTE(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-GUZTE                    '.
    FT-FVAL = BKNB1-GUZTE                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-XZVER(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-XZVER                    '.
    FT-FVAL = BKNB1-XZVER                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-WAKON(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-WAKON                    '.
    FT-FVAL = BKNB1-WAKON                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-URLID(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-URLID                    '.
    FT-FVAL = BKNB1-URLID                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-KULTG(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-KULTG                    '.
    FT-FVAL = BKNB1-KULTG                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-CESSION_KZ(1)               NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-CESSION_KZ               '.
    FT-FVAL = BKNB1-CESSION_KZ              .
    APPEND FT.
  ENDIF.
  IF BKNB1-ZWELS(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-ZWELS                    '.
    FT-FVAL = BKNB1-ZWELS                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-ZAHLS(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-ZAHLS                    '.
    FT-FVAL = BKNB1-ZAHLS                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-KNRZB(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-KNRZB                    '.
    FT-FVAL = BKNB1-KNRZB                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-HBKID(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-HBKID                    '.
    FT-FVAL = BKNB1-HBKID                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-XPORE(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-XPORE                    '.
    FT-FVAL = BKNB1-XPORE                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-ZGRUP(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-ZGRUP                    '.
    FT-FVAL = BKNB1-ZGRUP                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-XVERR(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-XVERR                    '.
    FT-FVAL = BKNB1-XVERR                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-UZAWE(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-UZAWE                    '.
    FT-FVAL = BKNB1-UZAWE                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-WEBTR(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-WEBTR                    '.
    FT-FVAL = BKNB1-WEBTR                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-REMIT(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-REMIT                    '.
    FT-FVAL = BKNB1-REMIT                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-XEDIP(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-XEDIP                    '.
    FT-FVAL = BKNB1-XEDIP                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-LOCKB(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-LOCKB                    '.
    FT-FVAL = BKNB1-LOCKB                   .
    APPEND FT.
  ENDIF.
* \LA EhP5 - Begin
  DATA:    l_switch_paymadv type xfeld.
  l_switch_paymadv =  CL_FIN_APAR_SWITCH_CHECK=>FIN_APAR_PAYMT_ADV( ).
  IF BKNB1-AVSND(1) NE NODATA AND L_SWITCH_PAYMADV = 'X'.
    CLEAR FT.
    FT-FNAM = 'KNB1-AVSND                    '.
    FT-FVAL = BKNB1-AVSND                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-SMTP_ADDR(1) NE NODATA AND l_SWITCH_PAYMADV = 'X'.
    CLEAR FT.
    FT-FNAM = 'KNB1-SMTP_ADDR                '.
    FT-FVAL = BKNB1-SMTP_ADDR               .
    APPEND FT.
  ENDIF.
* \LA EhP5 - End
  IF BKNB1-VRSDG(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-VRSDG                    '.
    FT-FVAL = BKNB1-VRSDG                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-SREGL(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-SREGL                    '.
    FT-FVAL = BKNB1-SREGL                   .
    APPEND FT.
  ENDIF.
ENDFORM.

*eject
*----------------------------------------------------------
*        Form D0220_FUELLEN
*----------------------------------------------------------
FORM D0220_FUELLEN.
  CLEAR FT.
  FT-PROGRAM  = 'SAPMF02D'.
  FT-DYNPRO   = '0220'.
  FT-DYNBEGIN = 'X'.
  APPEND FT.
  IF BKNB5-MAHNA(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB5-MAHNA                    '.
    FT-FVAL = BKNB5-MAHNA                   .
    APPEND FT.
  ENDIF.
  IF BKNB5-MANSP(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB5-MANSP                    '.
    FT-FVAL = BKNB5-MANSP                   .
    APPEND FT.
  ENDIF.
  IF BKNB5-KNRMA(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB5-KNRMA                    '.
    FT-FVAL = BKNB5-KNRMA                   .
    APPEND FT.
  ENDIF.
  IF BKNB5-GMVDT(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB5-GMVDT                    '.
    FT-FVAL = BKNB5-GMVDT                   .
    APPEND FT.
  ENDIF.
  IF BKNB5-MADAT(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB5-MADAT                    '.
    FT-FVAL = BKNB5-MADAT                   .
    APPEND FT.
  ENDIF.
  IF BKNB5-MAHNS(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB5-MAHNS                    '.
    FT-FVAL = BKNB5-MAHNS                   .
    APPEND FT.
  ENDIF.
  IF BKNB5-BUSAB(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB5-BUSAB                    '.
    FT-FVAL = BKNB5-BUSAB                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-MGRUP(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-MGRUP                    '.
    FT-FVAL = BKNB1-MGRUP                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-BUSAB(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-BUSAB                    '.
    FT-FVAL = BKNB1-BUSAB                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-XDEZV(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-XDEZV                    '.
    FT-FVAL = BKNB1-XDEZV                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-EIKTO(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-EIKTO                    '.
    FT-FVAL = BKNB1-EIKTO                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-XAUSZ(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-XAUSZ                    '.
    FT-FVAL = BKNB1-XAUSZ                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-ZSABE(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-ZSABE                    '.
    FT-FVAL = BKNB1-ZSABE                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-PERKZ(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-PERKZ                    '.
    FT-FVAL = BKNB1-PERKZ                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-TLFNS(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-TLFNS                    '.
    FT-FVAL = BKNB1-TLFNS                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-TLFXS(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-TLFXS                    '.
    FT-FVAL = BKNB1-TLFXS                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-INTAD(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-INTAD                    '.
    FT-FVAL = BKNB1-INTAD                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-KVERM(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-KVERM                    '.
    FT-FVAL = BKNB1-KVERM                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-ZAMIM(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-ZAMIM                    '.
    FT-FVAL = BKNB1-ZAMIM                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-ZAMIV(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-ZAMIV                    '.
    FT-FVAL = BKNB1-ZAMIV                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-ZAMIR(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-ZAMIR                    '.
    FT-FVAL = BKNB1-ZAMIR                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-ZAMIO(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-ZAMIO                    '.
    FT-FVAL = BKNB1-ZAMIO                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-ZAMIB(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-ZAMIB                    '.
    FT-FVAL = BKNB1-ZAMIB                   .
    APPEND FT.
  ENDIF.
ENDFORM.

*eject
*----------------------------------------------------------
*        Form D0230_FUELLEN
*----------------------------------------------------------
FORM D0230_FUELLEN.
  CLEAR FT.
  FT-PROGRAM  = 'SAPMF02D'.
  FT-DYNPRO   = '0230'.
  FT-DYNBEGIN = 'X'.
  APPEND FT.
  IF BKNB1-VRSNR(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-VRSNR                    '.
    FT-FVAL = BKNB1-VRSNR                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-VRBKZ(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-VRBKZ                    '.
    FT-FVAL = BKNB1-VRBKZ                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-VLIBB(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-VLIBB                    '.
    FT-FVAL = BKNB1-VLIBB                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-VERDT(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-VERDT                    '.
    FT-FVAL = BKNB1-VERDT                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-VRSZL(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-VRSZL                    '.
    FT-FVAL = BKNB1-VRSZL                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-VRSPR(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-VRSPR                    '.
    FT-FVAL = BKNB1-VRSPR                   .
    APPEND FT.
  ENDIF.
ENDFORM.

*eject
*----------------------------------------------------------
*        Form D0610_FUELLEN
*----------------------------------------------------------
FORM D0610_FUELLEN.
  CLEAR FT.
  FT-PROGRAM  = 'SAPMF02D'.
  FT-DYNPRO   = '0610'.
  FT-DYNBEGIN = 'X'.
  APPEND FT.
  IF BKNB1-QLAND(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-QLAND                    '.
    FT-FVAL = BKNB1-QLAND                   .
    APPEND FT.
  ENDIF.
  IF XBKNBW-WITHT(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNBW-WITHT                    '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNBW-WITHT                  .
    APPEND FT.
  ENDIF.
  IF XBKNBW-WT_WITHCD(1)               NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNBW-WT_WITHCD                '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNBW-WT_WITHCD              .
    APPEND FT.
  ENDIF.
  IF XBKNBW-WT_AGENT(1)                NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNBW-WT_AGENT                 '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNBW-WT_AGENT               .
    APPEND FT.
  ENDIF.
  IF XBKNBW-WT_AGTDF(1)                NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNBW-WT_AGTDF                 '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNBW-WT_AGTDF               .
    APPEND FT.
  ENDIF.
  IF XBKNBW-WT_AGTDT(1)                NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNBW-WT_AGTDT                 '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNBW-WT_AGTDT               .
    APPEND FT.
  ENDIF.
  IF XBKNBW-WT_WTSTCD(1)               NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNBW-WT_WTSTCD                '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNBW-WT_WTSTCD              .
    APPEND FT.
  ENDIF.
  IF XBKNBW-WT_EXNR(1)                 NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNBW-WT_EXNR                  '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNBW-WT_EXNR                .
    APPEND FT.
  ENDIF.
  IF XBKNBW-WT_EXRT(1)                 NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNBW-WT_EXRT                  '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNBW-WT_EXRT                .
    APPEND FT.
  ENDIF.
  IF XBKNBW-WT_WTEXRS(1)               NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNBW-WT_WTEXRS                '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNBW-WT_WTEXRS              .
    APPEND FT.
  ENDIF.
  IF XBKNBW-WT_EXDF(1)                 NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNBW-WT_EXDF                  '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNBW-WT_EXDF                .
    APPEND FT.
  ENDIF.
  IF XBKNBW-WT_EXDT(1)                 NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNBW-WT_EXDT                  '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNBW-WT_EXDT                .
    APPEND FT.
  ENDIF.
ENDFORM.

*eject
*----------------------------------------------------------
*        Form D0310_FUELLEN
*----------------------------------------------------------
FORM D0310_FUELLEN.
  CLEAR FT.
  FT-PROGRAM  = 'SAPMF02D'.
  FT-DYNPRO   = '0310'.
  FT-DYNBEGIN = 'X'.
  APPEND FT.
  IF BKNVV-BZIRK(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-BZIRK                    '.
    FT-FVAL = BKNVV-BZIRK                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-AWAHR(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-AWAHR                    '.
    FT-FVAL = BKNVV-AWAHR                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-VKBUR(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-VKBUR                    '.
    FT-FVAL = BKNVV-VKBUR                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-BEGRU(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-BEGRU                    '.
    FT-FVAL = BKNVV-BEGRU                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-VKGRP(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-VKGRP                    '.
    FT-FVAL = BKNVV-VKGRP                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-VSORT(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-VSORT                    '.
    FT-FVAL = BKNVV-VSORT                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-KDGRP(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-KDGRP                    '.
    FT-FVAL = BKNVV-KDGRP                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-EIKTO(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-EIKTO                    '.
    FT-FVAL = BKNVV-EIKTO                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-KLABC(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-KLABC                    '.
    FT-FVAL = BKNVV-KLABC                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-MEGRU(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-MEGRU                    '.
    FT-FVAL = BKNVV-MEGRU                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-WAERS(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-WAERS                    '.
    FT-FVAL = BKNVV-WAERS                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-KURST(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-KURST                    '.
    FT-FVAL = BKNVV-KURST                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-RDOFF(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-RDOFF                    '.
    FT-FVAL = BKNVV-RDOFF                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-PVKSM(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-PVKSM                    '.
    FT-FVAL = BKNVV-PVKSM                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-KONDA(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-KONDA                    '.
    FT-FVAL = BKNVV-KONDA                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-KALKS(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-KALKS                    '.
    FT-FVAL = BKNVV-KALKS                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-PLTYP(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-PLTYP                    '.
    FT-FVAL = BKNVV-PLTYP                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-VERSG(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-VERSG                    '.
    FT-FVAL = BKNVV-VERSG                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-AGREL(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-AGREL                    '.
    FT-FVAL = BKNVV-AGREL                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-BLIND(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-BLIND                    '.
    FT-FVAL = BKNVV-BLIND                   .
    APPEND FT.
  ENDIF.
ENDFORM.

*eject
*----------------------------------------------------------
*        Form D0315_FUELLEN
*----------------------------------------------------------
FORM D0315_FUELLEN.
  CLEAR FT.
  FT-PROGRAM  = 'SAPMF02D'.
  FT-DYNPRO   = '0315'.
  FT-DYNBEGIN = 'X'.
  APPEND FT.
  IF BKNVV-LPRIO(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-LPRIO                    '.
    FT-FVAL = BKNVV-LPRIO                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-KZAZU(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-KZAZU                    '.
    FT-FVAL = BKNVV-KZAZU                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-VSBED(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-VSBED                    '.
    FT-FVAL = BKNVV-VSBED                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-CHSPL(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-CHSPL                    '.
    FT-FVAL = BKNVV-CHSPL                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-VWERK(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-VWERK                    '.
    FT-FVAL = BKNVV-VWERK                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-PODKZ(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-PODKZ                    '.
    FT-FVAL = BKNVV-PODKZ                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-PODTG(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-PODTG                    '.
    FT-FVAL = BKNVV-PODTG                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-AUTLF(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-AUTLF                    '.
    FT-FVAL = BKNVV-AUTLF                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-KZTLF(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-KZTLF                    '.
    FT-FVAL = BKNVV-KZTLF                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-ANTLF(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-ANTLF                    '.
    FT-FVAL = BKNVV-ANTLF                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-UEBTK(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-UEBTK                    '.
    FT-FVAL = BKNVV-UEBTK                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-UNTTO(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-UNTTO                    '.
    FT-FVAL = BKNVV-UNTTO                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-UEBTO(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-UEBTO                    '.
    FT-FVAL = BKNVV-UEBTO                   .
    APPEND FT.
  ENDIF.
ENDFORM.

*eject
*----------------------------------------------------------
*        Form D0320_FUELLEN
*----------------------------------------------------------
FORM D0320_FUELLEN.
  CLEAR FT.
  FT-PROGRAM  = 'SAPMF02D'.
  FT-DYNPRO   = '0320'.
  FT-DYNBEGIN = 'X'.
  APPEND FT.
  IF BKNVV-MRNKZ(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-MRNKZ                    '.
    FT-FVAL = BKNVV-MRNKZ                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-BOKRE(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-BOKRE                    '.
    FT-FVAL = BKNVV-BOKRE                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-PRFRE(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-PRFRE                    '.
    FT-FVAL = BKNVV-PRFRE                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-PERFK(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-PERFK                    '.
    FT-FVAL = BKNVV-PERFK                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-PERRL(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-PERRL                    '.
    FT-FVAL = BKNVV-PERRL                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-INCO1(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-INCO1                    '.
    FT-FVAL = BKNVV-INCO1                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-INCO2(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-INCO2                    '.
    FT-FVAL = BKNVV-INCO2                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-ZTERM(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-ZTERM                    '.
    FT-FVAL = BKNVV-ZTERM                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-KABSS(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-KABSS                    '.
    FT-FVAL = BKNVV-KABSS                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-KKBER(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-KKBER                    '.
    FT-FVAL = BKNVV-KKBER                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-KTGRD(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-KTGRD                    '.
    FT-FVAL = BKNVV-KTGRD                   .
    APPEND FT.
  ENDIF.
ENDFORM.

*eject
*----------------------------------------------------------
*        Form D1350_FUELLEN
*----------------------------------------------------------
FORM D1350_FUELLEN.
  CLEAR FT.
  FT-PROGRAM  = 'SAPMF02D'.
  FT-DYNPRO   = '1350'.
  FT-DYNBEGIN = 'X'.
  APPEND FT.
  IF XBKNVI-TAXKD(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVI-TAXKD                    '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNVI-TAXKD                  .
    APPEND FT.
  ENDIF.
ENDFORM.

*eject
*----------------------------------------------------------
*        Form D1355_FUELLEN
*----------------------------------------------------------
FORM D1355_FUELLEN.
  CLEAR FT.
  FT-PROGRAM  = 'SAPMF02D'.
  FT-DYNPRO   = '1355'.
  FT-DYNBEGIN = 'X'.
  APPEND FT.
  IF XBKNVL-ALAND(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVL-ALAND                    '.
    FT-FVAL = XBKNVL-ALAND                  .
    APPEND FT.
  ENDIF.
  IF XBKNVL-TATYP(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVL-TATYP                    '.
    FT-FVAL = XBKNVL-TATYP                  .
    APPEND FT.
  ENDIF.
  IF XBKNVL-LICNR(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVL-LICNR                    '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNVL-LICNR                  .
    APPEND FT.
  ENDIF.
  IF XBKNVL-BELIC(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVL-BELIC                    '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNVL-BELIC                  .
    APPEND FT.
  ENDIF.
  IF XBKNVL-DATAB(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVL-DATAB                    '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNVL-DATAB                  .
    APPEND FT.
  ENDIF.
  IF XBKNVL-DATBI(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVL-DATBI                    '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNVL-DATBI                  .
    APPEND FT.
  ENDIF.
ENDFORM.

*eject
*----------------------------------------------------------
*        Form D0326_FUELLEN
*----------------------------------------------------------
FORM D0326_FUELLEN.
  CLEAR FT.
  FT-PROGRAM  = 'SAPMF02D'.
  FT-DYNPRO   = '0326'.
  FT-DYNBEGIN = 'X'.
  APPEND FT.
  IF XBKNVD-DOCTP(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVD-DOCTP                    '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNVD-DOCTP                  .
    APPEND FT.
  ENDIF.
  IF XBKNVD-SPRAS(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVD-SPRAS                    '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNVD-SPRAS                  .
    APPEND FT.
  ENDIF.
  IF XBKNVD-NACHA(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVD-NACHA                    '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNVD-NACHA                  .
    APPEND FT.
  ENDIF.
  IF XBKNVD-DOVER(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVD-DOVER                    '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNVD-DOVER                  .
    APPEND FT.
  ENDIF.
  IF XBKNVD-DOANZ(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVD-DOANZ                    '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNVD-DOANZ                  .
    APPEND FT.
  ENDIF.
ENDFORM.

*eject
*----------------------------------------------------------
*        Form D0324_FUELLEN
*----------------------------------------------------------
FORM D0324_FUELLEN.
  CLEAR FT.
  FT-PROGRAM  = 'SAPMF02D'.
  FT-DYNPRO   = '0324'.
  FT-DYNBEGIN = 'X'.
  APPEND FT.
  IF XBKNVP-PARVW(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVP-PARVW                    '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNVP-PARVW                  .
    APPEND FT.
  ENDIF.
  IF XBKNVP-KTONR(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'RF02D-KTONR                   '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNVP-KTONR                  .
    APPEND FT.
  ENDIF.
  IF XBKNVP-KNREF(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVP-KNREF                    '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNVP-KNREF                  .
    APPEND FT.
  ENDIF.
  IF XBKNVP-DEFPA(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVP-DEFPA                    '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNVP-DEFPA                  .
    APPEND FT.
  ENDIF.
ENDFORM.

*eject
*----------------------------------------------------------
*        Form D0510_FUELLEN
*----------------------------------------------------------
FORM D0510_FUELLEN.
  CLEAR FT.
  FT-PROGRAM  = 'SAPMF02D'.
  FT-DYNPRO   = '0510'.
  FT-DYNBEGIN = 'X'.
  APPEND FT.
  IF BKNA1-SPERR(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-SPERR                    '.
    FT-FVAL = BKNA1-SPERR                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-SPERR(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-SPERR                    '.
    FT-FVAL = BKNB1-SPERR                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-AUFSD(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-AUFSD                    '.
    FT-FVAL = BKNA1-AUFSD                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-AUFSD(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-AUFSD                    '.
    FT-FVAL = BKNVV-AUFSD                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-LIFSD(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-LIFSD                    '.
    FT-FVAL = BKNA1-LIFSD                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-LIFSD(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-LIFSD                    '.
    FT-FVAL = BKNVV-LIFSD                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-FAKSD(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-FAKSD                    '.
    FT-FVAL = BKNA1-FAKSD                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-FAKSD(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-FAKSD                    '.
    FT-FVAL = BKNVV-FAKSD                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-CASSD(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-CASSD                    '.
    FT-FVAL = BKNA1-CASSD                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-CASSD(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-CASSD                    '.
    FT-FVAL = BKNVV-CASSD                   .
    APPEND FT.
  ENDIF.
ENDFORM.

*eject
*----------------------------------------------------------
*        Form D0520_FUELLEN
*----------------------------------------------------------
FORM D0520_FUELLEN.
  CLEAR FT.
  FT-PROGRAM  = 'SAPMF02D'.
  FT-DYNPRO   = '0520'.
  FT-DYNBEGIN = 'X'.
  APPEND FT.
  IF BKNA1-LOEVM(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-LOEVM                    '.
    FT-FVAL = BKNA1-LOEVM                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-LOEVM(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-LOEVM                    '.
    FT-FVAL = BKNB1-LOEVM                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-LOEVM(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-LOEVM                    '.
    FT-FVAL = BKNVV-LOEVM                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-NODEL(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-NODEL                    '.
    FT-FVAL = BKNA1-NODEL                   .
    APPEND FT.
  ENDIF.
  IF BKNB1-NODEL(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNB1-NODEL                    '.
    FT-FVAL = BKNB1-NODEL                   .
    APPEND FT.
  ENDIF.
ENDFORM.

*eject
*----------------------------------------------------------
*        Form DL120_FUELLEN
*----------------------------------------------------------
FORM DL120_FUELLEN.
  CLEAR FT.
  FT-PROGRAM  = 'SAPMF02C'.
  FT-DYNPRO   = '0120'.
  FT-DYNBEGIN = 'X'.
  APPEND FT.
  IF BKNKA-KLIMG(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNKA-KLIMG                    '.
    FT-FVAL = BKNKA-KLIMG                   .
    APPEND FT.
  ENDIF.
  IF BKNKA-KLIME(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNKA-KLIME                    '.
    FT-FVAL = BKNKA-KLIME                   .
    APPEND FT.
  ENDIF.
  IF BKNKA-WAERS(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNKA-WAERS                    '.
    FT-FVAL = BKNKA-WAERS                   .
    APPEND FT.
  ENDIF.
  IF BKNKA-DLAUS(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNKA-DLAUS                    '.
    FT-FVAL = BKNKA-DLAUS                   .
    APPEND FT.
  ENDIF.
ENDFORM.

*eject
*----------------------------------------------------------
*        Form DL210_FUELLEN
*----------------------------------------------------------
FORM DL210_FUELLEN.
  CLEAR FT.
  FT-PROGRAM  = 'SAPMF02C'.
  FT-DYNPRO   = '0210'.
  FT-DYNBEGIN = 'X'.
  APPEND FT.
  IF BKNKK-KLIMK(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNKK-KLIMK                    '.
    FT-FVAL = BKNKK-KLIMK                   .
    APPEND FT.
  ENDIF.
  IF BKNKK-KNKLI(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNKK-KNKLI                    '.
    FT-FVAL = BKNKK-KNKLI                   .
    APPEND FT.
  ENDIF.
  IF BKNKK-CTLPC(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNKK-CTLPC                    '.
    FT-FVAL = BKNKK-CTLPC                   .
    APPEND FT.
  ENDIF.
  IF BKNKK-CRBLB(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNKK-CRBLB                    '.
    FT-FVAL = BKNKK-CRBLB                   .
    APPEND FT.
  ENDIF.
  IF BKNKK-SBGRP(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNKK-SBGRP                    '.
    FT-FVAL = BKNKK-SBGRP                   .
    APPEND FT.
  ENDIF.
  IF BKNKK-GRUPP(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNKK-GRUPP                    '.
    FT-FVAL = BKNKK-GRUPP                   .
    APPEND FT.
  ENDIF.
  IF BKNKK-KDGRP(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNKK-KDGRP                    '.
    FT-FVAL = BKNKK-KDGRP                   .
    APPEND FT.
  ENDIF.
  IF BKNKK-DTREV(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNKK-DTREV                    '.
    FT-FVAL = BKNKK-DTREV                   .
    APPEND FT.
  ENDIF.
  IF BKNKK-SBDAT(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNKK-SBDAT                    '.
    FT-FVAL = BKNKK-SBDAT                   .
    APPEND FT.
  ENDIF.
  IF BKNKK-NXTRV(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNKK-NXTRV                    '.
    FT-FVAL = BKNKK-NXTRV                   .
    APPEND FT.
  ENDIF.
  IF BKNKK-KRAUS(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNKK-KRAUS                    '.
    FT-FVAL = BKNKK-KRAUS                   .
    APPEND FT.
  ENDIF.
  IF BKNKK-DBPAY(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNKK-DBPAY                    '.
    FT-FVAL = BKNKK-DBPAY                   .
    APPEND FT.
  ENDIF.
  IF BKNKK-REVDB(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNKK-REVDB                    '.
    FT-FVAL = BKNKK-REVDB                   .
    APPEND FT.
  ENDIF.
  IF BKNKK-DBRTG(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNKK-DBRTG                    '.
    FT-FVAL = BKNKK-DBRTG                   .
    APPEND FT.
  ENDIF.
  IF BKNKK-DBMON(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNKK-DBMON                    '.
    FT-FVAL = BKNKK-DBMON                   .
    APPEND FT.
  ENDIF.
  IF BKNKK-DBEKR(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNKK-DBEKR                    '.
    FT-FVAL = BKNKK-DBEKR                   .
    APPEND FT.
  ENDIF.
  IF BKNKK-DBWAE(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNKK-DBWAE                    '.
    FT-FVAL = BKNKK-DBWAE                   .
    APPEND FT.
  ENDIF.
ENDFORM.

*eject
*----------------------------------------------------------
*        Form DB100_FUELLEN
*----------------------------------------------------------
FORM DB100_FUELLEN.
  CLEAR FT.
  FT-PROGRAM  = 'SAPLBANK'.
  FT-DYNPRO   = '0100'.
  FT-DYNBEGIN = 'X'.
  APPEND FT.
  IF XBKNBK-BANKA(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'BNKA-BANKA                    '.
    FT-FVAL = XBKNBK-BANKA                  .
    APPEND FT.
  ENDIF.
  IF XBKNBK-PROVZ(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'BNKA-PROVZ                    '.
    FT-FVAL = XBKNBK-PROVZ                  .
    APPEND FT.
  ENDIF.
  IF XBKNBK-STRAS(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'BNKA-STRAS                    '.
    FT-FVAL = XBKNBK-STRAS                  .
    APPEND FT.
  ENDIF.
  IF XBKNBK-ORT01(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'BNKA-ORT01                    '.
    FT-FVAL = XBKNBK-ORT01                  .
    APPEND FT.
  ENDIF.
  IF XBKNBK-BRNCH(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'BNKA-BRNCH                    '.
    FT-FVAL = XBKNBK-BRNCH                  .
    APPEND FT.
  ENDIF.
  IF XBKNBK-SWIFT(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'BNKA-SWIFT                    '.
    FT-FVAL = XBKNBK-SWIFT                  .
    APPEND FT.
  ENDIF.
  IF XBKNBK-BGRUP(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'BNKA-BGRUP                    '.
    FT-FVAL = XBKNBK-BGRUP                  .
    APPEND FT.
  ENDIF.
  IF XBKNBK-XPGRO(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'BNKA-XPGRO                    '.
    FT-FVAL = XBKNBK-XPGRO                  .
    APPEND FT.
  ENDIF.
  IF XBKNBK-BNKLZ(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'BNKA-BNKLZ                    '.
    FT-FVAL = XBKNBK-BNKLZ                  .
    APPEND FT.
  ENDIF.
  IF XBKNBK-PSKTO(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'BNKA-PSKTO                    '.
    FT-FVAL = XBKNBK-PSKTO                  .
    APPEND FT.
  ENDIF.
ENDFORM.

*eject
*----------------------------------------------------------
*        Form DZ100_FUELLEN
*----------------------------------------------------------
FORM DZ100_FUELLEN.
  CLEAR FT.
  FT-PROGRAM  = 'SAPLV02Z'.
  FT-DYNPRO   = '0100'.
  FT-DYNBEGIN = 'X'.
  APPEND FT.
  IF BKNA1-KATR1(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-KATR1                    '.
    FT-FVAL = BKNA1-KATR1                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-KATR2(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-KATR2                    '.
    FT-FVAL = BKNA1-KATR2                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-KATR3(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-KATR3                    '.
    FT-FVAL = BKNA1-KATR3                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-KATR4(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-KATR4                    '.
    FT-FVAL = BKNA1-KATR4                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-KATR5(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-KATR5                    '.
    FT-FVAL = BKNA1-KATR5                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-KATR6(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-KATR6                    '.
    FT-FVAL = BKNA1-KATR6                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-KATR7(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-KATR7                    '.
    FT-FVAL = BKNA1-KATR7                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-KATR8(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-KATR8                    '.
    FT-FVAL = BKNA1-KATR8                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-KATR9(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-KATR9                    '.
    FT-FVAL = BKNA1-KATR9                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-KATR10(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-KATR10                   '.
    FT-FVAL = BKNA1-KATR10                  .
    APPEND FT.
  ENDIF.
  IF BKNA1-KDKG1(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-KDKG1                    '.
    FT-FVAL = BKNA1-KDKG1                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-KDKG2(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-KDKG2                    '.
    FT-FVAL = BKNA1-KDKG2                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-KDKG3(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-KDKG3                    '.
    FT-FVAL = BKNA1-KDKG3                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-KDKG4(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-KDKG4                    '.
    FT-FVAL = BKNA1-KDKG4                   .
    APPEND FT.
  ENDIF.
  IF BKNA1-KDKG5(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNA1-KDKG5                    '.
    FT-FVAL = BKNA1-KDKG5                   .
    APPEND FT.
  ENDIF.
ENDFORM.

*eject
*----------------------------------------------------------
*        Form DZ200_FUELLEN
*----------------------------------------------------------
FORM DZ200_FUELLEN.
  CLEAR FT.
  FT-PROGRAM  = 'SAPLV02Z'.
  FT-DYNPRO   = '0200'.
  FT-DYNBEGIN = 'X'.
  APPEND FT.
  IF BKNVV-KVGR1(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-KVGR1                    '.
    FT-FVAL = BKNVV-KVGR1                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-KVGR2(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-KVGR2                    '.
    FT-FVAL = BKNVV-KVGR2                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-KVGR3(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-KVGR3                    '.
    FT-FVAL = BKNVV-KVGR3                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-KVGR4(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-KVGR4                    '.
    FT-FVAL = BKNVV-KVGR4                   .
    APPEND FT.
  ENDIF.
  IF BKNVV-KVGR5(1)                    NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVV-KVGR5                    '.
    FT-FVAL = BKNVV-KVGR5                   .
    APPEND FT.
  ENDIF.
ENDFORM.

*eject
*----------------------------------------------------------
*        Form D0111_FUELLEN
*----------------------------------------------------------
FORM D0111_FUELLEN.
  CLEAR FT.
  FT-PROGRAM  = 'SAPMF02D'.
  FT-DYNPRO   = '0111'.
  FT-DYNBEGIN = 'X'.
  APPEND FT.
  TRAEGER_DYNP_ZAV = REP_NAME_D.
  PERFORM D0111_FUELLEN_ZAV USING 'KNA1'.
ENDFORM.

*eject
*----------------------------------------------------------
*        Form D1361_FUELLEN
*----------------------------------------------------------
FORM D1361_FUELLEN.
  CLEAR FT.
  FT-PROGRAM  = 'SAPMF02D'.
  FT-DYNPRO   = '1361'.
  FT-DYNBEGIN = 'X'.
  APPEND FT.
  IF XBKNVK-PAVIP(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVK-PAVIP                    '.
    FT-FVAL = XBKNVK-PAVIP                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-PARGE(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVK-PARGE                    '.
    FT-FVAL = XBKNVK-PARGE                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-ABTNR(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVK-ABTNR                    '.
    FT-FVAL = XBKNVK-ABTNR                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-GBDAT(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVK-GBDAT                    '.
    FT-FVAL = XBKNVK-GBDAT                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-PAFKT(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVK-PAFKT                    '.
    FT-FVAL = XBKNVK-PAFKT                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-FAMST(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVK-FAMST                    '.
    FT-FVAL = XBKNVK-FAMST                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-PARVO(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVK-PARVO                    '.
    FT-FVAL = XBKNVK-PARVO                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-UEPAR(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'RF02D-KTONR                   '.
    FT-FVAL = XBKNVK-UEPAR                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-VRTNR(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVK-VRTNR                    '.
    FT-FVAL = XBKNVK-VRTNR                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-BRYTH(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVK-BRYTH                    '.
    FT-FVAL = XBKNVK-BRYTH                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-NMAIL(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVK-NMAIL                    '.
    FT-FVAL = XBKNVK-NMAIL                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-AKVER(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVK-AKVER                    '.
    FT-FVAL = XBKNVK-AKVER                  .
    APPEND FT.
  ENDIF.
  IF XBKNVK-PARAU(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNVK-PARAU                    '.
    FT-FVAL = XBKNVK-PARAU                  .
    APPEND FT.
  ENDIF.
  TRAEGER_DYNP_ZAV = REP_NAME_D.
  PERFORM D1361_FUELLEN_ZAV.
ENDFORM.

*eject
*----------------------------------------------------------
*        Form D1130_FUELLEN
*----------------------------------------------------------
FORM D1130_FUELLEN.
  CLEAR FT.
  FT-PROGRAM  = 'SAPMF02D'.
  FT-DYNPRO   = '1130'.
  FT-DYNBEGIN = 'X'.
  APPEND FT.
  IF XBKNZA-EMPFD(1)                   NE NODATA.
    CLEAR FT.
    FT-FNAM = 'KNZA-EMPFD                    '.
    FT-FNAM+30(4) =  '(01)'.
    CONDENSE FT-FNAM NO-GAPS.
    FT-FVAL = XBKNZA-EMPFD                  .
    APPEND FT.
  ENDIF.
ENDFORM.


*Text elements
*----------------------------------------------------------
* BL2 Selection of structures that are used
* BL3 Program control
* BL4 Info Messages
* MSG Message FB$ issued with variables $ $ $ $


*Selection texts
*----------------------------------------------------------
* DS_NAME         File path name
* FL_CHECK         Check file only
* OS_XON         Structures from Release < 4.0
* XINF         No Information Message
* XLOG         Log
* XNONUNIC         File has Non-Unicode Format
* XPOP         Dialog Box


*Messages
*----------------------------------------------------------
*
* Message class: FB
*013   ....Editing was terminated
*104   Trans. & &: Acct already exists; general area not being processed
*110   Trans. &: Data for table & cannot be processed
*120   Trans. & bank details & & &: ...
*221   Country & has not been created
*626   Trans. &1: "IBAN without Bank Account Number" function is not available
*627   Trans. &1: Invalid value &2 in &3
*628   Trans. &1: Bank details &2 with IBAN &3 to be deleted do not exist
*629   Trans. &1: Termination due to unexpected situation
*631   Country key setting in country &1 does not permit processing
*640   Internal error in form PS_SET_NODATA: Structure & has no PS fields
*641   Internal error in function module DDIF_NAMETAB_GET
*642   Internal program error: Structure & does not exist
*643   Old data & cannot be processed; ADD-ON exists

----------------------------------------------------------------------
Extracted by Mass Download version 1.4.4 - E.G.Mellodew. 1998-2019. Sap Release 740
